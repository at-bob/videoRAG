{
  "timestamps": [
    1000,
    1002,
    1004,
    1006,
    1008,
    100,
    1010,
    1012,
    1014,
    1016,
    1018,
    1020,
    1022,
    1024,
    1026,
    1028,
    102,
    1030,
    1032,
    1034,
    1036,
    1038,
    1040,
    1042,
    1044,
    1046,
    1048,
    104,
    1050,
    1052,
    1054,
    1056,
    1058,
    1060,
    1062,
    1064,
    1066,
    1068,
    106,
    1070,
    1072,
    1074,
    1076,
    1078,
    1080,
    1082,
    1084,
    1086,
    1088,
    108,
    1090,
    1092,
    1094,
    1096,
    1098,
    10,
    1100,
    1102,
    1104,
    1106,
    1108,
    110,
    1110,
    1112,
    1114,
    1116,
    1118,
    1120,
    1122,
    1124,
    1126,
    1128,
    112,
    1130,
    1132,
    1134,
    1136,
    1138,
    1140,
    1142,
    1144,
    1146,
    1148,
    114,
    1150,
    1152,
    1154,
    1156,
    1158,
    1160,
    1162,
    1164,
    1166,
    1168,
    116,
    1170,
    1172,
    1174,
    1176,
    1178,
    1180,
    1182,
    1184,
    1186,
    1188,
    118,
    1190,
    1192,
    1194,
    1196,
    1198,
    1200,
    1202,
    1204,
    1206,
    1208,
    120,
    1210,
    1212,
    1214,
    1216,
    1218,
    1220,
    1222,
    1224,
    1226,
    1228,
    122,
    1230,
    1232,
    1234,
    1236,
    1238,
    1240,
    1242,
    1244,
    1246,
    1248,
    124,
    1250,
    1252,
    1254,
    1256,
    1258,
    1260,
    1262,
    1264,
    1266,
    1268,
    126,
    1270,
    1272,
    1274,
    1276,
    1278,
    1280,
    1282,
    1284,
    1286,
    1288,
    128,
    1290,
    1292,
    1294,
    1296,
    1298,
    12,
    1300,
    1302,
    1304,
    1306,
    1308,
    130,
    1310,
    1312,
    1314,
    1316,
    1318,
    1320,
    1322,
    1324,
    1326,
    1328,
    132,
    1330,
    1332,
    1334,
    1336,
    1338,
    1340,
    1342,
    1344,
    1346,
    1348,
    134,
    1350,
    1352,
    1354,
    1356,
    1358,
    1360,
    1362,
    1364,
    1366,
    1368,
    136,
    1370,
    1372,
    1374,
    1376,
    1378,
    1380,
    1382,
    1384,
    1386,
    1388,
    138,
    1390,
    1392,
    1394,
    1396,
    1398,
    1400,
    1402,
    1404,
    1406,
    1408,
    140,
    1410,
    1412,
    1414,
    1416,
    1418,
    1420,
    1422,
    1424,
    1426,
    1428,
    142,
    1430,
    1432,
    1434,
    1436,
    1438,
    1440,
    1442,
    1444,
    1446,
    1448,
    144,
    1450,
    1452,
    1454,
    1456,
    1458,
    1460,
    1462,
    1464,
    1466,
    1468,
    146,
    1470,
    1472,
    1474,
    1476,
    1478,
    1480,
    1482,
    1484,
    1486,
    1488,
    148,
    1490,
    1492,
    1494,
    1496,
    1498,
    14,
    1500,
    1502,
    1504,
    1506,
    1508,
    150,
    1510,
    1512,
    1514,
    1516,
    1518,
    1520,
    1522,
    1524,
    1526,
    1528,
    152,
    1530,
    1532,
    1534,
    1536,
    1538,
    1540,
    1542,
    1544,
    1546,
    1548,
    154,
    1550,
    1552,
    1554,
    1556,
    1558,
    1560,
    1562,
    1564,
    1566,
    1568,
    156,
    1570,
    1572,
    1574,
    1576,
    1578,
    1580,
    1582,
    1584,
    1586,
    1588,
    158,
    1590,
    1592,
    1594,
    1596,
    1598,
    1600,
    1602,
    1604,
    1606,
    1608,
    160,
    1610,
    1612,
    1614,
    1616,
    1618,
    1620,
    1622,
    1624,
    1626,
    1628,
    162,
    1630,
    1632,
    1634,
    1636,
    1638,
    1640,
    1642,
    1644,
    1646,
    1648,
    164,
    1650,
    1652,
    1654,
    1656,
    1658,
    1660,
    1662,
    1664,
    1666,
    1668,
    166,
    1670,
    1672,
    1674,
    1676,
    1678,
    1680,
    1682,
    1684,
    1686,
    1688,
    168,
    1690,
    1692,
    1694,
    1696,
    1698,
    16,
    1700,
    1702,
    1704,
    1706,
    1708,
    170,
    1710,
    1712,
    1714,
    1716,
    1718,
    1720,
    1722,
    1724,
    1726,
    1728,
    172,
    1730,
    1732,
    1734,
    1736,
    1738,
    1740,
    1742,
    1744,
    1746,
    1748,
    174,
    1750,
    1752,
    1754,
    1756,
    1758,
    1760,
    1762,
    1764,
    1766,
    1768,
    176,
    1770,
    1772,
    1774,
    1776,
    1778,
    1780,
    1782,
    1784,
    1786,
    1788,
    178,
    1790,
    1792,
    1794,
    1796,
    1798,
    1800,
    1802,
    1804,
    1806,
    1808,
    180,
    1810,
    1812,
    1814,
    1816,
    1818,
    1820,
    1822,
    1824,
    1826,
    1828,
    182,
    1830,
    1832,
    1834,
    1836,
    1838,
    1840,
    1842,
    1844,
    1846,
    1848,
    184,
    1850,
    1852,
    1854,
    1856,
    1858,
    1860,
    1862,
    1864,
    1866,
    1868,
    186,
    1870,
    1872,
    1874,
    1876,
    1878,
    1880,
    1882,
    1884,
    1886,
    1888,
    188,
    1890,
    1892,
    1894,
    1896,
    1898,
    18,
    1900,
    1902,
    1904,
    1906,
    1908,
    190,
    1910,
    1912,
    1914,
    1916,
    1918,
    1920,
    1922,
    1924,
    1926,
    1928,
    192,
    1930,
    1932,
    1934,
    1936,
    1938,
    1940,
    1942,
    1944,
    1946,
    1948,
    194,
    1950,
    1952,
    1954,
    1956,
    1958,
    1960,
    1962,
    1964,
    1966,
    1968,
    196,
    1970,
    1972,
    1974,
    1976,
    1978,
    1980,
    1982,
    1984,
    1986,
    1988,
    198,
    1990,
    1992,
    1994,
    1996,
    1998,
    2000,
    2002,
    2004,
    2006,
    2008,
    200,
    2010,
    2012,
    2014,
    2016,
    2018,
    2020,
    2022,
    2024,
    2026,
    2028,
    202,
    2030,
    2032,
    2034,
    2036,
    2038,
    2040,
    2042,
    2044,
    2046,
    2048,
    204,
    2050,
    2052,
    2054,
    2056,
    2058,
    2060,
    2062,
    2064,
    2066,
    2068,
    206,
    2070,
    2072,
    2074,
    2076,
    2078,
    2080,
    2082,
    2084,
    2086,
    2088,
    208,
    2090,
    2092,
    2094,
    2096,
    2098,
    20,
    2100,
    2102,
    2104,
    2106,
    2108,
    210,
    2110,
    2112,
    2114,
    2116,
    2118,
    2120,
    2122,
    2124,
    2126,
    2128,
    212,
    2130,
    2132,
    2134,
    2136,
    2138,
    2140,
    2142,
    2144,
    2146,
    2148,
    214,
    2150,
    2152,
    2154,
    2156,
    2158,
    2160,
    2162,
    2164,
    2166,
    2168,
    216,
    2170,
    2172,
    2174,
    2176,
    2178,
    2180,
    2182,
    2184,
    2186,
    2188,
    218,
    2190,
    2192,
    2194,
    2196,
    2198,
    2200,
    2202,
    2204,
    2206,
    2208,
    220,
    2210,
    2212,
    2214,
    2216,
    2218,
    2220,
    2222,
    2224,
    2226,
    2228,
    222,
    2230,
    2232,
    2234,
    2236,
    2238,
    2240,
    2242,
    2244,
    2246,
    2248,
    224,
    2250,
    2252,
    2254,
    2256,
    2258,
    2260,
    2262,
    2264,
    2266,
    2268,
    226,
    2270,
    2272,
    2274,
    2276,
    2278,
    2280,
    2282,
    2284,
    2286,
    2288,
    228,
    2290,
    2292,
    2294,
    2296,
    2298,
    22,
    2300,
    2302,
    2304,
    2306,
    2308,
    230,
    2310,
    2312,
    2314,
    2316,
    2318,
    2320,
    2322,
    2324,
    2326,
    2328,
    232,
    2330,
    2332,
    2334,
    2336,
    2338,
    2340,
    2342,
    2344,
    2346,
    2348,
    234,
    2350,
    2352,
    2354,
    2356,
    2358,
    2360,
    2362,
    2364,
    2366,
    2368,
    236,
    2370,
    2372,
    2374,
    2376,
    2378,
    2380,
    2382,
    2384,
    2386,
    2388,
    238,
    2390,
    2392,
    2394,
    2396,
    2398,
    2400,
    2402,
    2404,
    2406,
    2408,
    240,
    2410,
    2412,
    2414,
    2416,
    2418,
    2420,
    2422,
    2424,
    2426,
    2428,
    242,
    2430,
    2432,
    2434,
    2436,
    2438,
    2440,
    2442,
    2444,
    2446,
    2448,
    244,
    2450,
    2452,
    2454,
    2456,
    2458,
    2460,
    2462,
    2464,
    2466,
    2468,
    246,
    2470,
    2472,
    2474,
    2476,
    2478,
    2480,
    2482,
    2484,
    2486,
    2488,
    248,
    2490,
    2492,
    2494,
    2496,
    2498,
    24,
    2500,
    2502,
    2504,
    2506,
    2508,
    250,
    2510,
    2512,
    2514,
    2516,
    2518,
    2520,
    2522,
    2524,
    2526,
    2528,
    252,
    2530,
    2532,
    2534,
    2536,
    2538,
    2540,
    2542,
    2544,
    2546,
    2548,
    254,
    2550,
    2552,
    2554,
    2556,
    2558,
    2560,
    2562,
    2564,
    2566,
    2568,
    256,
    2570,
    2572,
    2574,
    2576,
    2578,
    2580,
    2582,
    2584,
    2586,
    2588,
    258,
    2590,
    2592,
    2594,
    2596,
    2598,
    2600,
    2602,
    2604,
    2606,
    2608,
    260,
    2610,
    2612,
    2614,
    2616,
    2618,
    2620,
    2622,
    2624,
    2626,
    2628,
    262,
    2630,
    2632,
    2634,
    2636,
    2638,
    2640,
    2642,
    2644,
    2646,
    2648,
    264,
    2650,
    2652,
    2654,
    2656,
    2658,
    2660,
    2662,
    2664,
    2666,
    2668,
    266,
    2670,
    2672,
    2674,
    2676,
    2678,
    2680,
    2682,
    2684,
    2686,
    2688,
    268,
    2690,
    2692,
    2694,
    2696,
    2698,
    26,
    2700,
    2702,
    2704,
    2706,
    2708,
    270,
    2710,
    2712,
    2714,
    2716,
    2718,
    2720,
    2722,
    2724,
    2726,
    2728,
    272,
    2730,
    2732,
    2734,
    2736,
    2738,
    2740,
    2742,
    2744,
    2746,
    2748,
    274,
    2750,
    2752,
    2754,
    2756,
    2758,
    2760,
    2762,
    2764,
    2766,
    2768,
    276,
    2770,
    2772,
    2774,
    2776,
    2778,
    2780,
    2782,
    2784,
    2786,
    2788,
    278,
    2790,
    2792,
    2794,
    2796,
    2798,
    2800,
    2802,
    2804,
    2806,
    2808,
    280,
    2810,
    2812,
    2814,
    2816,
    2818,
    2820,
    2822,
    2824,
    2826,
    2828,
    282,
    2830,
    2832,
    2834,
    2836,
    2838,
    2840,
    2842,
    2844,
    2846,
    2848,
    284,
    2850,
    2852,
    2854,
    2856,
    2858,
    2860,
    2862,
    2864,
    2866,
    2868,
    286,
    2870,
    2872,
    2874,
    2876,
    2878,
    2880,
    2882,
    2884,
    2886,
    2888,
    288,
    2890,
    2892,
    2894,
    2896,
    2898,
    28,
    2900,
    2902,
    2904,
    2906,
    2908,
    290,
    2910,
    2912,
    2914,
    2916,
    2918,
    2920,
    2922,
    2924,
    2926,
    2928,
    292,
    2930,
    2932,
    2934,
    2936,
    2938,
    2940,
    2942,
    2944,
    2946,
    2948,
    294,
    2950,
    2952,
    2954,
    2956,
    2958,
    2960,
    2962,
    2964,
    2966,
    2968,
    296,
    2970,
    2972,
    2974,
    2976,
    2978,
    2980,
    2982,
    2984,
    2986,
    2988,
    298,
    2990,
    2992,
    2994,
    2996,
    2998,
    2,
    3000,
    3002,
    3004,
    3006,
    3008,
    300,
    3010,
    3012,
    3014,
    3016,
    3018,
    3020,
    3022,
    3024,
    3026,
    3028,
    302,
    3030,
    3032,
    3034,
    3036,
    3038,
    3040,
    3042,
    3044,
    3046,
    3048,
    304,
    3050,
    3052,
    3054,
    3056,
    3058,
    3060,
    3062,
    3064,
    3066,
    3068,
    306,
    3070,
    3072,
    3074,
    3076,
    3078,
    3080,
    3082,
    3084,
    3086,
    3088,
    308,
    3090,
    3092,
    3094,
    3096,
    3098,
    30,
    3100,
    3102,
    3104,
    3106,
    3108,
    310,
    3110,
    3112,
    3114,
    3116,
    3118,
    3120,
    3122,
    3124,
    3126,
    3128,
    312,
    3130,
    3132,
    3134,
    3136,
    3138,
    3140,
    3142,
    3144,
    3146,
    3148,
    314,
    3150,
    3152,
    3154,
    3156,
    3158,
    3160,
    3162,
    3164,
    3166,
    3168,
    316,
    3170,
    3172,
    3174,
    3176,
    3178,
    3180,
    3182,
    3184,
    3186,
    3188,
    318,
    3190,
    3192,
    3194,
    3196,
    3198,
    3200,
    3202,
    3204,
    3206,
    3208,
    320,
    3210,
    3212,
    3214,
    3216,
    3218,
    3220,
    3222,
    3224,
    3226,
    3228,
    322,
    3230,
    3232,
    3234,
    3236,
    3238,
    3240,
    3242,
    3244,
    3246,
    3248,
    324,
    3250,
    3252,
    3254,
    3256,
    3258,
    3260,
    3262,
    3264,
    3266,
    3268,
    326,
    3270,
    3272,
    3274,
    3276,
    3278,
    3280,
    3282,
    3284,
    3286,
    3288,
    328,
    3290,
    3292,
    3294,
    3296,
    3298,
    32,
    3300,
    3302,
    3304,
    3306,
    3308,
    330,
    3310,
    3312,
    3314,
    3316,
    3318,
    3320,
    3322,
    3324,
    3326,
    3328,
    332,
    3330,
    3332,
    3334,
    3336,
    3338,
    3340,
    3342,
    3344,
    3346,
    3348,
    334,
    3350,
    3352,
    3354,
    3356,
    3358,
    3360,
    3362,
    3364,
    3366,
    3368,
    336,
    3370,
    3372,
    3374,
    3376,
    3378,
    3380,
    3382,
    3384,
    3386,
    3388,
    338,
    3390,
    3392,
    3394,
    3396,
    3398,
    3400,
    3402,
    3404,
    3406,
    3408,
    340,
    3410,
    3412,
    3414,
    3416,
    3418,
    3420,
    3422,
    3424,
    3426,
    3428,
    342,
    3430,
    3432,
    3434,
    3436,
    3438,
    3440,
    3442,
    3444,
    3446,
    3448,
    344,
    3450,
    3452,
    3454,
    3456,
    3458,
    3460,
    3462,
    3464,
    3466,
    3468,
    346,
    3470,
    3472,
    3474,
    3476,
    3478,
    3480,
    3482,
    3484,
    3486,
    3488,
    348,
    3490,
    3492,
    3494,
    3496,
    3498,
    34,
    3500,
    3502,
    3504,
    3506,
    3508,
    350,
    3510,
    3512,
    3514,
    3516,
    3518,
    3520,
    3522,
    3524,
    3526,
    3528,
    352,
    3530,
    3532,
    3534,
    3536,
    3538,
    3540,
    3542,
    3544,
    3546,
    3548,
    354,
    3550,
    3552,
    3554,
    3556,
    3558,
    3560,
    3562,
    3564,
    3566,
    3568,
    356,
    3570,
    3572,
    3574,
    3576,
    3578,
    3580,
    3582,
    3584,
    3586,
    3588,
    358,
    3590,
    3592,
    3594,
    3596,
    3598,
    3600,
    3602,
    3604,
    3606,
    3608,
    360,
    3610,
    3612,
    3614,
    3616,
    3618,
    3620,
    3622,
    3624,
    3626,
    3628,
    362,
    3630,
    3632,
    3634,
    3636,
    3638,
    3640,
    3642,
    3644,
    3646,
    3648,
    364,
    3650,
    3652,
    3654,
    3656,
    3658,
    3660,
    3662,
    3664,
    3666,
    3668,
    366,
    3670,
    3672,
    3674,
    3676,
    3678,
    3680,
    3682,
    3684,
    3686,
    3688,
    368,
    3690,
    3692,
    3694,
    3696,
    3698,
    36,
    3700,
    3702,
    3704,
    3706,
    3708,
    370,
    3710,
    3712,
    3714,
    3716,
    3718,
    3720,
    3722,
    3724,
    3726,
    3728,
    372,
    3730,
    3732,
    3734,
    3736,
    3738,
    3740,
    3742,
    3744,
    3746,
    3748,
    374,
    3750,
    3752,
    3754,
    3756,
    376,
    378,
    380,
    382,
    384,
    386,
    388,
    38,
    390,
    392,
    394,
    396,
    398,
    400,
    402,
    404,
    406,
    408,
    40,
    410,
    412,
    414,
    416,
    418,
    420,
    422,
    424,
    426,
    428,
    42,
    430,
    432,
    434,
    436,
    438,
    440,
    442,
    444,
    446,
    448,
    44,
    450,
    452,
    454,
    456,
    458,
    460,
    462,
    464,
    466,
    468,
    46,
    470,
    472,
    474,
    476,
    478,
    480,
    482,
    484,
    486,
    488,
    48,
    490,
    492,
    494,
    496,
    498,
    4,
    500,
    502,
    504,
    506,
    508,
    50,
    510,
    512,
    514,
    516,
    518,
    520,
    522,
    524,
    526,
    528,
    52,
    530,
    532,
    534,
    536,
    538,
    540,
    542,
    544,
    546,
    548,
    54,
    550,
    552,
    554,
    556,
    558,
    560,
    562,
    564,
    566,
    568,
    56,
    570,
    572,
    574,
    576,
    578,
    580,
    582,
    584,
    586,
    588,
    58,
    590,
    592,
    594,
    596,
    598,
    600,
    602,
    604,
    606,
    608,
    60,
    610,
    612,
    614,
    616,
    618,
    620,
    622,
    624,
    626,
    628,
    62,
    630,
    632,
    634,
    636,
    638,
    640,
    642,
    644,
    646,
    648,
    64,
    650,
    652,
    654,
    656,
    658,
    660,
    662,
    664,
    666,
    668,
    66,
    670,
    672,
    674,
    676,
    678,
    680,
    682,
    684,
    686,
    688,
    68,
    690,
    692,
    694,
    696,
    698,
    6,
    700,
    702,
    704,
    706,
    708,
    70,
    710,
    712,
    714,
    716,
    718,
    720,
    722,
    724,
    726,
    728,
    72,
    730,
    732,
    734,
    736,
    738,
    740,
    742,
    744,
    746,
    748,
    74,
    750,
    752,
    754,
    756,
    758,
    760,
    762,
    764,
    766,
    768,
    76,
    770,
    772,
    774,
    776,
    778,
    780,
    782,
    784,
    786,
    788,
    78,
    790,
    792,
    794,
    796,
    798,
    800,
    802,
    804,
    806,
    808,
    80,
    810,
    812,
    814,
    816,
    818,
    820,
    822,
    824,
    826,
    828,
    82,
    830,
    832,
    834,
    836,
    838,
    840,
    842,
    844,
    846,
    848,
    84,
    850,
    852,
    854,
    856,
    858,
    860,
    862,
    864,
    866,
    868,
    86,
    870,
    872,
    874,
    876,
    878,
    880,
    882,
    884,
    886,
    888,
    88,
    890,
    892,
    894,
    896,
    898,
    8,
    900,
    902,
    904,
    906,
    908,
    90,
    910,
    912,
    914,
    916,
    918,
    920,
    922,
    924,
    926,
    928,
    92,
    930,
    932,
    934,
    936,
    938,
    940,
    942,
    944,
    946,
    948,
    94,
    950,
    952,
    954,
    956,
    958,
    960,
    962,
    964,
    966,
    968,
    96,
    970,
    972,
    974,
    976,
    978,
    980,
    982,
    984,
    986,
    988,
    98,
    990,
    992,
    994,
    996,
    998
  ],
  "texts": [
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSuipinc (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSuipinc (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSuipinc (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSupine (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSupine (TS)",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (aa368@aub.edu.lb)\n\nAmerican Univ f Beirut",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSupine (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSupine (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and ToKEN\nSuipinc (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and ToKEN\nSupine (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and ToKEN\nSupine (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSupine (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\n\n.\nSupine (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSuipinc (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSupine (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSuipinc (TS)",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (aa368@aub.edu.lb)\n\nAmerican Univ f Beirut",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSupine (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSupine (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and ToKEN\nSupine (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and ToKEN\nSupine (TS)\n\n\u00ab",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and ToKEN\nSupine (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and ToKEN\nSupine (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and ToKEN\nSuipinc (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and ToKEN\nSuipinc (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSupine (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSupine (TS)",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (aa368@aub.edu.lb)\n\nAmerican Univ f Beirut",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSupine (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSupine (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSupine (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSupine (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN +\nSupine (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSupine (TS)",
    "P vs NP vs PSPACE\n\n# P is the set of all problems solvable in polynomial time.\n\nPy\n\u00a9 NP is the set of all decision problems solvable 1\n\nnon-deterministic polynomial time.\n\u2018\u00a2 Equivalent to polynomial-time jomial-size\n\ncertificate.\n\n\u00a9 PSPACE is the set of all decision problems that can be solved\n\n(by a Turing machine) using a polynomial amount of space.",
    "P vs NP vs PSPACE\n\n# P is the set of all problems solvable in polynomial time.\n\nmeans N%\n\n\u00a9 NP is the set of all decision problems solvable in\nnon-deterministic polynomial time.\n\u2018\u00a9 Equivalent to polynomial-time jomial-size\n\ncertificate.\n\n\u00a9 PSPACE is the set of all decision problems that can be solved\n\n(by a Turing machine) using a polynomial amount of space.",
    "P vs NP vs PSPACE\n\n# P is the set of all problems solvable in polynomial time\n\n\u00a9 NP is the set of all decision problems solvable in\nnon-deterministic polynomial time.\n\u2018\u00a9 Equivalent to polynomial-time verification or polynomial-size\n\ncertificate\n\n\u00a9 PSPACE is the set of all decision problems that can be solved\n\n(by a Turing machine) using a polynomial amount of space.",
    "P vs NP vs PSPACE\n\n\u00a9 P is the set of all problems solvable in polynomial time\n# NP is the set of all decision problems solvable in\nnon-deterministic polynomial time.\n\ncertificate\n\n# PSPACE is the set of all decision problems that can be solved\n\n(by a Turing machine) using a polynomial amount of space.",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (aa368@aub.edu.lb)\n\nAmerican Univ f Beirut",
    "P vs NP vs PSPACE\n\n\u00a9 P is the set of all problems solvable in polynomial time.\n\n\u00a9 NP is the set of all decision problems solvable in\nnon-deterministic polynomial time.\n\u2018\u00a2 Equivalent to polynomial-time olynomial-size\n\ncertificate\n\n# PSPACE is the set of all decision problems that can be solved\n\n(by a Turing machine) using a polynomial amount of space.",
    "P vs NP vs PSPACE\n\n\u00ab\n\n\u00a9 P is the set of all problems solvable in polynomial time.\n\n\u00a9 NP is the set of all decision problems solvable in\nnon-deterministic polynomial time.\n\u2018\u00a2 Equivalent to polynomial-time olynomial-size\n\ncertificate\n\n\u00a9 PSPACE is the set of all decision problems that can be solved\n\n(by a Turing machine) using a polynomial amount of space.",
    "P vs NP vs PSPACE\n\n\u00ab\n\n\u00a9 P is the set of all problems solvable in polynomial time.\n\n\u00a9 NP is the set of all decision problems solvable in\nnon-deterministic polynomial time.\n\u2018\u00a2 Equivalent to polynomial-time olynomial-size\n\ncertificate\n\n\u00a9 PSPACE is the set of all decision problems that can be solved\n\n(by a Turing machine) using a polynomial amount of space.",
    "P vs NP vs PSPACE\n\u00ab\n\n\u00a9 P is the set of all problems solvable in polynomial time.\n\u00a9 Input size N (bits to encode an instance) and polynomial time\n\n\u00a9 NP is the set of all decision problems solvable in\nnon-deterministic polynomial time.\n\u2018\u00a9 Equivalent to polynomial-time polynomial-size\n\ncertificate,\n\n\u00a9 PSPACE is the set of all decision problems that can be solved\n\n(by a Turing machine) using a polynomial amount of space.",
    "P vs NP vs PSPACE\n\u00ab\n\n\u00a9 P is the set of all problems solvable in polynomial time.\n\n\u00a9 NP is the set of all decision problems solvable in\nnon-deterministic polynomial time.\n\u2018\u00a2 Equivalent to polynomial-time verification or polynomial-size\n\ncertificate,\n\n PSPACE is the set of all decision problems that can be solved\n\n(by a Turing machine) using a polynomial amount of space.",
    "P vs NP vs PSPACE\n\u00ab\n\n\u00a9 P is the set of all problems solvable in polynomial time.\n\n\u00a9 NP is the set of all decision problems solvable in\nnon-deterministic polynomial time.\n\u2018\u00a2 Equivalent to polynomial-time verification or polynomial-size\n\ncertificate,\n\n\u00a9 PSPACE is the set of all decision problems that can be solved\n\n(by a Turing machine) using a polynomial amount of space.",
    "P vs NP vs PSPACE\n\n\u00ab\n\n\u00a9 P is the set of all problems solvable in polynomial time.\n\n\u00a9 NP is the set of all decision problems solvable in\nnon-deterministic polynomial time.\n\u2018\u00a9 Equivalent to polynomial-time v\n\ncertificate\n\n\u00a9 PSPACE is the set of all decision problems that can be solved\n\n(by a Turing machine) using a polynomial amount of space.",
    "P vs NP vs PSPACE\n\n\u00ab\n\n@ P is the set of all problems solvable in polynomial time,\n\u2018\u00a9 Input size NV (bits to encode an instance) and polynomial time\n\n\u00a9 NP is the set of all decision problems solvable in.\nnon-deterministic polynomial time.\n\u2018\u00a9 Equivalent to polynomial-time v\n\ncertificate\n\n# PSPACE is the set of all decision problems that can be solved\n\n(by a Turing machine) using a polynomial amount of space.",
    "P vs NP vs PSPACE\n\n\u00ab\n\n\u00a9 P is the set of all problems solvable in polynomial time.\n\n\u00a9 NP is the set of all decision problems solvable in\nnon-deterministic polynomial time.\n\u2018\u00a2 Equivalent to polynomial-time verification or polynomial-siz\n\ncertificate\n\n PSPACE is the set of all decision problems that can be solved\n\n(by a Turing machine) using a polynomial amount of space.",
    "P vs NP vs PSPACE\n\n\u00ab\n\n\u00a9 P is the set of all problems solvable in polynomial time.\n\u00ab\u00a9 Input size N (bits to encode an instance) and polynomial time\n\n\u00a9 NP is the set of all decision problems solvable in\nnon-deterministic polynomial time.\n\u2018\u00a2 Equivalent to polynomial-time verification or polynomial-siz\n\ncertificate\n\n\u00a9 PSPACE is the set of all decision problems that can be solved\n\n(by a Turing machine) using a polynomial amount of space.",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (aa368@aub.edu.lb)\n\nAmerican Univ f Beirut",
    "P vs NP vs PSPACE\n\n\u00a9 P is the set of all problems solvable in olynomial time.\n\n\u2018\u00a9 Input size N (bits to encode an instance) and polynomial time\n\n\u00a9 NP is the set of all decision problems solvable in\nnon-deterministic polynomial time.\n\u2018\u00a2 Equivalent to polynomial-time verification or polynomial-siz\n\ncertificate\n\n\u00a2 PSPACE is the set of all decision problems that can be solved\n\n(by a Turing machine) using a polynomial amount of space.",
    "P vs NP vs PSPACE\n\n\u00a9 P is the set of all problems solvable inbolynomial time.\n\n\u2018Input size N (bits to encode an instance) and polynomial time\n\n\u00a9 NP is the set of all decision problems solvable in\nnon-deterministic polynomial time.\n\u2018\u00a9 Equivalent to polynomial-time verification\n\ncertificate\n\n\u00a9 PSPACE is the set of all decision problems that can be solved\n\n(by a Turing machine) using a polynomial amount of space.",
    "P vs NP vs PSPACE\n\n\u00a9 P is the set of all problems solvable in polynomial time.\n\n\u00a9 NP is the set of all decision problems solvable in\nnon-deterministic polynomial time.\n\ncertificate\n\n\u00a9 PSPACE is the set of all decision problems that can be solved\n\n(by a Turing machine) using a polynomial amount of space.",
    "P vs NP vs PSPACE\n\n\u00a9 P is the set of all problems solvable in polynomial time.\n\u00a9 NP is the set of all decision problems solvable in\nnon-deterministic polynomial time.\n\ncertificate\n\n\u00a9 PSPACE is the set of all decision problems that can be solved\n\n(by a Turing machine) using a polynomial amount of space.",
    "P vs NP vs PSPACE\n\n\u201cEXPSPACE\n\nEXPTIME\nL\nPSPACE\n\nP CNP C PSPACE = NPSPACE (Savitch's Theorem),",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (a3368@aub.edu.lb)\n\n\u2018American Univ f Beirut",
    "P vs NP vs PSPACE\n\nEXPSPACE\n\nEXPTIME\nr\"\nPSPACE\n\nP CNP C PSPACE = NPSPACE (Savitch's Theoret",
    "P vs NP vs PSPACE\n\n\u201cEXPSPACE\n\nEXPTIME\n\nz\nPSPACE\n\n2\nNP\n\nP CNP C PSPACE = NPSPACE (Savitch's Theorem),",
    "P vs NP vs PSPACE\n\n\u2014~ EXPSPACE\n\nEXPTIME\n\nde\nPSPACE\n\n2\nNP\n\nP CNP C PSPACE = NPSPACE (Savitch's Theorem)",
    "P vs NP vs PSPACE\n\nEXPSPACE\n\nEXPTIME\ni\nPSPACE\n2\nNP\n\nP CNP C PSPACE = NPSPACE (Savitch's Theorem),",
    "P vs NP vs PSPACE\n\nEXPSPACE\n\nEXPTIME\ni\nPSPACE\n2\nNP\n\nP CNP C PSPACE = NPSPACE (Savitch's Theorem),",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping",
    "P vs NP vs PSPACE\n\nEXPSPACE\n\nEXPTIME\ni\nPSPACE\n2\nNP\n\nP CNP C PSPACE = NPSPACE (Savitch's Theorem),",
    "P vs NP vs PSPACE\n\nEXPSPACE\n\nEXPTIME\nL\nPSPACE\n2\nNP\n\nP CNP C PSPACE = NPSPACE (Savitch's Theorem),",
    "P vs NP vs PSPACE\n\nEXPSPACE\n\nEXPTIME\nL\nPSPACE\n2\nNP\n\nP CNP C PSPACE = NPSPACE (Savitch's Theorem),",
    "P vs NP vs PSPACE\n\nEXPSPACE\n\nEXPTIME\nL\nPSPACE\n2\nNP\n\nP CNP C PSPACE = NPSPACE (Savitch's Theorem),",
    "P vs NP vs PSPACE\n\n\u2014EXPSPACE\n\nEXPTIME\n\n2\nPSPACE\n\nP CNP C PSPACE = NPSPACE (Savitch's T\n\nheorem).",
    "P vs NP vs PSPACE\n\n\u2014EXPSPACE\n\nEXPTIME\n\n2\nPSPACE\n\nP CNP C PSPACE = NPSPACE (Savitch's T\n\nheorem).",
    "P vs NP vs PSPACE\n\nZZ EXPSPACE >\n\ny EXPTIME\nZ\n\n/[ PSPACE\n\n@\nSS y/\n\nP CNP C PSPACE = NPSPACE (Savitch's Theorem),",
    "P vs NP vs PSPACE\n\nZZ EXPSPACE\n\nEXPTIME\nz\nPSPACE\n\nP CNP C PSPACE = NPSPACE (Savitch's Theorem),",
    "P vs NP vs PSPACE\n\nZZ EXPSPACE >\n\nEXPTIME\nz\nPSPACE\n\nP CNP C PSPACE = NPSPACE (Savitch's Theorem),",
    "P vs NP vs PSPACE\n\nEXPSPACE\n\nEXPTIME\ni\nPSPACE\n\nP CNP C PSPACE = NPSPACE (Savitch's Theorem),",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping",
    "P vs NP vs PSPACE\n\nEXPSPACE\n\nEXPTIME\ni\nPSPACE\n\nP CNP C PSPACE = NPSPACE (Savitch's Theorem),",
    "P vs NP vs PSPACE\n\n~ EXPSPACE\n\nEXPTIME\n\n2\nPSPACE\n\n2\nNP\n\nP CNP C PSPACE = NPSPACE (Savitch's Theorem),",
    "P vs NP vs PSPACE\n\nEXPSPACE\n\nEXPTIME\n2\nPSPACE\n2\nNP\n\nP CNP C PSPACE = NPSPACE (Savitch's Theorem),",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\ntrivial). But there are also some very surprising results,\n\n\u00ab\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\n\nTOKEN SLtpING/JuMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth/treewidth,\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth,\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k\n\nTheorem\n\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results.\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth.\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuff",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k <3 and PSPACE-complete for k > 4,\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth.\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.\n\n> 4,",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth,\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth.\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.\n\n> 4,",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.\n\n> 4,",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.\n\n> 4,",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.\n\n> 4,",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth,\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuff",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.\n\n> 4,",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results.\n\nTheorem\nk-RECOLORING is in P for k <3 and PSPACE-co!\n\nTheorem\n\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth treewidth.\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nToken JUMPING is NP-comple",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth treewidth.\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-comple",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING /JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth.\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k <3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth.\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTokEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k <3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING /JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth treewidth.\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTokEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuff",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k <3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth treewidth.\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k <3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\n\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth.\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nToKEN JUMPING is NP-complete",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth.\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nToKeN JUMPING is NP-complete",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\ntrivial). But there are also some very surprising results.\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth treewidth.\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results.\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth.\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nToKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results.\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING /JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth.\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nToKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results.\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results.\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\n\nbounded bucketwidth /pathwidth treewidth.\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nToKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results.\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\n\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuff",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\n\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nToKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results.\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\n\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth.\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nToKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results.\n\nTheorem\nk-RECOLORING is in P for k <3 and PSPACE-co!\n\nTheorem\nTOKEN SLIDING /JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\ntrivial). But there are also some very surprising results.\n\nTheorem\nk-RECOLORING is in P for k <3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nToKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\ntrivial). But there are also some very surprising results.\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth /treewidth\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nToKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\ntrivial). But there are also some very surprising results.\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING/.JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth,\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\n\nbounded bucketwidth /pathwidth treewidth,\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k <3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\n\nbounded bucketwidth /pathwidth treewidth,\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.",
    "1. Combinatorial reconfiguration\n\n2. One-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuff",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth,\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\n\nbounded bucketwidth /pathwidth treewidth,\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\n\nbounded bucketwidth /pathwidth treewidth,\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\n\nbounded bucketwidth /pathwidth treewidth,\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\n\nbounded bucketwidth /pathwidth treewidth,\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth,\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\n\nbounded bucketwidth /pathwidth treewidth,\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE\ntrivial). But there are also some very surprising results.\n\nTheorem\nk-RECOLORING is in P for k <3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\n\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results.\n\nTheorem\nk-RECOLORING is in P for k <3 and PSPACE-complete for k > 4.\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results.\n\nTheorem\nk-RECOLORING is in P for k <3 and PSPACE-complete for k > 4.\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth.\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuff",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth.\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results.\n\nTheorem\nk-RECOLORING \u00e9s in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING /JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth.\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results,\n\nTheorem\nk-RECOLORING \u00e9s in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth treewidth.\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results.\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING /JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth /treewidth\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results.\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING /JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth.\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results.\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\ntrivial). But there are also some very surprising results\n\nTheorem\n\nk-RECOLORING \u00e9s in P for k < 3 and PSPACE-co1\n\nTheorem\n\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE\ntrivial). But there are also some very surprising results.\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.\n\n> 4,",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING /JUMPING is PSPACE-complete on graphs of\n\nbounded bucketwidth/pathwidth treewidth.\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nToKeN JUMPING is NP-complete",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuff",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k <3 and PSPACE-complete for k > 4,\n\nTheorem\nTOKEN SLIDING /JUMPING is PSPACE-complete on graphs of\n\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nToKeN JUMPING is NP-complete",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING /JUMPING is PSPACE-complete on graphs of\n\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nToKeN JUMPING is NP-complete",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k <3 and PSPACE-complete for k > 4,\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\n\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nToKeN JUMPING is NP-complete",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING /JUMPING is PSPACE-complete on graphs of\n\nbounded bucketwidth/pathwidth treewidth.\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nToKeN JUMPING is NP-complete",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k <3 and PSPACE-complete for k > 4,\n\nTheorem\nTOKEN SLIDING /JUMPING is PSPACE-complete on graphs of\n\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nToKeN JUMPING is NP-complete",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k <3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth.\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k <3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth.\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nToKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k <3 and PSPACE-co!\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\n\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\n\nk-RECOLORING is in P for k < 3 and PSPACE-cor\n\nTheorem\n\nTOKEN SLIDING/.JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth /treewideh.\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuff",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k <3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING /JUMPING is PSPACE-complete on graphs of\n\nbounded bucketwidth /pathwidth \u2018treewidth\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nToKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results,\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth treewidth\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results.\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth /pathwidth /treewidth.\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\n\nbounded bucketwidth /pathwidth treewidth.\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mou:\nAmerican Univ\n\nid (2a368@aub.edu.lb)\nf Beirut",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\n\nbounded bucketwidth/pathwidth treewidth.\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth /treewidth\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth /treewidth\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING \u00e9s in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\n\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k <3 and PSPACE-complete for k\n\nTheorem\n\nTOKEN SLIDING / JUMPING is PSPACE-complete on graph\nbounded bucketwidth/pathwidth treewidth.\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuff",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\ntrivial). But there are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING /JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE is\n\nthere are also some very surprising results\n\nTheorem\nk-RECOLORING is in P for k < 3 and PSPACE-complete for k > 4\n\nTheorem\nTOKEN SLIDING /JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth treewidth\n\nTheorem\n\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\n\nTOKEN JUMPING is NP-complete.",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE\n\ntrivial). But there are also some very surprising results.\n\nTheorem\nk-RECOLORING is in P for k <3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth /treewidth\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nToKEN JUMPING is NP-complete.\n\n> 4,",
    "The complexity of reconfiguration\n\nMany (really many) reconfiguration problems are\nPSPACE-complete (showing that they belong to NPSPACE\n\ntrivial). But there are also some very surprising results,\n\nTheorem\nk-RECOLORING is in P for k <3 and PSPACE-complete for k\n\nTheorem\nTOKEN SLIDING/JUMPING is PSPACE-complete on graphs of\nbounded bucketwidth/pathwidth /treewidth\n\nTheorem\nTOKEN SLIDING is PSPACE-complete on bipartite graphs but\nTOKEN JUMPING is NP-complete.\n\n> 4,",
    "The complexity of reconfiguration\n\nbounded tw\n\nTs\nPSPACE-complete\nPSPACE-complete\nP\n\nPSPACE-complete\n\nPSPACE-complete\nP\nPSPACE-complete\nr\nPSPACE-complete\nPSPACE-complete\n\nTI\n\n\u201cBSPACE-complet\n\nP\nPSPACE-complete\nP\n\n=\n\nP\n\nNP-comple\n\nEG\nPSPACE-complete\nPSPACE-complet",
    "The complexity of reconfiguration\n\nChass\nperfect\n\nchor\n\nsel\n\nbounded pw\n\nbounded tv\n\nTs\nPSPACE-complete\nPSPACE-complete\nP\nPSPACE-complete\nPSPACE-complete\nP\nPSPACE-complete\nP\nPSPACE-complete\nPSPACE-complete\n\nTI\n\n\u201cPSPACE-complet\n\nP\nPSPACE-complete\nP\n-\nP\n5\n\nNP-comple\nEG\nPSPACE-complete\nPSPACE-complet",
    "The complexity of reconfiguration\n\nChass\ncograph\nchordal\n\nsplit\n\ninterval\nbounded\n\nbounded\n\n3)\n\nis\nP\nP\n=\nP\n=\n=\nP\nP\nP\n\n1s\nPSPACE-complete\nPSPACE-complete\nP\nPSPACE-complete\nPSPACE-complete\nP\nPSPACE-complete\nP\nPSPACE-complete\nPSPACE-complete\n\nTW\n\n=\nPSPACE-complete\nP\n=\nP\n=\n\nNP-complete\n-\nPSPACE-complete\n\nPSPACE-complet",
    "The complexity of reconfiguration\n\nClass s 7S Ti\naaa P P P\ncactus P ?P P\n\nBounded P PSPACE-complete _ PSPACE-complete\n\nbounded P PSPACE-complete _ PSPACE-complet",
    "The complexity of reconfiguration\n\nClass s 7S Ti\naaa P P P\ncactus P ?P P\n\nBounded P PSPACE-complete _ PSPACE-complete",
    "The complexity of reconfiguration\n\nClass\n\ncograph\n\nsp\nbounded pw\n\nbounded tv\n\nis\nNP-complete\nP\nP\n=\nP\n[5\n=\nP\nP\nP\n\nTs\nPSPACE-complete\nPSPACE-complete\nP\n\nPSPACE-complete\nPSPACE-complete\nP\n\nPSPACE-complete\n=\n\nPSPACE-complete\nPSPACE-complete\n\ni\n\u00e9\n\nPSPACE-complete\n\nPSPACE-complet",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuff",
    "The complexity of reconfiguration\n\nClass\ncograph\nchordal\n\nsel\n\nBounded pw\n\nbounded tv\n\n3)\n\nis\nNP-complete\n\nTs\nPSPACE-complete\nPSPACE-complete\nP\n\nPSPACE-complete\nPSPACE-complete\nP\n\nPSPACE-complete\n=\n\nPSPACE-complete\nPSPACE-complete\n\nTi\n\u00e9\n\nPSPACE-complete\n\nPSPACE-complet",
    "The complexity of reconfiguration\n\nClass\ncograph\nchordal\n\nsel\n\nbounded pw\n\nbounded tv\n\n3)\n\nis\nNP-complete\n\nTs\nPSPACE-complete\nPSPACE-complete\nP\n\nPSPACE-complete\nPSPACE-complete\nP\n\nPSPACE-complete\n=\n\nPSPACE-complete\nPSPACE-complete\n\nT\n\u00e9\n\nPSPACE-complete\n\nPSPACE-complet",
    "The complexity of reconfiguration\n\nis\ncouraph\n\ncho\n\nsplit\n\nTs\nPSPACE-complete\nPSPACE-complete\nP\nPSPACE-complete\n\nPSPACE-complete\nP\nPSPACE-complete\n=\nPSPACE-complete\nPSPACE-complete\n\nTH\n5\nPSPACE complete\n-\n.\n=\n5\n;\nPSPACE-complete\n\nPSPACE-complete",
    "The complexity of reconfiguration\n\nis\ncouraph\n\ncho\n\nsplit\n\nTs\nPSPACE-complete\nPSPACE-complete\nP\nPSPACE-complete\n\nPSPACE-complete\nP\nPSPACE-complete\n=\nPSPACE-complete\nPSPACE-complete\n\nTH\n5\nPSPACE complete\n-\n.\n=\n5\n;\nPSPACE-complete\n\nPSPACE-complete",
    "The complexity of reconfiguration\n\nClass is\n\nplanar (degree 3) _ NP-complete\ncoaraph\n\nchordal\n\nsplit\n\nBounded pw\n\nA\n\nTs\nPSPACE-complete\nPSPACE-complete\nPSPACE-complete\n\nPSPACE-complete\nP\n\nPSPACE-complete\nP\nPSPACE-complete\n\nPSPACE-complete\n\nTi\n5\n\nPSPACE complete\na a\n\n.\n\n5\n\n5\n\n;\n\u201cPSPACE-complete",
    "The complexity of reconfiguration\n\nis\nchordal\nsplit\n\nA\n\nTs\nPSPACE-complete\nPSPACE-complete\nPSPACE-complete\n\nPSPACE-complete\nP\n\nPSPACE-complete\n3\nPSPACE-complete\n\nPSPACE-complete\n\nTi\n5\nPSPACE-complete\n-\n\n.\n5\n5\n\u2018\n\nPSPACE-complete",
    "The complexity of reconfiguration\n\nis\nperfect\n\nchordal\n\nsplit\n\nBounded pw\n\nTs\nPSPACE-complete\nPSPACE-complete\n.\n\nPSPACE-complete\n\nPSPACE-complete\nP\nPSPACE-complete\n3\nPSPACE-complete\n\nPSPACE-complete\n\nTi\n5\nPSPACE-complete\n-\n\n.\n5\n5\n\u2018\n\nPSPACE-complete",
    "The complexity of reconfiguration\n\nClass is Ts TI\nnar (degree 3) NP-complete PSPACE-complete  PSPACE-complet\nfect P PSPACE-complate _ PSPACE-complete\n\ncograph P P P i\n\nchordal P PSPACE-complete P\n\nsl P PSPACE:completeP.\n\ninterval P P\n\nbipartite PSPACE-complete _NB-complete\ncactus P P\nbounded pw P PSPACE-complete _ PSPACE-complete\n\nbounded tw PSPACE-complete _ PSPACE-complet",
    "The complexity of reconfiguration\n\nGlass is Ts TI\nplanar (degree 3) NP-complete PSPACE-complete _ PSPACE-complet\nperfect P PSPACE-complate _ PSPACE-complete\ncoaraph P P P\n\nchordal P PSPACE-complete\n\nsl P PSPACE-complete\n\nartite PSPACE-complete\n\ncactus P\n\nbounded pw P PSPACE-complete _ PSPACE-complete\n\nbounded tw PSPACE-complete _ PSPACE-complet",
    "The complexity of reconfiguration\n\nClass. is Ts ae\n\u201ccograph Pp P P\n\ninteaal a P B\n\nbipartite P PSPACE-complete NP-complete\ncactus P P P\n\nBounded P PSPACE-complete _ PSPACE-complete\nbounded P PSPACE-complete  PSPACE-complet",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuff",
    "The complexity of reconfiguration\n\nClass\nplanar (degree\n\n\u201ccograph\n\nbounded\n\nis\nP\nP\nmi\nP\nP\n=\nF\n=\nP\n\n7S\nPSPACE-complete\n5\n\nP\n\nPSPACE-complete\nPSPACE-complete\n\na\n\nP\n\n-\n\n7\n\n5\n\n=\n\ni\nPSPACE-complete",
    "The complexity of reconfiguration\n\nClass\nplanar (degree\n\n\u201ccograph\n\nbounded\n\nis\nP\nP\nmi\nP\nP\n=\nF\n=\nP\n\nTs\nPSPACE-complete\nPSPACE-complete\n=\n\nPSPACE-complete\n\n5\nP\nPSPACE-complete\n\na\n\nP\n\n-\n\n7\n\n5\n\n=\n\ni\nPSPACE-complete",
    "The complexity of reconfiguration\n\nClass is\nplanar (degree 3) _ NP-complete\n\u201ccograph\n\nchordal\nspl\n\nntertal\nbounded pw\n\nbounded tv\n\nTs\nPSPACE-complete\nPSPACE-complete\nP\n\nPSPACE-complete\n\n;\n\nPSPACE-complete\nP\n\nPSPACE-complete\nPSPACE-complete\n\na\nPSPACE-complet\nPp\nPSPAC\nP\n=\nP\nP\nNP-com\n\n'SPACE-complete\n\nPSPACE-complet",
    "The complexity of reconfiguration\n\nClass is\nplanar (degree 3) _ NP-complete\n\u201ccograph\n\nchordal\nspl\n\nnterdal\nbounded pw\n\nbounded tw\n\nTs\nPSPACE-complete\nPSPACE-complete\nP\n\nPSPACE-complete\n\n;\n\nPSPACE-complete\nP\n\nPSPACE-complete\nPSPACE-complete\n\nTW\nPSPACE:\nPp\nPSPAC\n\nP\n\n=\n\nP\n\nP\n\nNP-com\n\ni\n\n\"SPACE\nPSPACE:",
    "The complexity of reconfiguration\n\nClass 3 TS T\n\u201ccograph Pp P P\n\nreal P P B\n\ncactus P P P\nbounded P PSPACE-complete _ PSPACE-complete\nbounded P PSPACE-complete  PSPACE-complet",
    "The complexity of reconfiguration\n\nClass. is Ts Be\n\u201ccograph P P P\n\nPSPACE-complete_ P\nnteotal B B B\nP PSPACE-complete _ NP-complete\n\ncactus P P P\n\nBounded pw Pp PSPACE-complete _ PSPACE-complete\nbounded tv P PSPACE-complete  PSPACE-complet",
    "The complexity of reconfiguration\n\nClass\nplanar (degree\n\n\u201ccograph\nntertal\n\nbounded tv\n\nis\nP\n\nP\n\nmi\n\nP\n\nP\n\n-\n\nP\n\nZ\n\nP\n\nTs\nPSPACE-complete\nPSPACE-complete\n=\n\nPSPACE-complete\n\n5\n\nPSPACE-complete\n\nees\nPSPACE-complete\nPSPACE-complete\n\nT\nP\n\n-\n\n7\n\n5\n\n=\n\nNes",
    "The complexity of reconfiguration\n\nClass is\nplanar (degree 3) _ NP-complete\nperfect\n\ncograph\n\nchord\n\nsel\n\nnterda\n\n\u2018bounded pw\n\nbounded tw\n\n\"ACE-complete\n\nPSPACE-complete\nz\nPSPACE-complete\n\nz\n\nPSPACE-complete\n\nPSPACE-complete\n\nTH\n\u00e9\n-\n.\n5\n\nP\n\nNP-complete\n\nPSPACE-complete\n\nPSPACE-complet",
    "The complexity of reconfiguration\n\nClass is\nplanar (degree 3) _ NP-complete\nperfect\n\ncograph\n\nchord\n\nspl\n\nnterda\n\n\u2018bounded pw\n\nbounded tw\n\n\"ACE-complete\n\nPSPACE-complete\n\nPSPACE-complete\n\nz\n\nPSPACE-complete\ne\n\nPSPACE-complete\n\nPSPACE-complete\n\nTH\n\u00e9\n\n-\n\n.\n\n5\n\nz\n\nsongs\n\nPSPACE-complet",
    "The complexity of reconfiguration\n\nClass\n\nperfect\ncograph\nchord\nspl\nnterval\nBounded\n\nbounded\n\nis\n\nTs\nPSPACE-complete\nPSPACE-complete\nz\n\nPSPACE:compl\n\na\nPSPACE-complete\ne\n\nPSPACE-complete\n\nPSPACE-complete\n\nTH\n\u00e9\n\n-\n\n.\n\n5\n\n5\n\nue\nPSPACE-complet",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuff",
    "The complexity of reconfiguration\n\nTs\nPSPACE-complete\nPSPACE-complete\n=\nPSPACE-complete\nPSPACE-complete\na\nPSPACE-complete\n\nTH\nPSPACE-complet\nPv\nPSPACE-complete\nP\n\n=\n\nP\n\n=\n\nNP-comp\n\ne\nPSPACE-complete\nPSPACE-complete\n\nP\nPSPACE-complete\n\nPSPACE-complet",
    "The complexity of reconfiguration\n\nClass\n\nTs\nPSPACE-complete\nPSPACE-complete\n=\n\nPSPACE-complete\nPSPACE-complete\na\n\nPSPACE-complete\n\nTI\n\na\nPSPACE-complete\nP\n=\nP\n=\n\nNP-com\n\ne\nPSPACE-complete\n\nPSPACE-complete\n\n7\nPSPACE-complete\n\nPSPACE-complet",
    "The complexity of reconfiguration\n\nir (degree\ncograph\nchordal\n\nis\n3)_AP-complete\n\nP\n7\nP\na\n=\n\nTs\nPSPACE-complete\nPSPACE-complete\nP\n\nPSPACE-complete\nPSPACE-complete\nP\n\nPSPACE-complete\n\nTW\n\nPSPACE-complet\n\nPSPACE-complete\nP\n=\nP\n\nNP-complete\n\nBounded\n\nbounded\n\nF\nP\nP\n\ne\nPSPACE-complet\nPSPACE-complete\n\nP\n'SPACE-complete\nPSPACE-complete",
    "The complexity of reconfiguration\n\nClass 3 7s w\n\u2018even-hole-fr ? cal\n5\n\nbounded PSPACE-complete _ PSPACE-complet",
    "The complexity of reconfiguration\n\nClass 3 7s w\n\n\u2018even-hole-fr 7 7 ? cal\n\nperfect : PSPACE-complete \u201cPSPACE-complete\n5\n\nbounded PSPACE-complete _ PSPACE-complet",
    "The complexity of reconfiguration\n\nChass\ncograph\nchordal\nspl\nnterval\n\nis\ndegree 3) _ NP-complete\nP\n-\nP\n=\nP\n\nTs\nPSPACE\nPSPACE.\nP\nPSPACE\nPSPACE:\na\nPSPACE.\n\ncomplete\n\nTW\n\nPSPACE-complet\n\nee\n\nPSPACE-complete\nP\n=\nP\nz\n\nNP-complete\n\nbounded\n\nF\n\nP\nP\n\ne\nPSPACE.\nPSPACE-<\n\nArsen =\nPSPACE-complete\n\nPSPACE-complet",
    "The complexity of reconfiguration\n\nChass\ncograph\nchordal\nspl\nnterval\n\nis\ndegree 3) _ NP-complete\nP\n-\nP\n=\nP\n\n\u201cPSpACE\n\n\u201cPSPACE.\nP\nPSPACE\nPSPACE:\na\nPSPACE.\n\ncomplete\n\nTW\n\nPSPACE-complet\n\nee\n\nPSPACE-complete\nP\n=\nP\nz\n\nNP-complete\n\nbounded\n\nF\n\nP\nP\n\ne\nPSPACE.\nPSPACE-<\n\nArsen =\nPSPACE-complete\n\nPSPACE-complet",
    "The complexity of reconfiguration\n\nis\n\nTs\n\n1 (degree 3) NP-complete PSPACE-complete\n\ncograph\nchordal\n\n\u201cPSPACE-complete\nP\nPSPACE-complete\nPSPACE-complete\na\n\nPSPACE-complete\n\nTd\n\nPSPACE-complet\n\nae\n\nPSPACE-complete\nP\n=\nP\na\n\nNP-complete\n\nbounded 1\n\nr\nPSPACE-complete\nPSPACE-complete\n\nie\nPSPACE-complete\n\nPSPACE-complete",
    "The complexity of reconfiguration\n\n1S T\n\u2018even-hole-free eal TP |\neT P P\n\nP e\n\nbounded 1 PSPACE-complete _ PSPA\u2018",
    "The complexity of reconfiguration\n\nTs TW\n\n\u2018even-hole-free EG eal TP |\neT P P\nP e\n\nbounded 1 PSPACE-complete _ PSPA\u2018",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuff",
    "The complexity of reconfiguration\n\nis TW\n\nperfect PSPACE-complete \u201cPSPACE-complete\ncograph P P -\nchordal PSPACE-complete | P\nPSPACE:completeP.\nB. B\nPSPACE-complete _ NP-complete\ncactus P P\nBounded z PSPACE-complete _PSPACE-complete",
    "The complexity of reconfiguration\n\ncograph\n\nis\n\nNP-complete PSPACE-complete\n\u201cPSPACE-complete\nP\nPSPACE-complete\nPSPACE-complete\na\n\nPSPACE-complete\n\nTW\nPSPACE-complet\n\nPSPACE-complete\nP\n=\nP\ne\n\nNP-complete\n\nBounded\n\nbounded\n\ne\nPSPACE-complete\nPSPACE-complete\n\nP\nPSPACE-complete\nPSPACE-complete",
    "The complexity of reconfiguration\n\nChass Td\n\nperfect zi PSPACE-complete \u201cPSPACE-complete\ncograph P P\nchordal PSPACE-complete_P.\nspl PSPACE:complete_P.\nB. B\npartite PSPACE-complete _ NP-complete\ncactus P P\nBounded z PSPACE-complete _PSPACE-complete\n\nbounded PSPACE-complete _ PSPACE-complet",
    "The complexity of reconfiguration\n\nChass\n\ncograph\n\nTs\nPSPACE-complete\n\u201cPSPACE-complete\nP\nPSPACE-complete\nPSPACE-complete\na\n\nPSPACE-complete\n\nTW\n\nPSPACE-complete\nP\n=\nP\n=\n\nNP-complete\n\ne\nPSPACE-complete\nPSPACE-complete\n\nPSPACE-complete\nPSPACE-complet",
    "The complexity of reconfiguration\n\nChass\n\ncograph\n\n1s7\nPSPACE-complete\n\u201cPSPACE-complete\nP\nPSPACE-complete\nPSPACE-complete\na\n\nPSPACE-complete\n\nTW\nPSPACE-complet\n\nPSPACE-complete\nP\n=\nP\n=\n\nNP-complete\n\ne\nPSPACE-complete\nPSPACE-complete\n\nPSPACE-complete\n\nPSPACE-complet",
    "The complexity of reconfiguration\n\nChass is Ts TW\n\nperfect P \u201cPSPACE-complete_ -PSPACE-complete\ncograph P P P\nchordal P PSPACE-complete_P.\nspl P PSPACE:complete _P.\nnterval B B B\n\nartite Pp PSPACE-complete _ NP-complete\ncactus i P a\nbounded pw P PSPACE-complete _ PSPACE-complete\n\nbounded fh P PSPACE-complete _ PSPACE-complet",
    "The complexity of reconfiguration\n\nChass is Ts Td\n\nperfect P PSPACE-complete \u201cPSPACE-complete\ncograph P P P\nchordal P PSPACE-completeP\nspl P PSPACE:complete_P.\nnterval B B B\nartite Pp PSPACE-complete _ NP-complete\ncactus i P P\nbounded pw P PSPACE-complete _ PSPACE-complete\n\nBounded fh P PSPACE-complete _ PSPACE-complet",
    "The complexity of reconfiguration\n\nChass is\nperfect\n\ncograph\n\nchordal\n\nsel\n\nTs\n\nplete _ PSPACE-complete\n\u201cPSPACE-complete\nP Z\nPSPACE-complete\nPSPACE-complete\nPE\nPSPACE-complete\n\nTd\n\nPSPACE-complete\nP\n\n=\n\nP\n\n=\n\nNP-complete\n\nF\nPSPACE-complete\n\nPSPACE-complete\n\nP\nPSPACE-complete\n\nPSPACE-complet",
    "The complexity of reconfiguration\n\nClass is Ts Td\n\nchord P PSPACE-complete\n\nspl P [PSPACE-complete\nPE \u2014\nBipartite PSPACE-complete\n\ncactus P\nbounded pw PSPACE-complete _ PSPACE-complete\nbounded tw PSPACE-complete _ PSPACE-complete",
    "The complexity of reconfiguration\n\nClass\n\nis\nNP-complete\noa\nP\n=\nP\n\nTs\nPSPACE-complete\n\n\u201cPSPACE-complete\n=\n[PSPACE-complete\nPE =\nPSPACE-complete\n\n7\nPSPACE-complete\nPSPACE-complete\n\nPSPACE-complete\n\nTW\nPSPACE-complet\nPSPACE-complete\nP\n\noe\n\nPSPACE-complete\nPSPACE-complete",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuff",
    "The complexity of reconfiguration\n\nClass is 1S Ti\n-n-hole-free am FT TP |\n\nspl P [PSPACE-complete || P |\nnterval B P a\n\nbipartite P PSPACE. te\n\ncactus - ia\n\nBounded pw Ga PSPACE-complete _PSPACE-complete_\n\nBounded tw P PSPACE-complete  PSPACE-complet",
    "The complexity of reconfiguration\n\nClass is Ts\n\nfect =e \u201cPSPACE-complete \u201cPSPACE-complete\nogra P P P\nchor P \"TPSPACE-complete || P\n\nspl P [PSPACE-complete || P |\nnterval B B. B\n\nbipartite P PSPACE. NP-com\n\ncactus P P\n\nBounded pw ee PSPACE-complete _PSPACE-complete_\n\nbounded tw P PSPACE-complete  PSPACE-complet",
    "The complexity of reconfiguration\n\nClass is Ts\n\nfect =e \u201cPSPACE-complete \u201cPSPACE-complete\nogra P P P\nchor P \"TPSPACE-complete || P\n\nspl P [PSPACE-complete || P\nnterval B B. BE\n\nbipartite P PSPACE. NP-com\n\ncactus P P\n\nBounded pw ee PSPACE-complete _PSPACE-complete_\n\nBounded tw P PSPACE-complete  PSPACE-complet",
    "The complexity of reconfiguration\n\nClass is Ts TW\nplanar (degree 3) NP-complete PSPACE-complete _ PSPACE-complet\n\nperfect =e \u201cPSPACE-complete \u201cPSPACE-complete\ncograph P P P\nchordal P \"[PSPACE-complete || P\n\nspl P [PSPACE-complete || P\n\nval B P\nP PSPACE-complete\ncactus P P\n\nBounded pw P PSPACE-complete _ PSPACE-complete\n\nbounded tw P PSPACE:complete  PSPACE-complete",
    "The complexity of reconfiguration\n\nClass is Ts TW\nplanar (degree 3) NP-complete PSPACE-complete _ PSPACE-complet\n\nperfect =e \u201cPSPACE-complete \u201cPSPACE-complete\ncograph P P P\nchordal P \"[PSPACE-complete || P\n\nspl P [PSPACE-complete || P\n\nval B P\nP PSPACE-complete\ncactus P P\n\nBounded pw P PSPACE-complete _ PSPACE-complete\n\nbounded tw P PSPACE:complete  PSPACE-complete",
    "The complexity of reconfiguration\n\nClass\nplanar (deer\n\n5\n-\n\nF\n\n:\n\n.\n\n\u2018\n-\n\nP\n\n,\n\nTs\nPSPACE-complete\n\n\u201cPSPACE-complete\n=\n\nPE\nPSPACE-complete\n\u2014\n\nPSPACE-complete\nPSPACE-complete\n\n\"SPACE-complete ||\n\n[PSPACE-complete |\n\nTd\nPSPACE-complet\nPSPACE-complete\nP\n\nPSPACE-complete\n\nPSPACE-complete",
    "The complexity of reconfiguration\n\nClass is 7S Ti\n7 > et\n\nchordal P TPSPACE-complete || P\n\nspl P [PSPACE-complete || P\n\nnterval B. B\n\nPSPACE-complete _NP-com\n\ncactus P ia ~\n\nBounded pw Z ___PSPACE-complete _ PSPACE-complete\n\nbounded tw PSPACE-complete  PSPACE-complete",
    "The complexity of reconfiguration\n\nClass is 7S Ti\n7 > =\n\nchordal P TPSPACE-complete || P\n\nspl P [PSPACE-complete || P\n\nnterval B B. B\n\nP PSPACE-complete _NP-com\n\ncactus a P ia ~\n\nBounded pw e ___PSPACE-complete _ PSPACE-complete\n\nbounded tw P PSPACE-complete  PSPACE-complete",
    "Parameterized complexity of TJ,and\nTS (where we are today)",
    "Parameterized complexity of TJ and\nTS (where we are today)",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuff",
    "Parameterized complexity of TJ and\nTS (where we are today)",
    "\u00ab\n\nParameterized complexity of TJ and\nTS (where we are today)",
    "Parameterized complexity\n\nThe most natural parameterizations for TOKEN JUMPING and\nTOKEN SLIDING\n\n\u00a2 We can parameterize by the number of tokens:\n\n\u00a9 the length of the reconfiguration sequence;\n\n\u00a9 any structural graph parameter (e.g. tw or pw)\n\n# any combination of the above.\n\nhen we started our project we set out to resolve the\nparameterized complexity of TS and TJ on bipartite graphs\n\n(parameter k the number of tokens).",
    "Parameterized complexity\n\nThe most natural param for TOKEN JUMPING and\n\nTOKEN SLIDING\na\n\u00a2 We can parameterize by the number of\n\n@ the length of the reconfiguration sequence;\n\u00a9 any structural graph parameter (e.g. tw or pw):\n\n\u00a9 any combination of the above.\n\nWhen we started our project we set out to resolve the\nrameterized complexity of TS and TJ on bipartite graphs\n\n(parameter k the number of tokens).",
    "Parameterized complexity\n\nThe most natural param for TOKEN JUMPING and\nTOKEN SLIDING\n\n\u00a2 We can parameterize by the number of tokens:\n\nthe length of the reconfiguration sequence;\n\n\u00a9 any structural graph parameter (e.g. tw or pw)\n\n@ any combination of the above.\n\nWhen we started our project we set out to resolve the\nparameterized complexity of TS and TJ on bipartite graphs\n\n(parameter k the number of tokens).",
    "Parameterized complexity\n\nThe most natural parameterizations for TOKEN JUMPING and\nTOKEN SLIDING\n\n\u00a9 We can parameterize by the number of\n\n\u00ab the length of the reconfiguration sequence;\n\n\u00a9 any structural graph parameter (e.g. tw or pw)\n\n@ any combination of the above.\n\nNhen we started our project we set out to resolve the\nrameterized complexity of TS and TJ on bipartite graphs\n\n(parameter k the number of tokens).",
    "Parameterized complexity\n\nThe most natural parameterizations for TOKEN JUMPING and\nTOKEN SLIDINC\n\u00a9 We can parameterize by the number of tokens;\nthe length of the reconfiguration sequence;\nany structural graph parameter (e.g. tw or pw)\n\nany combination of the above.\n\nhen we started our project we set out to resolve the\nparameterized complexity of TS and TJ on bipartite graphs\n\n(parameter k the number of tokens).",
    "Parameterized complexity\n\nThe most natural parameterizations for TOKEN JUMPING and\nTOKEN SLIDING\n\nWe can parameterize by the number of tokens;\n\nthe length of the reconfiguration sequence;\n\nany structural graph parameter (e.g. tw or pw)\n\nany combination of the above.\n\nWhen we started our project we set out to resolve the\nparameterized complexity of TS and TJ on bipartite graphs\n\nfer k the number of tokens).",
    "Parameterized complexity\n\nThe most natural parameterizations for TOKEN JUMPING and\n\nTOKEN SLIDING\n\u00a9 We can parameterize by the number of tokens;\n\u00ab\u00a9 the length of the reconfiguration sequence;\n\u00a9 any structural graph parameter (e.g. tw or pw)\n\u00a9 any combination of the above\n\nWhen we started our project we set out to resolve the\n\nrameterized complexity of TS and TJ on bipartite graphs\n\n(parameter k the number of tokens)",
    "Parameterized complexity\n\nThe most natural parameterizations for TOKEN JUMPING and\n\nTOKEN SLIDING\n+ We can parameterize by the number of tokens;\n\u00a9 the length of the reconfiguration sequence;\n\u00a9 any structural graph parameter (e.g. tw or pw)\n\n# any combination of the above.\n\nWhen we started our project we set out to resolve the\n\nparameterized complexity of TS and TJ on bipartite graphs\n\n(parameter k the number of tokens)",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuff",
    "Parameterized complexity\n\nThe most natural parameterizations for \u2018TOKEN JUMPING and\n\nTOKEN SLIDING\n# We can parameterize by the number of tokens;\n\u00a9 the length of the reconfiguration sequence;\n# any structural graph parameter (e.g. tw or pw)\n\n\u00a9 any combination of the above.\n\nWhen we started our project we set out to resolve the\nparameterized complexity of TS and TJ on bipartite graphs\n\n(parameter k the number of tokens)",
    "Parameterized complexity\n\nThe most natural parameterizations for TOKEN JUMPING and\n\nTOKEN SLIDING\n+ We can parameterize by the number of tokens;\n\u00a9 the length of the reconfiguration sequence;\n\u00a9 any structural graph parameter (e.g. tw or pw)\n\n# any combination of the above.\n\nWhen we started our project we set out to resolve the\nparameterized complexity of TS and TJ on bipartite graphs\n\n(parameter k the number of tokens)",
    "Parameterized complexity\n\nThe most natural parameterizations for \u2018TOKEN JUMPING and\n\nTOKEN SLIDING\n+ We can parameterize by the number of tokens;\n\u00a9 the length of the reconfiguration sequence;\n\u00a9 any structural graph parameter (e.g. tw or pw)\n\n# any combination of the above.\n\nWhen we started our project we set out to resolve the\nparameterized complexity of TS and TJ on bipartite graphs\n\n(parameter k the number of tokens)",
    "Parameterized complexity\n\nThe most natural parameterizations for TOKEN JUMPING and\n\nTOKEN SLIDING\n\u00a9 We can parameterize by the number of tokens;\n\u00ab\u00a9 the length of the reconfiguration sequence;\n\u00a9 any structural graph parameter (e.g. tw or pw)\n\u00a9 any combination of the above\n\nWhen we started our project we set out to resolve the\n\nrameterized complexity of TS and TJ on bipartite graphs\n\n(parameter k the number of tokens)",
    "Parameterized complexity\n\nThe most natural parameterizations for TOKEN JUMPING and\n\nTOKEN SLIDING\n+ We can parameterize by the number of tokens;\n\u00a9 the length of the reconfiguration sequence;\n\u00a9 any structural graph parameter (e.g. tw or pw)\n\n# any combination of the above.\n\nWhen we started our project we set out to resolve the\n\nparameterized complexity of TS and TJ on bipartite graphs\n\n(parameter k the number of tokens)",
    "Parameterized complexity\n\nThe most natural parameterizations for \u2018TOKEN JUMPING and\n\nTOKEN SLIDING\n# We can parameterize by the number of tokens;\n\u00a9 the length of the reconfiguration sequence;\n# any structural graph parameter (e.g. tw or pw)\n\n\u00a9 any combination of the above.\n\nWhen we started our project we set out to resolve the\nparameterized complexity of TS and TJ on bipartite graphs\n\n(parameter k the number of tokens)",
    "Parameterized complexity\n\nThe most natural parameterizations for TOKEN JUMPING and\n\nTOKEN SLIDING\n+ We can parameterize by the number of tokens;\n\u00a9 the length of the reconfiguration sequence;\n\u00a9 any structural graph parameter (e.g. tw or pw)\n\n# any combination of the above.\n\nWhen we started our project we set out to resolve the\nparameterized complexity of TS and TJ on bipartite graphs\n\n(parameter k the number of tokens)",
    "Parameterized complexity\n\nThe most natural parameterizations for TOKEN JUMPING and\n\nTOKEN SLIDING\n# We can parameterize by the number of tokens;\n\u00a9 the length of the reconfiguration sequence;\n# any structural graph parameter (e.g. tw or pw)\n\n\u00a9 any combination of the above.\n\nWhen we started our project we set out to resolve the\n\nparameterized complexity of TS and TJ on bipartite graphs\n\n(parameter k the number of tokens)",
    "Parameterized complexity\n\nThe most natural parameterizations for TOKEN JUMPING and\n\nTOKEN SLIDING\n\u00a9 We can parameterize by the number of tokens;\n\u00ab\u00a9 the length of the reconfiguration sequence;\n\u00a9 any structural graph parameter (e.g. tw or pw)\n\u00a9 any combination of the above\n\nWhen we started our project we set out to resolve the\n\nrameterized complexity of TS and TJ on bipartite graphs\n\n(parameter k the number of tokens)",
    "Parameterized complexity\n\nThe most natural parameterizations for TOKEN JUMPING and\n\nTOKEN SLIDING\n+ We can parameterize by the number of tokens;\n\u00a9 the length of the reconfiguration sequence;\n\u00a9 any structural graph parameter (e.g. tw or pw)\n\n\u00a9 any combination of the above.\n\nWhen we started our project we set out to resolve the\n\nparameterized complexity of TS and TJ on bipartite graphs\n\n(parameter k the number of tokens)",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuff",
    "Parameterized complexity\n\nThe most natural parameterizations for TOKEN JUMPING and\n\nTOKEN SLIDING\n# We can parameterize by the number of tokens;\n\u00a9 the length of the reconfiguration sequence;\nany structural graph parameter (e.g. tw or pw)\n\n# any combination of the above.\n\nWhen we started our project we set out to resolve the\n\nrameterized complexity of TS and TJ on bipartite graphs\n\n(parameter k the number of tokens).",
    "Parameterized complexity\n\nmost natural parameterizations for TOKEN JUMPING and\nOKEN SLIDING\n\n# We can parameterize by the number of tokens;\n\n\u00ab# the length of the reconfiguration sequence:\n\n\u00abany structural graph parameter (e.g. tw or pw):\n\n@ any combination of the above.\n\nWhen we started our project we set out to resolve the\n\nparameterized complexity of TS and TJ on bipartite graphs\n\n(parameter k the number of tokens).",
    "Parameterized complexity\n\nmost natural parameterizations for TOKEN JUMPING and\nOKEN SLIDING\n\n# We can parameterize by the number of tokens;\n\n\u00ab# the length of the reconfiguration sequence:\n\n\u00abany structural graph parameter (e.g. tw or pw):\n\n@ any combination of the above.\n\nWhen we started our project we set out to resolve the\n\nparameterized complexity of TS and TJ on bipartite graphs\n\n(parameter k the number of tokens).",
    "Parameterized complexity\n\nmost natural parameterizations for TOKEN JUMPING and\nOKEN SLIDING\n\n# We can parameterize by the number of tokens;\n\n\u00abthe length of the reconfiguration sequence:\n\n# any structural graph parameter (e.g. tw or pw)\n\n@ any combination of the above,\n\nWhen we started our project we set out to resolve the\n\nparameterized complexity of TS and TJ on bipartite graphs\n\n(parameter k the number of tokens).",
    "Parameterized complexity\n\nThe most natural parameterizations for TOKEN JUMPING and\nTOKEN SLIDING\n\n# We can parameterize by the number of tokens;\n\n\u00ab the length of the reconfiguration sequence:\n\n# any structural graph parameter (e.g. tw or pw):\n\n@ any combination of the above.\n\nWhen we started our project we set out to resolve the\nparameterized complexity of TS and TJ on bipartite graphs\n\nfer k the number of tokens).",
    "Parameterized complexity\n\nThe most natural parameterizations for TOKEN JUMPING and\nTOKEN SLIDING\n\n# We can parameterize by the number of tokens;\n\n\u00ab the length of the reconfiguration sequence:\n\n# any structural graph parameter (e.g. tw or pw):\n\n@ any combination of the above.\n\nWhen we started our project we set out to resolve the\nrameterized complexity of TS and TJ on bipartite graphs\n\nfer k the number of tokens).",
    "Parameterized complexity\n\nThe most natural parameterizations for TOKEN JUMPING and\nTOKEN SLIDING\n\n\u00a9 We can parameterize by the number of tokens;\n\n\u00abthe length of the reconfiguration sequence:\n\n# any structural graph parameter (e.g. tw or pw)\n\n@ any combination of the above\n\nhen we started our project we set out to resolve the\n\nrameterized complexity of TS and TJ on bipartite graphs\n\nfer k the number of tokens).",
    "Parameterized complexity\n\nThe most natural parameterizations for TOKEN JUMPING and\nTOKEN SLIDING\n\n# We can parameterize by the number of tokens;\n\n\u00ab the length of the reconfiguration sequence:\n\n# any structural graph parameter (e.g. tw or pw):\n\n@ any combination of the above.\n\nWhen we started our project we set out to resolve the\nrameterized complexity of TS and TJ on bipartite graphs\n\nfer k the number of tokens).",
    "Parameterized complexity\n\nThe most natural parameterizations for TOKEN JUMPING and\nTOKEN SLIDING\n\n# We can parameterize by the number of tokens;\n\n\u00ab the length of the reconfiguration sequence:\n\n# any structural graph parameter (e.g. tw or pw):\n\n# any combination of the above.\n\nWhen we started our project we set out to resolve the\nrameterized complexity of TS and TJ on bipartite graphs\n\nfer k the number of tokens).",
    "Parameterized complexity\n\nThe most natural parameterizations for TOKEN JUMPING and\nTOKEN SLIDING\n\n# We can parameterize by the number of tokens;\n\n\u00ab the length of the reconfiguration sequence:\n\n# any structural graph parameter (e.g. tw or pw):\n\n@ any combination of the above.\n\nWhen we started our project we set out to resolve the\nrameterized complexity of TS and TJ on bipartite graphs\n\nfer k the number of tokens).",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuff",
    "Parameterized complexity\n\nThe most natural parameterizations for TOKEN JUMPING and\nTOKEN SLIDING\n\n# We can parameterize by the number of tokens;\n\n\u00ab the length of the reconfiguration sequence:\n\n# any structural graph parameter (e.g. tw or pw):\n\n@ any combination of the above.\n\nWhen we started our project we set out to resolve the\nrameterized complexity of TS and TJ on bipartite graphs\n\nfer k the number of tokens).",
    "Parameterized complexity\n\nThe most natural parameterizations for TOKEN JUMPING and\nTOKEN SLIDING\n\n\u00a9 We can parameterize by the number of tokens;\n\n\u00abthe length of the reconfiguration sequence:\n\n# any structural graph parameter (e.g. tw or pw)\n\n@ any combination of the above\n\nhen we started our project we set out to resolve the\n\nrameterized complexity of TS and TJ on bipartite graphs\n\nfer k the number of tokens).",
    "Parameterized complexity\n\nThe most natural parameterizations for TOKEN JUMPING and\nTOKEN SLIDING\n\n# We can parameterize by the number of tokens;\n\n\u00ab the length of the reconfiguration sequence:\n\n# any structural graph parameter (e.g. tw or pw):\n\n@ any combination of the above.\n\nWhen we started our project we set out to resolve the\nrameterized complexity of TS and TJ on bipartite graphs\n\nfer k the number of tokens).",
    "Parameterized complexity\n\nThe most natural parameterizations for TOKEN JUMPING and\nTOKEN SLIDING\n\n# We can parameterize by the number of tokens;\n\n\u00ab the length of the reconfiguration sequence:\n\n# any structural graph parameter (e.g. tw or pw):\n\n# any combination of the above.\n\nWhen we started our project we set out to resolve the\nrameterized complexity of TS and TJ on bipartite graphs\n\nfer k the number of tokens).",
    "Parameterized complexity\n\nThe most natural parameterizations for TOKEN JUMPING and\nTOKEN SLIDING\n\n# We can parameterize by the number of tokens;\n\n\u00ab the length of the reconfiguration sequence:\n\n# any structural graph parameter (e.g. tw or pw):\n\n@ any combination of the above.\n\nWhen we started our project we set out to resolve the\nrameterized complexity of TS and TJ on bipartite graphs\n\nfer k the number of tokens).",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mou:\nAmerican Univ\n\nid (2a368@aub.edu.lb)\n\nf Beirut",
    "Parameterized complexity\n\nThe most natural parameterizations for TOKEN JUMPING and\nTOKEN SLIDING\n\n# We can parameterize by the number of tokens;\n\n\u00abthe length of the reconfiguration sequence:\n\n\u00a9 any structural graph parameter (e.g. tw or pw)\n\n# any combination of the above.\n\nWhen we started our project we set out to resolve the\nrameterized complexity of TS and TJ on bipartite graphs\n\nfer k the number of tokens).",
    "Parameterized complexity\n\nThe most natural parameterizations for TOKEN JUMPING and\nTOKEN SLIDING\n\n# We can parameterize by the number of tokens;\n\n\u00ab@ the length of the reconfiguration sequence;\n\nany structural graph parameter (e.g. tw or pw)\n\n# any combination of the above.\n\nWhen we started our projet et out to resolve the\nparameterized complexity of TS and TJ on bipartite graphs\n\n(parameter k the number of tokens).",
    "Parameterized complexity\n\nThe most natural parameterizations for TOKEN JUMPING and\nTOKEN SLIDING\n\n# We can parameterize by the number of tokens;\n\n\u00ab the length of the reconfiguration sequence:\n\n\u00a9 any structural graph parameter (e.g. tw or pw)\n\n# any combination of the above.\n\nWhen we started our project we set out to resolve the\nparameterized complexity of TS and TJ on bipartite graphs\n\n(parameter k the number of tokens).",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph. *\n\nGlass Ts TW\n\nGifs wanhs wilh vfitherd\n\nG., G}-free graphs Open FPT (K kernel)\nBipartite graphs Wh\nBipartite A-degree graphs _FPT (K\u00b0A\" kernel\n\nBipartite {Ci)-free graphs\n\nTable 1: Blue result is not ours",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph. *\n\nGlass Ts\n(Gi)-free graphs Whil-hard\n\nG., G}-free graphs Open 1 kernel)\nBipartite graphs Whi-hard\n\nBipartite A-degree graphs FPT (K7A\u00b0 keel) FPT (KA\n\nBipartite (C,}-free graphs FPT (k\u2122 kernel)\n\nTable 1: Blue result is not ours",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuff",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nGlass 7s TW\n(Gi}-free graphs Whil-hard vin\nG., Gree graphs Open FPT (i kernel)\nBipartite graphs Whihard Open\nBipartite A-degree graphs _FPT (K\u00b0A\u00b0 kernel) _ FPT (KA kernel)\nBipartite {Ca}-free graphs FPT (k\u2122 kernel) FPT (* kernel)\n\nTable 1: Blue result is not ours",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\nof the problems and the girth of the input graph.\n\nGlass 7s TW\n(Gi}-free graphs Whil-hard vin\n\nG., Gree graphs Open FPT (i kernel)\nBipartite graphs Whihard Open\n\nBipartite A-degree graphs FPT (kA kernel)\n\nBipartite {(C,}-free graphs FPT (k\u2122 kernel)\n\nTable 1: Blue result is not ours",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts TH\n\n(Gal-fee graphs Whihard vfiphord\n\nG., Gree graphs Pen FPT (i kernel)\nBipartite graphs Wilh Open\n\nBipartite A-degree graphs FPT (K7A\u00ae keel) FPT (KA kernel)\nBipartite (Ci)-free graphs PT (K\u2122 kernel) PPT (k* kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the\n\nwo questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts a\n(Gal -fee graphs Whihard vfiphord\n\nkernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nTS ==\nfree graphs Wibod vfiphord\nBiparite Ode emel) PPT (KB\n\nBipartite (Ci]-free graphs T kernel) FPT (K kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nTS J\n\nfree graphs Whihard vfiphord\n\nGree graphs FPT ( kernel)\nBipartite graphs Open\n\nBipartite Ade\n\nBipartite (Ci]-free graphs FPT (k kernel)\n\nTable 1 nel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\n1S ==\nfree graphs Whihard vfiphord\n\nBipartite (Ci]-free graphs\n\nTable 1",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\n1S ==\nfree graphs Whifhard vfiphord\nGiffree graphe FPT (0 kernel)\n\nBipatte Ade TET kernel) FPT (Kd kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nTs \u2014_\n\nfree graphs Whikhard vfibhord\n\nBipatte Ade FET (CL kemel) PT (Kd kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nTS a\n\nGy-iree graphs FPT (i kernel)\nBipartite graphs 7_Open\n\nee graphs FPT (RD kernel) FPT (KA\nBipartite (CiJ-free graphs FPT (K\u2122 kernel) FPT (k* kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuff",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nof the problems and the girth of the input graph.\n\n73 a\n\nWhil-hard iifkard\n\nFkernel) PT (kA\n\nBipartite {Ci]-free graphs \u201ckernel) FT (k\u00ae kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\nof the problems and the girth of the input graph\n\nTs a\n\nWiil-hard Mihara\n\nBipartite graphs [war Open\nkernel) FPT (kA.\n\nBipartite {(Ci]-free graphs kernel) FT (K kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts mz\n\n\u201cBipartite A-degree graphs FPT (RA kernel) PT (KA kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts mz\n\u201cBipartte A-depree graphs FFT (C2\" kernel) PPT (KA\n\nTable 1; Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\n\u201cTs a\naphs Whij-hard N[ij-hard\nG., Gi}-free graphs Open FPT ( kernel)\n\nBipartite graphs [ware\n\nBipartite A-degree graphs Br kernel),\n\nBipartite {Ci]-free graphs FPT (K\u2122 kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nof the problems and the girth of the input graph.\n15 TH\n\nphe [wir\nBipartite A-degree graphs BY kernel)\n\nBipartite (Cy}-free graphs FPT (k\u2122 kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nof the problems and the girth of the input graph.\na 7\n\nphe [war\nBipartite A-degree graphs FPT (KA kernel)\n\nBipartite {Ga}-free graphs FPT (k\u2122 kernel) FP T (K* kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nCass \u201cTs \"]\n(Gi)-free graphs Whil-hard V[il-hard\nG, Gi}-free graphs Open. FPT ( kernel)\n\nBharite A-degres aphs feel) FT\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nCass \u201cTs =\n(Gi)-free graphs Whil-hard V[il-hard\n\nG, Gi}-free graphs FPT ( kernel)\n\nBipartite graphs [Wil-hara [Oren\n\nBipart fe phs: kernel) FPT (kd k\ntite {Ca}-free graphs Kernel) FPT (K kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\n\u201cTs =\nWhij-hard V[ij-hard\nfree graphs Open. FPT ( kernel)\n\nBipart fe phs: kernel)\ntite {Ca}-free graphs Kernel) FPT (kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuff",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts iz)\n{Gi)-free graphs Wiij-hard N{ij-hard\n\nG, Gree graphs Open FPT (i kernel)\nBipartite graphs [war\n\nBipartite A-degree graphs\n\nBipartite (Gy)-free graphs FPT (K kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts Td\n(Gal-fee graphs Wiibhord Whikhord\nBiparti hs [wa\n\n\u2018Bipartite {Ca}-free graphs\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the\n\nwo questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass 7s i\n(Gi)-fee graphs Whi-hard Whither\nahs Whilhar\n\n\u00a9 kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nCass 7S i\n(Gal-fee eranhs Wiibford Whikhord\nBiparite Dd ohs FT (CE keel) FP\n\n\u201cBipartite (G\n\nfree graphs FPT (k\u2122 kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nCass 7S WT\n(Gal-fee eranhs Wiibford Whikhord\nBiparite Dd ghsFPT (CE keel) FP\n\n\u201cBipartite (G\n\nfree graphs _ FPT (k\u2122 kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts iz)\n(Gi)-free graphs Wij-hard N{il-hard\nG, G}-free graphs Open FPT ( kernel)\n\nBipartite graphs [war Open\nBipartite A-degree graphs FPT (A kernel) FPT (kA\n\nBipartite {Ga}-free graphs FPT (k\u2122 kernel) PT ( kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts TH\n(Gi)-free graphs Whil-hard N{ij-hard\nG,, Gree graphs Open FPT (i kernel)\n\nBipartite graphs 7 (| WIil-h Open\nBipartite A-degree graphs FPT (A kemel) PPT (kA\n\n\u201cBipartite (Ca}-free graphs FPT (k\u2122 kernel) PPT (&* kernel),\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts TH\n(Gi)-free graphs Whil-hard N{ij-hard\n\nBipartite A-de graphs FPT (Av kemel) FPT (kA el)\n\nBipartite {Ca}-free graphs FPT (k\u2122 kernel) FPT (K* kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts iz)\n(Gi)-free graphs Wiij-hard N{ij-hard\nG.. G}-free graphs Open FPT ( kernel)\n\nBipartite graphs IK\nBipartite A-degree graphs FPT (RA kernel)\n\nBipartite {Ca}-free graphs FPT (k\u2122 kernel) FPT (K* kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts TH\n(Gi)-free graphs Wiij-hard N{ij-hard\n\nG.. G}-free graphs Open FPT (i kernel)\n\ngraphs FPT (7A kemel)\nBipartite {Ci)-free graphs PT (K\u2122 kernel) PPT (k* kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuf",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\n\u201cClass Ts TH\n\nGi)-fee graphs Whi-hard vila\n\nG., G}-free graphs Open FPT (K kernel)\nBipartite graphs\n\nraphe\n\n\u201cBipartite (Ca}-free graphs FPT (k\u2122 kernel) FPT (& kernel),\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\nof the problems and the girth of the input graph\n\nClass Ts TH\n\n(Cal -fee graphs Wii-hard TE\n\nBipartite graphs\n\nraphe\n\n\u2018Bipartite {Ca}-free graphs\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\nof the problems and the girth of the input graph\n\nGass 7s i\n\n\u201c(Gs Gare graphs e FPT ( kernel)\n\nBipartite graphs\nBipartite A-degree graphs FPT (KA kernel)\nBipartite (Ci)-free graphs FPT (K\u2122 kernel) kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\nof the problems and the girth of the input graph\n\n\u2018Class TS Tw\n\n(Ci}-free graphs | Ww V[ij-hard\n\n\u201c(Gs Gatree graphs e FPT ( kernel)\nBipartite graphs ic\n\nBipartite A-degree graphs FPT (KA kernel),\n\nBipartite {Ca}-free graphs FPT (k\u2122 kernel) FPT (* kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass TS i\n\u201c{G.. G}-tree graphs er FPT (k\u00b0 kernel)\nBiparti aphs ik\n\nBipartite {Ca}-free graphs FPT (k\u2122 kernel) FPT (K* kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nquestions but ended up noticing\n\nWe answered only one of the tw\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass 7s TW\nWij-hard N[il-hard\n\n(Gi)-free graph\nFPT ( kernel)\n\nGs. Ga}-tree graphs Open\nBipartive graphs\nBipartite A-degree graphs\n\nBipartite {Gi}-free graphs\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nChass 7s TW\n\n{Gi)-free graphs | Wij-hard \u201cWhif-hard\n\nGs. Ga}-tree graphs Open FPT ( kernel)\nBipartive graphs\n\nBipartite A-dei\n\n\u201cBipartite (Ci}-free graphs\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass TS\n\nBipartite {Gi}-free graphs cl)___FPT (K* kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\nClass TS a\n\n{Ci}-free graphs Wij-hard V{il-har\n\n\u201c(Gs Gree graphs Open FPT (i kernel)\nBipartive grap Wilh T\nBipartite sph FPT (CD kernel) FPT (kA\n\nBipartite {Ca}-free graphs FPT (k\u2122 kernel) FPT (K kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\nof the problems and the girth of the input graph\n\nClass 1S a\n\n{Ci}-free graphs Wij-hard V{il-har\n\n\u201c(GG j-re graphs Open FPT ( kernel)\nBipartive grap Wilh T\nBipartite sph FPT (CI kemel) PPT (kA\n\n\u201cBipartite (Ca)-free graphs FPT (k\u2122 kernel) FPT (&* kernel),\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuff",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nTs 3\n\u201cIG. G}-tree graphs Open. FPT (k\u00b0 kernel)\nBipartite A-degree graphs FPT (RD kernel) FPT (KA\nc \u201cFPT (kK kernel)\n\nBipartite (C,}-free graphs FPT (k\u2122 kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass TS a\n(Gi)-free graph Whil-hard Nil-har\n\n\u201c(Gs Gi-tree graphs Open FPT (i kernel)\nBipartite graphs [war\n\n\u201cBipartite A-degree graphs FPT (RD kernel) FPT (KA.\nBipartite {Ca}-free graphs FPT (k\u2122 kernel) FPT (* kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass TS a\n(Gi)-free graph Whil-hard V{il-har\n\n\u201c(Gs Ga-tree graphs Open FPT (i kernel)\nBipartite graphs [war\n\n\u201cBipartite A-degree graphs FPT (kD kernel) FPT (KA.\nBipartite {Ca}-free graphs FPT (k\u2122 kernel) FPT (* kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\nClass TS a\n\u201cTG. G-tree graphs er FPT (k\u00b0 kernel)\n\nBipartite (Ga}-free graphs kernel) __FPT (kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass TS zl\n\u201cTG. G-tree graphs er FPT (k\u00b0 kernel)\n\n\u201cBipartite A-degree graphs )_ PPT (KA\n\nBipartite (Ga}-free graphs kernel) __FPT (kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts z\n\n{Gite graphs Whilhard if-hor\n\n(Gs. GiJ-tree graphs FPT (i kernel)\n\nBipart hs\nBipartite A-degree graphs\nkernel)\n\n\u2018Bipartite (Ca}-free graphs\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\nClass TS a\n\u201cTG. G-tree graphs er FPT (k\u00b0 kernel)\n\nBipartite (Ga}-free graphs kernel) __FPT (kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nof the problems and the girth of the input graph.\nClass TS zl\n\n\u201cBipartite A-degree graphs )_FPT (kA k\n\nBipartite {Ga}-free graphs kernel) __FPT (kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\nClass TS a\n\u201cTG. G-tree graphs er FPT (k\u00b0 kernel)\n\nBipartite (Ga}-free graphs kernel) __FPT (kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nof the problems and the girth of the input graph.\nClass TS zl\n\n\u201cBipartite A-degree graphs )_ PPT (KA\n\nBipartite (Ga}-free graphs kernel) __FPT (kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuf",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts z\n\n{Gite graphs Whilhard if-hor\n\n(Gs. GiJ-tree graphs FPT (i kernel)\n\nBipart hs\nBipartite A-degree graphs\nkernel)\n\n\u2018Bipartite (Ca}-free graphs\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass TS a\n\u201cTG. G-tree graphs er FPT (k\u00b0 kernel)\n\nBipartite (Ca}-free graphs kernel) __FPT (kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nof the problems and the girth of the input graph.\nClass TS zl\n\n\u201cBipartite A-degree graphs )_FPT (kA k\n\nBipartite {Ga}-free graphs kernel) __FPT (kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts TW\n\ntree graphs Open FPT (i kernel)\nWhil-ha (Open\ngraphs FPT (KA kernel\nBipartite {Ga}-free graphs FPT (k\u2122 kernel) FPT (* kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts TW\n(Gi)-free graphs Wij-hard N{lf-hard\n\ntree graphs Open FPT (i kernel)\nWhif-ha Open\ngraphs FPT (KA kernel\nBipartite (C,}-free graphs FPT (k\u2122 kernel) FPT (K* kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts TW\n(Gi)-free graphs Wij-hard N{lf-hard\n\n7G. Gif-tree graphs Open FPT (i kernel)\nBipartite graphs Wiif-ha Open\n\u201cBipa Braphs_ FPT (RA k\n\u201cBipartite {Ga}-free graphs PPT (k\u2122 kernel) __FPT (K* kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\nof the problems and the girth of the input graph.\n\nClass 7s\n\nTical-ree graphs wil\n\nBipartite A-degree graphs FPT (RD kernel) FPT (KA\n\nBipartite {Ca}-free graphs FPT (k\u2122 kernel) FPT ( kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts\n\n7G. GF tree graphs Open\n[walk\npartite A-degree graphs FPT (Kk A\u2019 keel) FPT (KA\nBipartite {Ga}-free graphs FPT (k\u2122 kernel) FPT (* kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\nof the problems and the girth of the input graph\n\nClass _ Ts a\n\n\u201c[G.Gajtres graphs Oper FPT ( kernel)\n\nBipart he\n\nFPT (CQ kernel) FPT (kA kernel)\nBipartite {Ci]-free graphs FPT (K\u2122 kernel) PPT (kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.),,",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\n\nan int\n\nesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nTH\nN{i]-hard\n\nFPT ( kernel)\n\nTs\nWhij-hard\n\nOpen\n\nClass _\n\n(tert\n(Gs, GiJ-tree graphs\n\nBipart\nBipartite Ade\n\nTable 1\n\nWill\nFPT (A kemel) PPT (KA\nFPT (7 kernel) FPT ( kernel)\n\nBlue result is not ours, Kernel sizes are O(.)",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuf",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\nof the problems and the girth of the input graph\n\na WT\n\n\"Gs, Gal-tree graphs FPT (K kernel)\nWied | Ti\n\n\u201cBiportte A-degree graphs FFT (@O\" kemel) PPT (KA Kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nof the problems and the girth of the input graph.\nCass SSS i\nFPT (& kernel)\n\n1G, Gf Wree graphs\n\u2018Bipartite graphs\nBipartite A-degree graphs\n\n\u201cBipartite (Ci)-free graphs Kernel) FPT (& kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts TH\n\nG, G}-free graphs Open FPT (i kernel)\nBipartite graphs WhEh:\n\n\u201cBipartite A-degree graphs FPT\n\n\u201cBipartite (Gi}-free graphs FPT (k  keretl)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts J\nGiles graphs Open FPT (& kerma)\nBipartite A-degree graphs 7 FPT (K\u00b0D\u00b0 kernel) FPT (KA.\n\n\u201cBipartite (Ca)-free graphs FPT (k\u2122 kernel) FPT (&* kernel),\n\nTable 1: Blue result is not ours. Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts TH\nGiles graphs Open FPT (& kee)\n7Bipartite A-degree graphs _FPT (K\u00b0A\u00b0 kernel) FPT (KA kernel)\n\nBipartite {Ca}-free graphs PT (k\u2122 kernel) PT (K* kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts TH\n\nGiles graphs Open FPT (& kere)\nBipartite A-degree graphs FPT (K\u00b0A\u00b0 kernel) FPT (KA kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass TH\n=p PT FPT (K* kernel)\n\nBipartite (Ci)-free graphs\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\nof the problems and the girth of the input graph\n\nClass Ts Bi\n\n7 Bipari KO kernel) _FPT (KA ker\n\nBipartite {Ga}-free graphs FPT (k\u2122 kernel) FPT ( kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\nClass 1 I\nWilh Open\n\u201cFernal) FPT (Kd ened)\n\nBipartite (Cy)-free graphs kernel) FPT (& kernel)\n\nTable 1: Blue result is not ours",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass TS x\n\nfree graphs Open FPT (i kernel)\nWOE Open\nFPT (7\u00b0 kernel)\n\nBipartite {Ca}-free graphs FPT (k\u2122 kernel) PT (* kernel)\n\nTable 1: Blue result is not ours",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuf",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts =\nV[il-hard\n\nFPT (i kernel)\n\nWik Open\nFPT (CA Femel) FF\n\nKernel) FPT (kernel)\n\nBipartite {C,}-free graphs _FPT\n\nTable 1: Blue result is not",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts\n\nG., Gi}-free graphs Open FPT (i kernel)\nBipartite graphs WOE Open\n\nBipartite A-degree graphs _FPT (K\u00b0A\u00b0 kernel) FPT (KA kernel)\nBipartite (Ci)-free graphs FPT (K\u2122 kernel) PPT (kernel)\n\nTable 1: Blue result is not ours. Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts\n\nG., G}-free graphs Open FPT (i kernel)\nBipartite graphs WOE Open\n\nBipartite A-degree graphs FPT (K\u00b0A\u00b0 kernel) FPT (KA.\nBipartite (Ci]-free graphs FPT (K\u2122 kernel) FPT (K* kernel)\n\nTable 1: Blue result is not ours. Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts\n\nG., G}-ree graphs Open FPT (i kernel)\nBipartite graphs WOE Open\n\nBipartite A-degree graphs FPT (K\u00b0A\u00b0 kernel) FPT (KA\nBipartite (CiJ-free graphs PT (K\u2122 kernel) FPT (kernel)\n\nTable 1: Blue result is not ours. Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass 1S Td\nWik Open\n(CaP FPT (KA Kernel)\n\n\u201cBipartite (Ca)-free graphs FP (k\u2122 kernel) FPT (&* kernel),\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass 7s Td\nWik Open\n(CaP FPT (KA Kernel)\n\n\u201cBipartite (Ca)-free graphs FP T (k\u2122 kernel) FPT (&* kernel),\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass 7s i\nGs, Ca} fee graphs Open FPT (kernel)\nFPT (CA\u2122 ema) PT (KD\n\nBipartite {Ca}-free graphs FPT (k\u2122 kernel) FPT (K* kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass 1S Td\nWilh Open\n(CaP FPT (KB\n\n\u201cBipartite (Ca)-free graphs FPT (K\u2122 kernel) FPT (&* kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass 5 i\nWik Open\n(CaP FPT (KA Kernel)\n\n\u201cBipartite (Ca)-free graphs FPT (K\u2122 kernel) FPT (&* kernel),\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass 1S Td\n{(Gal-fee graphs Wiihard Whikhord\nGs, Co} fee raphe Open FPT (kernel)\nBiparite A-degree Gaps FT (CA\u2122 Kemal) FPT (KD\n\n\u2018Bipartite (C}-free graphs FPT (k\u2122 kernel) \u00a9 kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuff",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass 1S Td\n{(Gal-fee graphs Wiihard Whikhord\nGs, Co} fee raphe Open FPT (& kernel)\nBiparite A-degree Gaps FT (CA\u2122 Kemal) FPT (KD\n\n\u2018Bipartite (C}-free graphs FPT (k\u2122 kernel) \u00a9 kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nquestions but ended up noticing\n\nWe answered only one of the tw\nan interesting relationship between the parfmeterized complexity\n\nof the problems and the girth of the input graph.\n7s aT\nWiihard Wlikhord\nWik Open\n\nFPT (CA heme) PT (KA kernel)\n\nBipartite (Ci)-free graphs\n\nKernel sizes are O(.)\n\nCass\nGs Ga fee raphe\n\nTable 1: Blue result is not ours",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nCass Ts J\n\nvkard\nG, Gfree graphs Open FPT (kernel)\nBiparite Ode AP Kernel) FPT (Kd Fevvel)\n\n\u201cBipartite (Ca}-free graphs FPT (K\u2122 kernel) FPT (&* kernel),\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\nof the problems and the girth of the input graph\n\nCass Ts iE\n\n(Gi-fe graphs Whig vlifhord\nG, Gfree graphs Open FPT (kernel)\nBiparite A-degree graphs FPT (7A Femel) PT (KA kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\nof the problems and the girth of the input graph.\n\nClass Ts TH\n\nG., G}-free graphs Open FPT ( kernel)\nBipartite graphs WOE Open\n\nBipartite A-degree graphs _FPT (K\u00b0A\u00b0 kernel) FPT (KA kernel)\n\u201cBipartite (Ca}-free graphs FPT (k\u2122 kernel) FPT (&* kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\nof the problems and the girth of the input graph.\n\nClass Ts TH\n\nG., G}-free graphs Open FPT ( kernel)\nBipartite graphs WOE Open\n\nBipartite A-degree graphs FPT (K7A\u00b0 keel) FPT (KA kernel)\n\u201cBipartite (Ca)-free graphs FPT (k\u2122 kernel) FPT (& kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts TH\n\nBipartite A-degree graphs (HO kernel) FPT (kX\n\n7 kernel) _FPT ( kernel)\n\nBipartite (Cy)-free graphs\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts TH\n\nG., Gree graphs Open FPT (i kernel)\nOpen\n\nBipartite graphs\nFPT (KA kernel)\n\nBipartite A-degree graphs\nBipartite (Gi)-free graphs FPT (K kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass 7s 7\n\nBipartite A-degree graphs FPT (K7A\u00b0 kernel) FPT (KA kernel)\n\n\u201cBipartite (Ca)-free graphs FPT (k\u2122 kernel) FPT (& kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts iz)\n\n(Gi)-free graphs Wiij-hard N[il-hard\n\nG., Gree graphs Open FPT (i kernel)\nBipartite graphs War:\n\nBipartite A-degree graphs FPT (K7A\u00b0 kernel) F\n\nBipartite {Ci]-free graphs FPT (K\u2122 kernel) FPT (kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuf",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\n\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts iz)\n\n(Gi)-free graphs Wiij-hard N{ij-hard\n\nG., G}-free graphs Open FPT ( kernel)\nBipartite graphs WHER Open\n\nBipartite A-degree graphs FPT (K7A\u00b0 keel) 4\n\nBipartite {Gi]-free graphs FPT (K\u2122 kernel) FPT (kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts iz)\n\n(Gi)-free graphs Wiij-hard N{ij-hard\n\nG., G}-free graphs Open FPT ( kernel)\n\nBipartite graphs WOE Den\nBipartite A-degree graphs _FPT (K\u00b0A\" kemel) |FPT (KA\nBipartite {Gi}-free graphs _FPT (k\u2122 kernel) FPT (K* kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts iz)\n\nG., Gree graphs Open FPT ( kernel)\nBipartite graphs I Open\nBipartite A-degree graphs _FPT (K\u00b0A\u00b0 kernel) [FPT (KA\n\u201cBipartite (Ca}-free graphs FP T (K\u2122 kernel) FPT (k* kernel) _\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nCass 7s\n{Gi}-fee graphs Whil-hard\nGe, Gh: fee grape Open FPT (0 kerel)\n\nBipartite A-degree graphs\n\n\u2018Bipartite (C}-free graphs\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass 7s i\nG, Gree graphs FPT (K kerel)\n\nBipartite A-degree graphs\n\n\u201cFPT (ik kernel)\n\nBipartite (Ca)-free graphs\n\nTable 1: Blue result is not ours sizes are O(.).",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mou:\nAmerican Univ\n\n1d (a9368@aub.edu.lb)\n\nf Beirut",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nCass TS TH\n\nfree graphs Open FPT ( kernel)\ni Open\nraphe D kemel\n\n\u201cBipartite {Ci)-free graphs FPT (k* kernel)\n\nTable 1: Blue result is not ours sizes are O(.).",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass TS TH\n\nfree graphs Open FPT ( kernel)\n7 Open\nraphe D kemel\n\nBipartite {Ca}-free graphs FPT (k* kernel)\n\nTable 1: Blue result is not ours sizes are O(.).",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nCass Ts iz)\n{Gifs was While ifitherd\nBipartite A-degree graphs FPT (K\u00b0A\u00b0 kernel) FPT (KA\n\nBipartite (C,)-free graphs FPT(k\u2122 kernel) FPT\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts TH\n\n{Gi}-fee graphs Whil-hard vif od\nBipart Wark Open\n\nBipartite A-degree graphs FPT (K7A\u00b0 kernel) FPT (KA\n\nTable 1: Blue result is not ours, Kernel sizes",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nof the problems and the girth of the input graph.\n\nClass Ts TH\n\nGiles graphs Open PPT (kama)\n\nBipart hs WoL Open\nBipartite A-degree graphs _FPT (KA\u00b0 kernel) _FPT (KA kernel\nBipartite (Ci)-free graphs FPT (K\u2122 kernel) PPT (kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuf",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nCass Ts TH\n\nG,, Gree graphs Open FPT (i kernel)\nBipartite graphs WOE Open\nBipartite A-degree graphs _FPT (\u00b0\u00b0 kernel) _FPT (KA\n\nBipartite {Ca}-free graphs FPT (k\u2122 kernel) FPT (kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nCass Ts TH\n\nG., Gree graphs Open FPT (i kernel)\nBipartite graphs WOE Open\nBipartite A-degree graphs _FPT (\u00b0\u00b0 kernel) _FPT (KA\n\nBipartite {Ga}-free graphs FPT (k\u2122 kernel) PT (K kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nCass Ts TH\n\nG,, Gree graphs Open FPT (i kernel)\nBipartite graphs WOE Open\nBipartite A-degree graphs _FPT (\u00b0\u00b0 kernel) _FPT (KA\n\nBipartite {Ca}-free graphs FPT (k\u2122 kernel) FPT (kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nCass Ts TH\n\n6, Gree graphs Open FPT (i kernel)\nBipartite graphs WOE Open\n\nBipartite A-degree graphs FPT (K7A\u00b0 kernel) FPT (KA\nBipartite {Ca}-free graphs FPT (k\u2122 kernel) FPT (K kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass 7s 7\n(Gal-fee graphs Wiil-hard N{ivhord\nBiparite D-degree graphs FPT (A kernal\n\nBipartite (Ci)-free graphs _FPT (K\u2122 kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\nof the problems and the girth of the input graph.\n\nCass Ts iz)\n\n{Gi}-fee wae wilh NfiFord\n\nG., Gree graphs Open FPT ( kernel)\nBipartite graphs Whit\nBipartite A-degree graphs FPT (\nBipartite {Ga}-free graphs FPT (k\u2122 kernel) FPT (K kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts TH\n\n{Gi} fee waa wilh NfiFhord\n\nG., Gree graphs Open FPT ( kernel)\nBipartite graphs Whit\n\nBipartite A-degree graphs FPT (\u00b0\u00b0\n\nBipartite {Gi}-free graphs FPT (k\u2122 kernel) FPT (* kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JUMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is ToKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({Cs, Ca}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is TOKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JUMPING FPT parameterized by k on\n\ntriangle-free graphs (answers question 1)? (every reduction know\n\nof includes large cliques)\n\nQuestion 3. Is TOKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, C,}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is TOKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToxEN JuMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is TOKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({Cs, Ca}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)",
    "A lot of open problems\n\nQuestion 1. Is TOKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is TOKEN JUMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is ToKEN SLuDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, C,}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is TOKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is TOKEN JUMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is ToKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, C,}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is TOKEN JUMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is ToKEN SLipING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, Ca}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is TOKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is TOKEN JUMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is ToKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, C,}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is TOKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is TOKEN JUMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is ToKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, C,}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JuMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is ToKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, Ca}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is TOKEN JUMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is ToKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, C,}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is TOKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JumPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is TOKEN SiuDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, Ca}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JumPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction I know\n\nincludes large cliques)\n\nQuestion 3. Is ToKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, Ca}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JumPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is ToKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({Cs, Ca}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of\n\nprevious answers turns out to be yes?",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JuMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\nof includes large cliques) \u00ab\nQuestion 3. Is ToKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({Cs, Ca}-free graphs)? Or, slightly\n\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nGlass Ts TW\n\nGi}-free graphs Whil-hard Wiil-hare\n\nG.. G}-free graphs Open FPT ( kernel)\nWOE Open\n\ngraphs FPT (K7A\u00ae kernel) FPT (kA kernel)\n\nBiparti }-free graphs FPT(k\u2122 kernel) FPT (k* kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\n\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nGlass Ts TW\n\n(Gi)-free graphs Whil-hard V[il-hard\nfree graphe Open FPT ( kernel)\n\njphs WHER Open\n\n~FPT (2\u00b0 kernel) FPT (KA kernel)\n\n\u201cBipartite A-degree graphs\nFPT (& kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nGlass Ts TH\n{Gi)-free graphs Wiil-hard [ij-hard\nFPT ( kernel)\n\nOpen\n\nG,. G}-free graphs Open\nBipartite graphs WHER\nBipartite A-degree graphs FPT (K\u00b0A\u00b0 kernel) _FPT (KA ke\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts TH\n{Gi)-fee graphs Wiil-hard [ij-hard\nFPT ( kernel)\n\nOpen\n\nG,. G}-free graphs Open\nBipartive graphs Wo\nBipartite A-degree graphs FPT (K\u00b0A\u00b0 kernel) _FPT (KA ke\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass 7S a\n\nBipartite A-degree graphs FPT (K\u00b0A\u00b0 kernel) FPT (KA kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts a\n\nBipartite A-degree graphs FPT (K\u00b0A\u00b0 kernel) FPT (KA kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nClass Ts To\nBiparite A-degree Bape FPT (A Femel) FPT (KA kernal)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JUMPING FPT parameterized by k on\n\ntriangle-free graphs (answers question 1)? (\u00aevery reduction I know\n\nof includes large cliques)\n\nQuestion 3. Is TOKEN SLiDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, Ca}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JUMPING FPT parameterized by k on\n\ntriangle-free graphs (answers question 1)? (\u00aevery reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is ToKEN S1iDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, Ca}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "1. Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuf",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JUMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is ToKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({Cs, Ca}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKeN JUMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is ToKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, Ca}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKeN JuMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is ToKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({Cs, Ca}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is TOKEN JUMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is ToKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, C,}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is TOKEN JUMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is TOKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, C,}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JuMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is TOKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, Ca}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JuMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is TOKEN SLiDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, Ca}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JuMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is TOKEN SLiDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, Ca}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JuMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is TOKEN SLiDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, Ca}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JuMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is TOKEN SLiDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, Ca}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuf",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JuMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is TOKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, Ca}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JuMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is TOKEN SLiDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, Ca}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JuMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is TOKEN SLiDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, Ca}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JuMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is TOKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, Ca}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JuMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is TOKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, Ca}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JumPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is TOKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, Ca}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JumPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is TOKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({Cs, Ca}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JuMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is ToKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({Cs, Ca}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JuMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is TOKEN JUMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is ToKeN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, C,}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is TOKEN JUMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is TOKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, C,}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuf",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JUMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is TOKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({Cs, Ca}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is TOKEN JUMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is ToKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, C,}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is TOKEN JUMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is ToKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, C,}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JUMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques) a\n\nls TOKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, C,}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JUMPING FPT parameterized by k on\ntriangle-fee graphs (answers question 2)? (every reduction I know\n\nof includes large cliques)\n\nls TOKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, C,}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JuMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JUMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is TOKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, C,}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is TokEN JUMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is ToKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({Cs, Ca}-free graphs)? Or, slightly\n\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is TokEN JUMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is TOKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({Cs, Ca}-free graphs)? Or, slightly\n\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JuMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JumPiN FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is ToKeN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, C,}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is TokEN JUMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is ToKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({Cs, Ca}-free graphs)? Or, slightly\n\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuff",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is TokEN JUMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is ToKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({Cs, Ca}-free graphs)? Or, slightly\n\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JuMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JUMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is ToKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, C,}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JUMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is TOKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, C,}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JuMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is ToKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, C,}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JuMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nls TOKEN SuiDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, Ca}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JuMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nls TOKEN SuiDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, Ca}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph\n*\n\nCass 7s i\nGe Ci} fee raphe Open FPT (kernel)\n\nBipartite {(Ci)-free graphs PT (K\u2122 kernel) FPT (* kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph\n*\n\ncass 73 7\nBipatte A-degre graphs FT (1\u00b0 Kernel) FPT (KA ternal)\n\nBipartite {Ca}-free graphs FPT (k\u2122 kernel) PT (K* kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nCass 73 i\n{Gi)-fee graphs Whil-hard vif ord\n\nBipartite A-degree graphs FPT (K7A\u00b0 kernel) nel)\nBipartite (Gi)-free graphs FPT (K\u2122 kernel) PPT (* kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nGlass Ts TH\n(Gi}-free graphs Wij-hard V[ij-hard\n\nG., G}-free graphs Open FPT ( kernel)\nBipartite graphs WoL Open\n\u201cBipartite O-de aphs PT (K\u00b0A\u00ae kemel)  FPT (kA kernel)\n\nBipartite (C,)-free graphs FPT (K\u2122 kernel) FPT (K* kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuff",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nGlass Ts TW\n(Gi}-free graphs Wij-hard V[ij-hard\nG., G}-free graphs Open FPT ( kernel)\nBipartite graphs WoL Open\n\n\u201cBipartite O-de aphs PT (K\u00b0A\u00ae kemel) _ FPT (kA kernel)\n\nBipartite {Ca}-free graphs kernel) __FPT (kernel) _\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nGlass Ts TW\n(Gi)-free graphs Whil-hard Wiif-hara\n\nG., G}-free graphs Open FPT (i kernel)\nBipartite graphs Wh: Open\nBipartite A-degree graphs FPT (K\u00b0A\u201d kernel) FPT (kA kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(.)",
    "Parameterized complexity\n\nWe answered only one of the two questions but ended up noticing\nan interesting relationship between the parameterized complexity\n\nof the problems and the girth of the input graph.\n\nGlass Ts TW\n(Gi)-free graphs Wij-hard V[ij-hard\n\nG., G}-free graphs Open FPT (i kernel)\nBipartite graphs Warn:\n\u201cBipartite A-degree graphs FPT (KA\u00ae kernel) FPT (kA kerne\n\nBipartite (Cy}-free graphs FPT (k\u2122 kernel) FP (K* kernel)\n\nTable 1: Blue result is not ours, Kernel sizes are O(,)",
    "A lot of open problems\n\nQuestion 1. Is ToKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is TOKEN JUMPING FPT parameterized by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is ToKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, C,}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "A lot of open problems\n\nQuestion 1. Is TOKEN JUMPING FPT parameterized by k on\nbipartite graphs?\n\nQuestion 2. Is ToKEN JUMPING FPT parameteriaed by k on\ntriangle-free graphs (answers question 1)? (every reduction | know\n\nof includes large cliques)\n\nQuestion 3. Is ToKEN SLIDING FPT parameterized by k on\ngraphs of girth at least 5 ({C3, Ca}-free graphs)? Or, slightly\nweaker, is it FPT on graphs of girth at least p, for constant p?\n\nQuestion 4. How about polynomial kernels in case any of the\n\nprevious answers turns out to be yes?",
    "The technical stuff",
    "The technical stuff",
    "Hardness on {Gy\n\nG,}+free graphs\n\na\n\n\u201cClass\n\nGe\n\nfri graph\n\nBipartite graphs\n\nBipartite A-degree graphs\n\nBipartite {Ci)-free graphs\n\nTheorem\n\nFor\n\nany p\n\nTs\nOpen\n\nWhil-har\n\nFPT (\u20acA\" kernel)\nFPT (k\u2122 kernel)\n\nTH\n\nFPT (& kernel)\nFPT (KA Ferma)\nFPT (Kernel)\n\nare WflJ-hard on",
    "Hardness on {C;,..., Cp}-free graphs\n\nTs\n\nraphs Open FPT (k\nBipartite graphs Whil-hard\n\nBipartite A-degree graphs FPT (KA\u00ae kernel)\n\nBipartite {Ca}-free graphs FPT (k\u2122 kernel) FPT (K* kernel)\n\nKernel)\n\nTheorem\n\nFor any p> 4, TOKEN SUING and TOKEN NC are WflJ-hard on",
    "Hardness on {C,,..., C)}-free graphs\n\nBipartite graphs\nBipartite A-degree graphs\n\nBipartite {C,)-free graphs\n\nTheorem\nFor any p > 4, TOKEN SLIDIN\n\n{c ree graphs.\n\nFPT (K kernel)\n\nel)\nFPT (kernel) __FPT (k= kernel)\n\nand TOKEN",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuf",
    "Hardness on {C,,..., Cp}-free graphs\n\nBipartite graphs\nBipartite A-degree graphs \u2018D kernel\nBipartite {Ci}-free graphs FPT (K\u2122 kernel)\n\nTheorem\nFor any p\n\n(Ce... G}-free graphs.\n\nTH\nFPT (K kernel)\nOpen\n\nPT (KA kernel)\nFPT (k= kernel)\n\nare WilJ-hard on",
    "Hardness on {C,,..., C)}-free graphs\n\nBipartive graphs\nBipartite A-degree graphs\nBipartite {C.)-free graphs\n\nTheorem\nFor any p\n\n(Ce... G}-free graphs.\n\n\u2018DY kernel\nFPT (k\u2122 kernel)\n\nTH\n\nFPT (K kernel)\nOpen\n\nPT (KA kernel)\nFPT (k= kernel)\n\nare Wil]-hard on",
    "Hardness on {Gy\n\np}-free graphs\n\n\u201cCas\n\nG. Gi}-free graphs\nBipartite graphs\n\nBipartite A-degree graphs\n\nBipartite {Ci)-free graphs\n\nTheorem\nFor any p\n\nOpen\nWilh\n\nFPT (O\u00b0 ker\n\nFPT (k\n\nTH\nFPT (K kernel)\nnel)\n\nFPT (= kernel)\n\nare Wf1J-hard on",
    "Hardness on {Gy\n\np}-free graphs\n\n\u201cCas\n\nG. Gi}-free graphs\nBipartite graphs\n\nee graphs\n\nBipartite {Ci)-free graphs\n\nTheorem\nFor\n\nOpen\n\nWilh\n\nFPT (O\u00b0 ker\n\nFPT (k\n\nTH\n\nFPT (K kernel)\n\nare Wf1-hard on",
    "Hardness on {C,,..., Cp}-free graphs\n\nTs TH\nOpen FPT (K kernel)\nWhil-hard Open\n\nBipartite A-degree graphs _FPT (\u00b0\u00b0 kernel) _FPT (KA kernel)\n\nBipartite {Ci)-free graphs FPT (K\u2122 kernel) __FPT (K* kernel)\n\nTheorem\nFor any p N . NC are WfiJ-hard on",
    "Hardness on {C,,...,Cp}-free graphs\n\n\u201cClass\n\nBipartte graphs\n\nBipartite A-degree graphs\n\nBipartite {Gi}-free graphs\n\nTheorem\nFor any\n\nTS\n\nOpen\nWhil-hard\n\nFPT (O\u00b0 kernel)\nFPT (k\u2122 kernel)\n\nTH\n\nFPT (K kernel)\nOpen\n\nFPT (KA kernel)\nFPT ( kernel)\n\nore Wf",
    "Hardness on {Gy p}-free graphs\n\nClass Ts TH\n\nG. Gree graphs Open FPT (K kernel)\nBipartite graphs Wiil-hard Open\n\nBipartite A-degree graphs FPT (K\u00b0 A\" kernel) FPT (KA kernel) _\nBipartite {Gi}-free graphs FPT (k\u2122 kernel) __FPT (K* kernel)\n\nTheorem\nFor any p > 4, TOKEN StDING and TOKEN NC are WfiJ-hard on",
    "Hardness on {C,,..., Cp}-free graphs\n\nTH\n\nraphs Open\n\nFPT (K kernel)\nBipartite graphs\n\nWhi-hard Open\n\nBipartite A-degree graphs\n\nPT (KA kernel)\n\nBipartite {G FPT ( kernel)\n\nTheorem\nFor any p > 4, TOKEN SLIDIN . NC are Wft]-hard on\n{c ree graphs.",
    "Hardness on {C,,..., Cp}-free graphs\n\nTH\n\nraphs Open\n\nFPT (K kernel)\nBipartite graphs\n\nWhil-har Open\n\nBipartite A-degree graphs\n\nPT (KA kernel)\n\nBipartite {G FPT ( kernel)\n\nTheorem\nFor any p > 4, TOKEN SLIDIN x NC are WflJ-hard on\n{c ree graphs.",
    "Hardness on {C,,..., Cp}-free graphs\n\nTs TH\nfree graphs Open FPT (K kernel)\n\nBipartite graphs Will-hard Open\n\nBipartite A-degree graphs _FPT (KA\" kernel)\n\nBipartite {Ci}-free graphs FPT (K\u2122 kernel)\n\nTheorem\n\nFor any p> 4, TOKEN SLIDING and TOKEN NC are Wfi}-hard on\n\n{Ce..... G}-free graphs.",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuf",
    "Hardness on {C,,..., Cp}-free graphs\n\n\u201cClass\n\nraphs\nBipartite graphs\nBipartite A-degree graphs\n\nBipartite {Ci}-free graphs\n\nTheorem\n\nTs\nOpen\n\nWhil-har\n\nFPT (\"ker\nFPT (K\u2122 kernel)\n\nTH\n\nFPT (K kernel)\nOpen\n\n_FPT (KA kernel)\nFPT (k= kernel)\n\nare Wfl-hard on",
    "Hardness on {C;,...,Cp}-free graphs\n\n\u201cClass\n\nraphs\nBipartite graphs\nBipartite A-degree graphs\n\nBipartite {CG,}-free graphs\n\nTheorem\n\nTs\nOpen\n\nWhil-har\n\nFPT (22\u00b0 ker\nFPT (K\u2122 kernel)\n\nTH\n\nFPT (K kernel)\n\nFPT (k= kernel)\n\nare Wfl-hard on",
    "Hardness on {C;,..., Cp}-free graphs\n\nraphs\nBipartite graphs\n\nBipartite A-degree graphs\nBipartite {Gy)-free graphs\n\nTheorem\n\nFor any p> 4, TOKEN SLIDIN\n\n(Ga... G)-free graphs.\n\nTs\nOpen\n\nWhi-har\n\nFPT (2\u00b0 ker\nFPT (k\u2122 kernel\n\nand To!\n\nFPT (K kernel)\n\nFPT (= kernel)\n\nare Whl}-har",
    "Hardness on {C,,..., Cp}-free graphs\n\nraphs\nBipartite graphs\n\nBipartite A-degree graphs\nBipartite {Gy)-free graphs\n\nTheorem\n\nFor any p> 4, TOKEN SLIDIN\n\n(Ca... G)-free graphs.\n\nOpen FPT (K kernel)\nWhi-har\n\nFPT (KA\" kerne\n\nFPT (k\u2122 kernel FPT ( kernel)\n\nand TOKEN NG are Wfl-har",
    "Hardness on {C,,..., Cp}-free graphs\n\nTH\nOpen FPT (K kernel)\n\nBipartive graphs Whil-hard\n\nBipartite A-degree graphs _FPT (A\" kernel\n\nBipartite {(Ci)-free graphs _FPT (K\u2122 kernel)\n\nTheorem\nFor any p > 4, N 3 N NC are Wfl]-hard on",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mou:\nAmerican Univ\n\nid (2a368@aub.edu.lb)\nf Beirut",
    "Hardness on {C,,..., Cp}-free graphs\n\nTH\n\nOpen FPT (K kernel)\nBipartite graphs Whil-hard Open\n\nBipartite A-degree graphs _ FPT (K\u00b0A\u00b0 kernel]\n\nBipartite {C,}-free graphs FPT (k\u2122 kernel)\n\nTheorem\nFor any p\n\nare Wt}-hard on",
    "Hardness on {C,,...,Cp}-free graphs\n\nTH\n\nOpen FPT (K kernel)\n\nBipartite graphs Whil-hard\n\nBipartite A-degree graphs _ FPT (K\u00b0A\u00b0 kernel]\nBipartite {(Ci)-free graphs FT (k\u2122 kernel\n\nTheorem\nFor any p> 4 . x NC are Wfl}-hard on",
    "Hardness on {C,,..., Cp}-free graphs\n\nBipartite graphs\n\nBipartite A-degree graphs\n\nBipartite {Ci)-free graphs\n\nTheorem\n\nTs\n\nOpen\nWihil-hard\n\nFPT (O\u00b0 kernel)\n\nFPT (K kernel)\nOpen\n\nFPT (kA kernel)\nFPT (k= kernel)\n\nare W}-hard on",
    "Hardness on {C,,..., Cp}-free graphs\n\nTs\n\nraphs Open FPT (K kernel)\nBipartite graphs Wihil-hard Open\n\nBipartite A-degree graphs FPT (K\u00b0A\u00b0 kernel) _FPT (KA kernel)\nBipartite {Ci)-free graphs FPT (K kernel)\n\nTheorem\nFor any p> 4, TOKEN SLIDIN x NC are Wfl}-hard on\n\n{Case G}-free graphs",
    "Hardness on {C,,..., Cp}-free graphs\n\nBipartite graphs\n\nBipartite A-degree graphs\n\nBipartite {Ci)-free graphs\n\nTheorem\n\nTs\n\nOpen\nWihil-hard\n\nFPT (O\u00b0 kernel)\n\nFPT (K kernel)\nOpen\n\nFPT (kA kernel)\nFPT (K2 kernel)\n\nare W}-hard on",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuf",
    "Hardness on {C,,...,Cp}-free graphs\n\nTH\n\nfree graphs Open FPT (K kernel)\nBipartite graphs Whi-hard\n\nBipartite A-degree graphs _ FPT (K7A\u201d kere\n\nBipartite {Ci}-free graphs FPT (k\u2122 kernel) FPT (K* kernel)\n\nTheorem\nFor any p > 4, TOKEN SLIDIN N NC are WflJ-hard on\n\n{Ca.-...G)-free graphs.",
    "Hardness on {C,,..., Cp}-free graphs\n\nTH\n\nfree graphs Open FPT (K kernel)\nBipartite graphs Whil-hard\n\nBipartite A-degree graphs _FPT (K7A\u201d kere\n\nBipartite {Ci}-free graphs FPT (k\u2122 kernel) __FPT (K* kernel)\n\nTheorem\nFor any p > 4, TOKEN SLIDIN N NC are WfiJ-hard on\n\n{Ga.-.-.G)-free graphs.",
    "Hardness on {C,,..., Cp}-free graphs\n\nfree gris Open FPT (K keel)\nBipartte {Ci}-free graphs FPT (K\u2122 kerel) PT (K kernel)\n\nTheorem\nFor any p> 4, TOKEN SLIDING and TOKEN JUMPING are W[IJ-hard on\n\n{Ca.-.-.G)-free graphs.",
    "Hardness on {C,,...,Cp}-free graphs\n\n\u201cClass i)\n\nG.. Gree graphs Open FPT (K kernel)\nBipartite graphs Whil-hard Open\n\nBipartite A-degree graphs FPT (K\u00b0A\u00b0 kernel) _FPT (kA\nBipartite {Ci)-free graphs PT (K\u2122 kernel) __FPT (K* kernel)\n\nTheorem\nFor any p> 4, TOKEN SLIDIN are WilJ-hard on\n{Ce...-.G)-free graphs.",
    "Hardness on {C,,..., Cp}-free graphs\n\n\u201cClass i)\n\nG.. Gree graphs Open FPT (K kernel)\nBipartite graphs Wihil-hard Open\n\nBipartite A-degree graphs _FPT (K\u00b0A\u00b0 kernel) FPT (kA\nBipartite {Ci)-free graphs PT (K\u2122 kernel) __FPT (K* kernel)\n\nTheorem\nFor any p > 4, TOKEN SLIDIN are WilJ-hard on\n{Ca.-.-.G)-free graphs.",
    "Hardness on {C,,...,Cp}-free graphs\n\n\u201cClass mz\n\nG. Ga}-free graphs Open FPT (K kernel)\nBipartite graphs Wiil-hard Open\nBipartite A-degree graphs _FPT (\u00b0\u00b0 kernel) FPT (KA\n\nBipartite {Gi}-free graphs FPT (k\u2122 kernel) FPT (K* kernel)\n\nTheorem\nFor any p\n\n{c\n\nare WflJ-hard on",
    "Hardness on {Cy\n\n\u201cClass\n\nBiparite graphs\n\nBipartite {Gi}-free graphs\n\nTheorem\nFor any p\n\n{c\n\nG,}-free graphs\n\nOpen\nWiil-hard\n\nBipartite A-degree graphs _ FPT (K\u00b0A\u00b0 kernel\n\nFPT (k\u2122 kernel).\n\nTH\n\nFPT (K kernel)\nFPT (kA kernel\nFPT (k= kernel)\n\nare WilJ-hard on",
    "Hardness on {C,,..., Cp}-free graphs\n\n\u201cClass. Ts\n\nG. Gree graphs Open FPT (K kernel)\nBipartite graphs Wiil-hard Open\nBipartite A-degree graphs _FPT (\u00b0\u00b0 kernel (KA kernel)\nBipartite {Ci)-free graphs FPT (K\u2122 kernel) __FPT (k* kernel)\n\nTheorem\nFor any p\n\nare WilJ-hard on\n{c",
    "Hardness on {C,,..., Cp}-free graphs\n\nTs\n\nOpen FPT (K kernel)\nBipartite graphs Wiil-hard Open\nBipartite A-degree graphs _FPT (7\u00b0 kernel nel)\nBipartite {Ci)-free graphs FPT (K\u2122 kernel) __FPT (Kk kernel)\n\nTheorem\nFor any p> 4, 1 SUDIN x Nc are WftJ-hard on\n\n{c",
    "Hardness on {C,,..., Cp}-free graphs\n\nTs\n\nOpen FPT (K kernel)\nBipartite graphs Whil-hard Open\nBipartite A-degree graphs _FPT (\u00b0A\" kernel nel)\nBipartite {Ci)-free graphs PT (K\u2122 kernel) __FPT (K* kernel)\n\nTheorem\nFor any p x N Nc are WftJ-hard on\n\n{c",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuff",
    "Hardness on {C,,..., C)}-free graphs\n\nBipartite graphs\nBipartt ee graphs\n\nBipartite {Ci}-free graphs\n\nTheorem\n\nFor any p> 4, TOKEN SLIDIN\n\n(Ca... G)-free graphs.\n\nOpen\nWilh\n\nFPT (2\u00b0 kernel)\nFPT (k\u2122 kernel)\n\nTH\n\nFPT (K kernel)\nOpen\n\nFPT (kA kernel)\nFPT (k= kernel)\n\nare WilJ-hard on",
    "Hardness on {C.,\n\nBipartite graphs\nBipart\nBipartite {G\n\nAcdegree gr\n\nTheorem\n\niromen ss\n\nree graphs.\n\np}-free graphs\n\nOpen\nWilh\n\nFPT (2\u00b0 kernel)\nFPT (k\u2122 kernel)\n\niphs\n\nTH\nFPT (k\nOpen\nFP\n\nFPT (k\n\nKernel)\n\n(KB kernel)\n\nkernel)\n\nare WilJ-hard on",
    "Hardness on {C,,..., Cp}-free graphs\n\nClass Ts\n\nGs. Gi}-free graphs Open FPT (k\nBipartite graphs Wiil-hard Open\n\nBipartite A-degree graphs FPT (K7A\" kernel) FPT (KA kernel)\nBipartite {Gi}-free graphs FPT (k\u2122 kernel) FPT (K* kernel) _\n\nkernel)\n\nTheorem\nFor any p> 4, TOKEN SLIDING and TOKEN\n\nare Wi]-hard on\n(Ga... G)-free graphs.",
    "Hardness on {C,,...,C)}-free graphs\n\nTs\n\nraphs Open FPT (K kernel)\nBipartite graphs Wiil-hard Open\n\nBipartite A-degree graphs _FPT (K\" kernel)\nBipartite {Ci)-free graphs FPT (K\u2122 kernel) __FPT (K* kernel)\n\nTheorem\n\nFor any p> 4, ToK are WiJ-hard on\n\n(GeeiGh",
    "Hardness on {C,,...,Cp}-free graphs\n\nTs\n\nraphs Open FPT (K kernel)\nBipartite graphs Wiil-hard\n\nBipartite A-degree graphs _FPT (KA\" kernel)\nBipartite {Ci)-free graphs FPT (K\u2122 kernel) __FPT (K* kernel)\n\nTheorem\n\nFor any p> 4, ToK are WiJ-hard on\n\n(GeeiGh",
    "Hardness on {C,,...,Cp}-free graphs\n\nG.c raph\n\nBipartite graphs\n\nBipartite A-degree graphs\n\nBipartite {Ci)-free graphs\n\nTheorem\n\nTs\n\nOpen\n\nWhil-hard\n\nFPT (2\u00b0 kernel)\nFPT (k kernel)\n\nand TOKEN\n\nFPT (K kernel)\n\nOpen\n\nFPT (KA kernel)\n\nFPT (= kernel)\n\nare WiIJ-hard on",
    "Hardness on {C,,...,Cp}-free graphs\n\nG.c raph\n\nBipartite graphs\n\nBipartite A-degree graphs\n\nBipartite {Ci)-free graphs\n\nTheorem\n\nTs\n\nOpen\n\nWhil-hard\n\nFPT (2\u00b0 kernel)\nFPT (k kernel)\n\nand TOKEN\n\nFPT (K kernel)\n\nOpen\n\nFPT (KA kernel)\n\nFPT (= kernel)\n\nare WilJ-hard on",
    "Hardness on {C,,...,Cp}-free graphs\n\nG.c raph\n\nBipartite graphs\n\nBipartite A-degree graphs\n\nBipartite {C.)-free graphs\n\nTheorem\n\nTs\n\nOpen\n\nWiil-hard\n\nFPT (2\u00b0 kernel)\nFPT (k kernel)\n\nand TOKEN\n\nFPT (K kernel)\nOpen\n\nFPT (KA kernel)\n\nFPT (k= kernel)\n\nare WilJ-hard on",
    "Hardness on {C,,...,Cp}-free graphs\n\n\u201cClass\n\nGs. Gree graphs Open\nBipartite graphs Whil-hard\nBipartite A-degree graphs FPT (K7A\u00b0 kernel)\nBipartite {C)}-free graphs FPT (k\u2122 kernel)\n\nTheorem\nFor any p> 4, TOKEN StDING and TOKEN\n\n{Ca.---.G)-free graphs.\n\nFPT (K kernel)\nOpen\n\nFPT (kA kernel)\nFPT (= kernel)\n\nare W[l]-har",
    "Hardness on {C,,..., Cp}-free graphs\n\n\u201cClass\n\nBipartite graphs\nBipartite A-degree graphs\nBipartite {Ci)-free graphs\n\nTheorem\nFor any p> 4, TOKEN SLIDIN\n\n{Ga G)-free graphs.\n\nOpen\nWhil-hard\n\nFPT (A\" kernel)\nFPT (k\u2122 kernel)\n\nFPT (K kernel)\nOpen\n\nFPT (kA kernel)\nFPT (= kernel)\n\nare W[l]-har",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuff",
    "Hardness on {CG\n\nC,}-free graphs\n\nG.. Gree graphs\nBipartite graphs\n\nBipartite A-degree graphs\n\u2018Bipartite {Cy}-fre\n\nTheorem\nFor any p> 4, Tox\n\n(Gases Gh\n\nOpen\nWhil-hard\n\nFPT (A\u00b0 kernel)\n\nFPT (k\u2122 kernel)\n\nFPT (K kernel)\nOpen\n\nFPT (kA kernel)\nFPT ( kernel)\n\nare WilJ-hard on",
    "Hardness on {C,,..., Cp}-free graphs\n\n\u201cClass\nG. Gree graphs\nBipartite graphs\nBipartite A-degree graphs\n\nBipartite {G)-free graphs\n\nTheorem\nFor any p> 4, TOKEN SLIDIN\n\n{Ca.---.G)-free graphs.\n\nOpen FPT (k\nWhil-hard\n\nFPT (KA\u00b0 kernel)\n\nFPT (k\u2122 kernel) FPT (K\u00b0 kernel)\n\nKernel)\n\nand TOKEN are WilJ-hard on",
    "Hardness on {C,,...,Cp}-free graphs\n\n\u201cClass\nG., Gyre graphs\nBipartite graphs\nBipartite A-degree graphs\n\nBipartite {G)-free graphs\n\nTheorem\nFor any p> 4, TOKEN SLIDIN\n\n{Ca.---.G)-free graphs.\n\nOpen FPT (k\nWhil-hard\n\nFPT (KA\u00b0 kernel)\n\nFPT (k\u2122 kernel) FPT (K\u00b0 kernel)\n\nKernel)\n\nand TOKEN are WilJ-hard on",
    "Hardness on {C,,..., Cp}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[J]-hard) to INDEPENDENT Se on {C,,....Cp}-free graphs\nthat gives us a graph G satisfying the following:\n\u00a9 G can be partitioned into 8k?(p + 1) cliques Vie... Vex\neach of size n with edges between the cliques.\n* Gis{ Cp}-free\n@ The instance of GRID TILING is a yes-instance iff G has an\n\nindependent set of size 8k2(p + 1).\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {C,,..., Cp}-free graphs\n\nWe use a known reduction from Grip TILINC\n\n(known to be\nW[i}-hard) to INDEPENDENT Sev on {Ca\n\nCp}-free graphs\nthat gives us a graph G satisfying the following:\n\n\u00a9 G can be partitioned into 8k?(p +1) cliques Vi\n\neach of size m with edges between the cliques.\n\nCp}-free.\n\u00a9 The instance of GRID \u2018TILING is a yes-instance iff G has an\nindependent set of size 8k?(p + 1).\n\nNote that an independent set of size 8k(p + 1) in G has to be",
    "Hardness on {C,,..., Cp}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[i]-hard) to INDEPENDENT SEY on {Ca,....Cp}-free graphs\n\nthat gives us a graph G satisfying the following\n\n# G can be partitioned into 8k2(p +1) cliques Vi\n\neach of size m with edges between the cliques.\n\n\u00a9 Gis {C Cp}-free\n\nThe instance of Grip TILING is a yes-instance if\n\nindependent set of size 8k*(p + 1).\n\nG has an\n\nNote that an independent set of size 8K2(p +1) in G has to be",
    "Hardness on {C,,..., C)}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[il-hard) to INDEPENDENT SEY on {Ca,....Cp}-free graphs\nthat gives us a graph G satisfying the following:\n\nG can be partitioned into 8k?(p + 1) cliques Vi\n\neach of size m with edges between the cliques.\n\nGis {C Cp}-free\n\nThe instance of GRID TILING is a yes-inst G has an\nindependent set of size 8k?(p + 1).\n\nNote that an independent set of size 8k(p + 1) in G has to be",
    "Hardness on {C,,..., C)}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[il-hard) to INDEPENDENT SET on {Ca,....Cp}-free graphs\nthat gives us a graph G satisfying the following:\n\nG can be partitioned into 8k?(p + 1) cliques Va\n\neach of size m with edges between the cliques.\n\nGis {C Cp}-free\n\nThe instance of GRID TILING is a yes-in G has an\nindependent set of size 8k?(p + 1).\n\nNote that an independent set of size 8k(p + 1) in G has to be",
    "Hardness on {C,,..., C)}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[lJ-hard) to INDEPENDENT Se on {Cg.....Cp}-free graphs\n\nthat gives us a graph G satisfying the following:\n\n\u00a9 G can be partitioned into 8k?(p +1) cliques Vi\n\neach of size m with edges between the cliques.\n* Gis{ Cp}-free\n# The instance of GRip TILING is a yes-inst\n\nindependent set of size 8k?(p + 1).\n\nVex2(p+1)\n\nG has an\n\nNote that an independent set of size 8k(p +1) in G has to be",
    "Hardness on {G,,..., C)}-free graphs\n\nWe use a known reduction from Grip TILINc\n\nW[J-hard) to INDEPENDENT SET on {Ca,....Cp}-fr\n\nthat gives us a graph G satisfying the following:\n\n\u00a2 G can be partitioned into 8k*(p + 1) cliques V1\n\neach of size m with edges between the cliques.\n\nfree\n1D TILING is a yes-instance\n\nindependent set of size 8k?(p + 1).\n\nNote that an independent set of size 8k?(p\n\n(known to be\n\ngraphs\n\nVox\n\nG has an\n\n1) in G has to be",
    "Combinatorial reconfiguration\n\nOne-dimensional complexity of TJ and TS\n\nPC of TJ and TS (where we are today)\n\nThe technical stuff",
    "Hardness on {C,,...,Cp}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW{lJ-hard) to INDEPENDENT ST on {Cg.....Cp}-free graphs\nthat gives us a graph G satisfying the following:\n\n\u00a9 G can be partitioned into 8k(p + 1) cliques Vi\n\neach of size n with edges between the cliques.\n\n* Gis { Cp}-free\n\nThe instance of Grip TILING is a yes-inst G has an\n\nindependent set of size 8k?(p + 1).\n\nNote that an independent set of size 8K2(p +1) in G has to be",
    "Hardness on {G,,..., C)}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[1]-hard) to INDEPENDENT SET on {Cy,....Cp}-free graphs\nthat gives us a graph G satisfying the following:\n\n\u00a9 G can be partitioned into 8k?(p +1) cliques Vi Vex2(p41)\neach of size n with edges between the cliques.\n-free\n1D TILING is a yes-instance iff G has an\n\nindependent set of size 8k?(p + 1).\n\nNote that an independent set of size 8k(p +1) in G has to be",
    "Hardness on {Gy,..., C)}-free graphs\n\nWe use a known reduction from Grip TILINc\n\nW[i]-hard) to INDEPENDENT SEY on {Ca,.... Cp}\n\nthat gives us a graph G satisfying the following:\n\n\u00a9 G can be partitioned into 8k?(p +1) cliques Vi\n\neach of size m with edges between the cliques.\n\nfree\n1D TILING is a yes-instance\n\nindependent set of size 8k?(p + 1).\n\nNote that an independent set of size 8k?(p\n\n(known to be\n\ngraphs\n\nVox\n\nG has an\n\n1) in G has to be",
    "Hardness on {C,,..., C)}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[lJ-hard) to INDEPENDENT Se on {Cg.....Cp}-free graphs\nthat gives us a graph G satisfying the following:\n\n\u00a9 G can be partitioned into 8k?(p + 1) cliques Vi\n\neach of size m with edges between the cliques.\n* Gis{ y}-free\n# The instance of Grip TILING is a yes-instance iff G has an\n\nindependent set of size 8k?(p + 1).\n\nNote that an independent set of size 8k(p +1) in G has to be",
    "Hardness on {C,,..., C)}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[1]-hard) to INDEPENDENT Ser on {Cy,....Cp}-free graphs\nthat gives us a graph G satisfying the following:\n\n\u00a9 G can be partitioned into 8k?(p + 1) cliques Vi\n\neach of size m with edges between the cliques.\n\n\u00a9 Gi ,}-free\n\n\u00a9 The instance of GRID TILING is a yes-instance iff G has an\nindependent set of size 8k2(p + 1),\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {C,,..., Cp}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[1]-hard) to INDEPENDENT Ser on {Cy,....Cp}-free graphs\nthat gives us a graph G satisfying the following:\n\n\u00a9 G can be partitioned into 8k?(p + 1) cliques Vi\n\neach of size m with edges between the cliques.\n\u00a9 Gi ,}-free\n\u00a9 The instance of GRID TILING is a yes-instance iff G has an\n\nindependent set of size 8k7(p + 1)\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {C,,...,Cp}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW{lJ-hard) to INDEPENDENT Se on {Cg....,Cp}-free graphs\n\nthat gives us a graph G satisfying the following:\n# G can be partitioned into 8k2(p-+ 1) cliques Vi\neach of size n with edges between the cliques.\n* Gis G\n# The instance of GRID TILING is a yes-instance\n\nindependent set of size 8k2(p + 1).\n\nG has an\n\nNote that an independent set of size 8k(p + 1) in G has to be",
    "Hardness on {Gy p}-free graphs\n\nWe use a known reduction from Grup TILING (known\n\nto be\n\nW[1]-hard) to INDEPENDENT Set on {Cy,...,Cp}-free graphs\n\nthat gives us a graph G satisfying the following:\n\u00a9 G can be partitioned into 8k*(p +1) cliques V4\neach of size m with edges between the cliques.\n\u00a9 Gis\n# The instance of GRID TILING is a yes-instance\nindependent set of size 8k?(p + 1).\n\nNote that an independent set of size 8k(p + 1) in G\n\nG has an\n\nhas to be",
    "Hardness on {C,,..., Cp}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[J]-hard) to INDEPENDENT Se on {C,.....Cp}-free graphs\nthat gives us a graph G satisfying the following:\n\u00a9 G can be partitioned into 8k*(p + 1) cliques Vi\neach of size m with edges between the cliques.\n\u00a9 Gis (Cy... Cp}-free\n\u00a9 The instance of GRID \u2018TILING is a yes-instance iff G has an\n\nindependent set of size 8k\"(p + 1).\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {C,,...,Cp}-free graphs\n\nWe use a known reduction from Grip \u2018THING (known to be\nW[t[-hard) to INDEPENDENT SEI on {Ca,..-.Cp}-free graphs\nthat gives us a graph G satisfying the following:\n\u00a9 G can be partitioned into 8k?(p +1) cliques Vi\neach of size n with edges between\n\u00a9 Gis {C......Cp}-free\n@ The instance of Grip THANG is a yes-instance iff G has an\n\nindependent set of size 8k2(p + 1).\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "\u00ab\n\nCombinatorial reconfiguration",
    "Hardness on {C,,..., Cp}-free graphs\n\nWe use a known reduction from Grip THING (known to be\nW[t[-hard) to INDEPENDENT SET on {Ca,..-Cp}-free graphs\nthat gives us a graph G satisfying the following:\n\u00a9 G can be partitioned into 8k?(p +1) cliques Vi\neach of size n with edges between\n\u00a9 Gis {C...... Cp}-free\n@ The instance of Grip TILING is a yes-instance iff G has an\n\nindependent set of size 8k*(p + 1).\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {C,,...,Cp}-free graphs\n\nWe use a known reduction from Grip TiLiNG (known to be\nW[1]-hard) to INDEPENDENT Set on {Cy,....Cp}-free graphs\n\nthat gives us a graph G satisfying the following:\n\n# G can be partitioned into 8k2(p +1) cliques Vi\n\neach of size m with edges between the cliques.\n\nGhee\n\nThe instance of GRID TILING is a yes\n\nindependent set of size 8k2(p + 1).\n\nG has an\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {C,,...,Cp}-free graphs\n\nWe use a known reduction from Grip TiLiNG (known to be\nW[1}-hard) to INDEPENDENT Set on {Cy,....Cp}-free graphs\n\nthat gives us a graph G satisfying the following:\n\n# G can be partitioned into 8k2(p +1) cliques Vi\n\neach of size m with edges between the cliques.\n\nGree\n\nThe instance of Grip TILING is a yes\n\nindependent set of size 8k2(p + 1).\n\nG has an\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {C,,...,Cp}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[1}-hard) to INDEPENDENT Sev on {Cy,....Cp}-free graphs\nthat gives us a graph G satisfying the following:\n\n\u00a9 G can be partitioned into 8k2(p + 1) cliques Vi\neach of size m with edges between the cliques.\n* Gis{ G\n\nThe instance of GRID TILING is a yes-instance iff G has an\n\nindependent set of size 8k*(p + 1).\n\nNote that an independent set of size 82(p + 1) in G has to be",
    "Hardness on {C,,...,Cp}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[1]-hard) to INDEPENDENT Ser on {Cy,....Cp}-free graphs\n\nthat gives us a graph G satisfying the following:\n\n# G can be partitioned into 8k2(p +1) cliques Vi\n\neach of size m with edges between the cliques.\n\nGree\n\nThe instance of GRID TILING is a yes\n\nindependent set of size 8k2(p + 1).\n\nG has an\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {C,,..., Cp}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[1]-hard) to INDEPENDENT Ser on {Cy,....Cp}-free graphs\n\nthat gives us a graph G satisfying the following:\n\n# G can be partitioned into 8k2(p +1) cliques Vi\n\neach of size m with edges between the cliques.\n\nGree\n\nThe instance of Grip TILING is a yes\n\nindependent set of size 8k2(p + 1).\n\nG has an\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {C,,...,Cp}-free graphs\n\nWe use a known reduction from Grip TiLiNG (known to be\nW[1]-hard) to INDEPENDENT Ser on {Cy,....Cp}-free graphs\n\nthat gives us a graph G satisfying the following:\n\n# G can be partitioned into 8k2(p +1) cliques Vi\n\neach of size m with edges between the cliques.\n\nGree\n\nThe instance of GRID TILING is a yes\n\nindependent set of size 8k2(p + 1).\n\nG has an\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {C,,..., Cp}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[1]-hard) to INDEPENDENT Ser on {Cy,....Cp}-free graphs\n\nthat gives us a graph G satisfying the following:\n\n# G can be partitioned into 8k2(p +1) cliques Vi\n\neach of size m with edges between the cliques.\n\nGree\n\nThe instance of Grip TILING is a yes\n\nindependent set of size 8k2(p + 1).\n\nG has an\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {C,,..., Cp}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[1]-hard) to INDEPENDENT Ser on {Cy,....Cp}-free graphs\nthat gives us a graph G satisfying the following:\n\u00a9 G can be partitioned into 8k*(p + 1) cliques Vi\neach of size m with edges between the cliques.\nGis { G\n\n# The instance of Grip TILING is a yes-instance iff G has an\n\nindependent set of size 8k*(p + 1).\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {C,,..., Cp}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[1]-hard) to INDEPENDENT Ser on {Cy,....Cp}-free graphs\nthat gives us a graph G satisfying the following:\n\u00a9 G can be partitioned into 8k*(p + 1) cliques Vi\neach of size m with edges betweer\n\u00a9 Gis{ y}-free\n\n# The instance of Grip TILING is a yes-instance iff G has an\n\nindependent set of size 8k?(p + 1).\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "\u00ab\n\nCombinatorial reconfiguration",
    "Hardness on {C,,...,C,}-free graphs\n\nWe use a known reduction from Grip THLING (known to be\nW[il-hard) to INDEPENDENT Ser on {Ca,....Cp}-free graphs\nthat gives us a graph G satisfying the following:\n\u00a9 G can be partitioned into 8k*(p + 1) cliques V1\neach of size n with edges between\nGis { Cp}-free\n@ The instance of Grip THANG is a yes-instance iff G has an\n\nindependent set of size 8k?(p + 1).\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {C,,..., Cp}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[J]-hard) to INDEPENDENT Se on {C,.....Cp}-free graphs\nthat gives us a graph G satisfying the following:\n\u00a9 G can be partitioned into 8k*(p +1) cliques V4\neach of size n with edges between the cliques.\nGis Ghee\n# The instance of Grip TILING is a yes-instance iff G has an\n\nindependent set of size 8k?(p + 1).\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {C,,..., Cp}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[1]-hard) to INDEPENDENT Ser on {Cy,....Cp}-free graphs\n\nthat gives us a graph G satisfying the following:\n# G can be partitioned into 8k*(p + 1) cliques Vi\neach of size n with edges between the cliques.\nfree\n\n# The instance of Grip \u2018TILING is a yes-instance\n\nindependent set of size 8k*(p + 1).\n\nff G has an\n\nNote that an independent set of size 8k?(p +1) in G has to be",
    "Hardness on {C,,..., Cp}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[il-hard) to INDEPENDENT SET on {Ca,....Cp}-free graphs\nthat gives us a graph G satisfying the following:\n# G can be partitioned into 8k(p +1) cliques Vi\neach of size n with edges between the cliques.\n\u00a9Gis\n\nThe instance of Grip TILING is a yes-instance iff G has an\n\nindependent set of size 8k2(p + 1).\n\nNote that an independent set of size 8k2(p +1) in G has to be",
    "Hardness on {G, p}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[il-hard) to INDEPENDENT SET on {Cs,....Cp}-free graphs\nthat gives us a graph G satisfying the following:\n\n* G can be partitioned into 8k*(p + 1) cliques Vi\neach of size m with edges between the cliques.\nGis { p)-free.\n\n# The instance of Grip TILING is a yes-instance iff G has an\nindependent set of size 8k?(p + 1).\n\nNote that an independent set of size 8k(p + 1) in G has to be",
    "Hardness on {Gy p}-free graphs\n\nWe use a known reduction from Gri TILING (known to be\nW[i]-hard) to INDEPENDENT SEY on {Cs,....Cp}-free graphs\nthat gives us a graph G satisfying the following:\n\n\u00a9 G can be partitioned into 8k*(p + 1) cliques Vi\neach of size m with edges between the cliques.\nGis { Gp}-free.\n\n# The instance of GRiD TILING is a yes-instance iff G has an\nindependent set of size 8k*(p + 1).\n\nNote that an independent set of size 8k(p + 1) in G has to be",
    "Hardness on {C,,...,Cp}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[1]-hard) to INDEPENDENT Ser on {Cy,....Cp}-free graphs\n\nthat gives us a graph G satisfying the following:\n\u00a9 G can be partitioned into 8k\"(p + 1) cliques Vi\neach of size m with edges between the cliques.\n5\n# The instance of GRID TILING is a yes-instance\n\nindependent set of size 8k2(p + 1).\n\nVerz(pe1\n\nG has an\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {C,,..., Cp}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\n\nW[J]-hard) to INDEPENDENT SET on {Cq..... Cp}\nthat gives us a graph G satisfying the following:\n\u00a9 G can be partitioned into 8k*(p + 1) cliques V4\neach of size m with edges between the cliques.\n5\n\u00a9 The instance of GRID TILING is a yes-instance\nindependent set of size 8k?(p + 1).\n\nee graphs\n\nVewr(pe1\n\nG has an\n\nNote that an independent set of size 8k(p + 1) in G has to be",
    "Hardness on {C,,..., Cp}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[lJ-hard) to INDEPENDENT Se on {Cg.....Cp}-free graphs\n\nthat gives us a graph G satisfying the following:\n\u00a9 G can be partitioned into 8k\"(p + 1) cliques Vi\neach of size m with edges between the cliques.\nGis G\n\u00a9 The instance of GRID TILING is a yes-instance\n\nindependent set of size 8k2(p + 1).\n\nVewr(pe1\n\nG has an\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {C,,..., Cp}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\n\nW[J]-hard) to INDEPENDENT SET on {Cq..... Cp}\nthat gives us a graph G satisfying the following:\n\u00a9 G can be partitioned into 8k*(p + 1) cliques V4\neach of size m with edges between the cliques.\n5\n\u00a9 The instance of GRID TILING is a yes-instance\nindependent set of size 8k?(p + 1).\n\nee graphs\n\nVewr(pe1\n\nG has an\n\nNote that an independent set of size 8k(p + 1) in G has to be",
    "A familiar example: 15-puzzle",
    "Hardness on {C,,...,Cp}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\n\nW[1]-hard) to INDEPENDENT Ser on {Cy,.... Cp}\nthat gives us a graph G satisfying the following:\n\u00a9 G can be partitioned into 8k*(p + 1) cliques V4\neach of size m with edges between the cliques.\n5\n\u00a9 The instance of GRID TILING is a yes-instance\nindependent set of size 8k?(p + 1).\n\nee graphs\n\nVewr(pe1\n\nG has an\n\nNote that an independent set of size 8k(p + 1) in G has to be",
    "Hardness on {C,,...,Cp}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[1]-hard) to INDEPENDENT Ser on {Cy,....Cp}-free graphs\n\nthat gives us a graph G satisfying the following:\n\u00a9 G can be partitioned into 8k\"(p + 1) cliques Vi\neach of size m with edges between the cliques.\n5\n# The instance of GRID TILING is a yes-instance\n\nindependent set of size 8k2(p + 1).\n\nVerz(pe1\n\nG has an\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {C,,..., Cp}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\n\nW[J]-hard) to INDEPENDENT SET on {Cq..... Cp}\nthat gives us a graph G satisfying the following:\n\u00a9 G can be partitioned into 8k*(p + 1) cliques V4\neach of size m with edges between the cliques.\n5\n\u00a9 The instance of GRID TILING is a yes-instance\nindependent set of size 8k?(p + 1).\n\nee graphs\n\nVewr(pe1\n\nG has an\n\nNote that an independent set of size 8k(p + 1) in G has to be",
    "Hardness on {C,,..., Cp}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[lJ-hard) to INDEPENDENT Se on {Cg....,Cp}-free graphs\n\nthat gives us a graph G satisfying the following:\n\u00a9 G can be partitioned into 8k\"(p + 1) cliques Vi\neach of size m with edges between the cliques.\nGis G\n\u00a9 The instance of GRID TILING is a yes-instance\n\nindependent set of size 8k2(p + 1).\n\nVewr(pe1\n\nG has an\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {C,,..., Cp}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\n\nW[J]-hard) to INDEPENDENT SET on {Cq..... Cp}\nthat gives us a graph G satisfying the following:\n\u00a9 G can be partitioned into 8k*(p + 1) cliques V4\neach of size m with edges between the cliques.\n5\n\u00a9 The instance of GRID TILING is a yes-instance\nindependent set of size 8k?(p + 1).\n\nee graphs\n\nVewr(pe1\n\nG has an\n\nNote that an independent set of size 8k(p + 1) in G has to be",
    "Hardness on {C,,...,Cp}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[1]-hard) to INDEPENDENT Sev on {Cy,....Cp}-free graphs\n\nthat gives us a graph G satisfying the following:\n\u00a9 G can be partitioned into 8k*(p + 1) cliques V4\neach of size m with edges between the cliques.\n5\n\u00a9 The instance of GRID TILING is a yes-instance\nindependent set of size 8k?(p + 1).\n\nVewr(pe1\n\nG has an\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {C,,...,Cp}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[1]-hard) to INDEPENDENT Ser on {Cy,....Cp}-free graphs\n\nthat gives us a graph G satisfying the following:\n\u00a9 G can be partitioned into 8k\"(p + 1) cliques Vi\neach of size m with edges between the cliques.\n5\n# The instance of GRID TILING is a yes-instance\n\nindependent set of size 8k2(p + 1).\n\nVerr(pe1\n\nG has an\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {Gy p}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[il-hard) to INDEPENDENT SEY on {Ca,....Cp}-free graphs\nthat gives us a graph G satisfying the following:\n\n\u00a9 G can be partitioned into 8k*(p + 1) cliques V4\neach of size m with edges between the cliques.\n\u00a9 Gis (Gy....,Cp}-free\n\nThe instance of GRID \u2018TILING is a yes-instance iff G has an\n\nindependent set of size 8k\"(p + 1).\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {Gy p}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[il-hard) to INDEPENDENT SEY on {Ca,....Cp}-free graphs\nthat gives us a graph G satisfying the following:\n\n\u00a9 G can be partitioned into 8k*(p + 1) cliques V4\neach of size m with edges between the cliques.\n\u00a9 Gis (Gy....,Cp}-free\n\n# The instance of GRID TILING is a yes-instance iff G has an\n\nindependent set of size 8k\"(p + 1)\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {C,,...,Cp}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[J]-hard) to INDEPENDENT Se on {C,.....Cp}-free graphs\nthat gives us a graph G satisfying the following:\n\u00a9 G can be partitioned into 8k*(p +1) cliques V4\neach of size m with edges between the cliques.\n\u00a9 Gis (Gy... Cp}-free\n\u00a9 The instance of GRID TILING is a yes-instance iff G has an\n\nindependent set of size 8k\"(p + 1).\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "A familiar example: 15-puzzle\n\nhttps: //Lo",
    "Hardness on {Cj,...,C)}-free graphs\n\nWe use a known reduction from Grip THANG (kno\nWit[-hard) to INDEPENDENT SEI on {Ca,..-.Cp}-free graphs\n\nthat gives us a graph G satisfying the following:\n\n\u00a9 G can be partitioned into 8k?(p + 1) cliques Vi\neach of size n with edges between the cliques.\n\n* Gi Cp}-free\n\n# The instance of Grip THANG is a yes-instance iff G has an\nindependent set of size 8k*(p +1)\n\nNote that an independent set of size 8k2(p-+ 1) in G has to be",
    "Hardness on {Cj,...,C)}-free graphs\n\nWe use a known reduction from Gri TILING (kno\nWit[-hard) to INDEPENDENT SEI on {Ca,..-.Cp}-free graphs\n\nthat gives us a graph G satisfying the following:\n\n\u00a9 G can be partitioned into 8k?(p + 1) cliques Vi\neach of size n with edges between the cliques.\n\n* Gi Cp}-free\n\n# The instance of Grip THANG is a yes-instance iff G has an\nindependent set of size 8k*(p +1),\n\nNote that an independent set of size 8k2(p-+ 1) in G has to be",
    "Hardness on {C,,..., Cp}-free graphs\n\nWe use a known reduction from Grip TILING (know\nW[J]-hard) to INDEPENDENT SET on {Cq..... Cp}\nthat gives us a graph G satisfying the following:\n\n\u00a9 G can be partitioned into 8k\"(p + 1) cliques Vi\neach of size m with edges between the cliques.\n\u00a9 Gis {Cs,.... G}-free\n\n# The instance of Grip TILING is a yes-instance\n\nindependent set of size 8k2(p + 1).\n\nff G has an\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on { Cy. \u2018p}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\n\nW[J}-hard) to INDEPENDEN\u2019 SET on {Cq..... Cp}\nthat gives us a graph G satisfying the following:\n\u00a9 G can be partitioned into 8k*(p + 1) cliques Vi\neach of size m with edges between the cliques.\n\u00a9 Gis (Gy... Cp}-free\n\u00a9 The instance of Grip TILING is a yes-instance\n\nindependent set of size 8k*(p + 1).\n\nee graphs\n\nff G has an\n\nNote that an independent set of size 8k(p +1) in G has to be",
    "Hardness on {Gy p}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW{l]-hard) to INDEPENDENT Se on {C,....,Cp}-free graphs\nthat gives us a graph G satisfying the following:\n\n\u00a9 G can be partitioned into 8k?(p +1) cliques Vi\n\neach of size m with edges between the cliques.\n\n# The instance of Grip TILING is a yes-instance iff G has an\nindependent set of size 8k*(p + 1).\n\nNote that an independent set of size 8k(p + 1) in G has to be",
    "Hardness on {Gy p}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[1]-hard) to INDEPENDENT Ser on {Cy,....Cp}-free graphs\nthat gives us a graph G satisfying the following:\n\n\u00a9 G can be partitioned into 8k?(p +1) cliques Vi\n\neach of size m with edges between the cliques.\nCp}-free\n\u00a9 The instance of GRID TILING is a yes-instance iff G has an\nindependent set of size 8k?(p + 1).\n\nNote that an independent set of size 8k(p +1) in G has to be",
    "Hardness on {Gy p}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[1]-hard) to INDEPENDENT Ser on {Cy,....Cp}-free graphs\nthat gives us a graph G satisfying the following:\n\n\u00a9 G can be partitioned into 8k?(p +1) cliques Vi\n\neach of size m with edges between the cliques.\nCp}-free\n\u00a9 The instance of GRID \u2018TILING is a yes-instance iff G has an\nindependent set of size 8k?(p + 1).\n\nNote that an independent set of size 8k(p +1) in G has to be",
    "Hardness on {C,,...,C)}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\n\nW[1]-hard) to INDEPENDENT Ser on {Cy,....Cp}-free graphs\n\nthat gives us a graph G satisfying the following:\n\n\u00a9 G can be partitioned into 8k*(p +1) cliques V4\neach of size m with edges between the cliques.\n5 G Hee\n\n\u00a9 The instance of GRID TILING is a yes-instance\n\nindependent set of size 8k2(p + 1).\n\nff G has an\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {C,,...,C)}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\n\nW[1]-hard) to INDEPENDENT Ser on {Cy,....Cp}-free graphs\n\nthat gives us a graph G satisfying the following:\n\n\u00a9 G can be partitioned into 8k*(p +1) cliques V4\neach of size m with edges between the cliques.\n5 G Hee\n\n\u00a9 The instance of GRID TILING is a yes-instance\n\nindependent set of size 8k2(p + 1).\n\nff G has an\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {Gy p}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW{lJ-hard) to INDEPENDENT Se on {C,.....Cp}-free graphs\nthat gives us a graph G satisfying the following:\n\u00a9 G can be partitioned into 8k*(p +1) cliques V4\neach of size n with edges between the cliques.\n\u00a9 Gis{ Gree\n# The instance of GRiD TILING is a yes-instance iff G has an\n\nindependent set of size 8k*(p +1)\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "A familiar example: 15-puzzle\n\nhttps: //Lorecioni. github een-puzzle-gi",
    "Hardness on {C,,...,C)}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\n\nW[1]-hard) to INDEPENDENT Ser on {Cy,....Cp}-free graphs\n\nthat gives us a graph G satisfying the following:\n\n\u00a9 G can be partitioned into 8k*(p +1) cliques V4\neach of size m with edges between the cliques.\n5 G Hee\n\n\u00a9 The instance of GRID TILING is a yes-instance\n\nindependent set of size 8k2(p + 1).\n\nff G has an\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {C,,...,C)}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[1}-hard) to INDEPENDENT Ser on {Cy,....Cp}-free graphs\n\nthat gives us a graph G satisfying the following:\n\n\u00a9 G can be partitioned into 8k*(p +1) cliques V4\neach of size m with edges between the cliques.\n5 G Hee\n\n\u00a9 The instance of GRID TILING is a yes-instance\nindependent set of size 8k?(p + 1).\n\nff G has an\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {C,,...,C)}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\n\nW[1]-hard) to INDEPENDENT Ser on {Cy,....Cp}-free graphs\n\nthat gives us a graph G satisfying the following:\n\n\u00a9 G can be partitioned into 8k*(p +1) cliques V4\neach of size m with edges between the cliques.\n5 G Hee\n\n\u00a9 The instance of GRID TILING is a yes-instance\n\nindependent set of size 8k2(p + 1).\n\nff G has an\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {C,,...,C)}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[1}-hard) to INDEPENDENT Ser on {Cy,....Cp}-free graphs\n\nthat gives us a graph G satisfying the following:\n\n\u00a9 G can be partitioned into 8k*(p +1) cliques V4\neach of size m with edges between the cliques.\n5 G Hee\n\n\u00a9 The instance of GRID TILING is a yes-instance\nindependent set of size 8k?(p + 1).\n\nff G has an\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {Gy p}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\n\nW[1]-hard) to INDEPENDENT Ser on {Cy,....Cp}-free graphs\n\nthat gives us a graph G satisfying the following:\n\u00a9 G can be partitioned into 8k?(p +1) cliques Vi\neach of size n with edges between the cliques.\nGis G\n# The instance of GRiD TILING is a yes-instance iff G has an\n\nindependent set of size 8k*(p +1)\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {C,,...,C)}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[1]-hard) to INDEPENDENT Ser on {Cy,....Cp}-free graphs\nthat gives us a graph G satisfying the following:\n\n\u00a9 G can be partitioned into 8k?(p + 1) cliques Vi\neach of size n with edges between tl\n\u00a9 Gis {Cs,....Cp}-free:\n# The instance of GRiD TILING is a yes-instance iff G has an\n\nindependent set of size 8k*(p + 1).\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {C,,...,C)}-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[1]-hard) to INDEPENDENT Ser on {Cy,....Cp}-free graphs\nthat gives us a graph G satisfying the following:\n\n\u00a9 G can be partitioned into 8k?(p + 1) cliques Vi\neach of Size n with edges between t\n\u00a9 Gis {Cs,....Cp}-free:\n# The instance of GRID TILING is a yes-instance iff G has an\n\nindependent set of size 8k*(p + 1).\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {G,,..., Cp}-free graphs\n\nFirst attempt at a proof:\n\n0000\n\n\u00a9 We do not introduce any of the forbidden cycles.\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {G,,..., Cp}-free graphs\n\nFirst attempt at a proof:\n\n0000\n\n\u00a9 We do not introduce any of the forbidden cycles.\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {G,,..., Cp}-free graphs\n\nFirst attempt at a proof\n\n00-00\n\n\u00a9 We do not introduce any of the forbidden cycles.\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "A familiar example: 15-puzzle\n\nhttps: //Lorecioni..github een-puzzle-gi",
    "Hardness on {Cy,..., Cp}-free graphs\n\nFirst attempt at a proof\n\n00-00\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {Cy,..., Cp}-free graphs\n\nFirst attempt at a proof\n\n00-00\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {G,,..., C)}-free graphs\n\nFirst attempt at a proof\n\n00-00\n\nWe do not introduce any of the forbidden cycles.\n# But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {G,,..., C)}-free graphs\n\nFirst attempt at a proof *\n\n00-00\n\nWe do not introduce any of the forbidden cycles.\n# But we cannot guarantee that all tokens will be on the cliques,\n\nat the same time",
    "Hardness on {G,,..., C)}-free graphs\n\nFirst attempt at a proof *\n\n00-00\n\nWe do not introduce any of the forbidden cycles.\n# But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (a3368@aub.edu.lb)\n\n\u2018American Univ f Beirut",
    "Hardness on {G,,..., C)}-free graphs\n\nFirst attempt at a proof\n\n00-00\n\nWe do not introduce any of the forbidden cycles.\n# But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {G,,..., C)}-free graphs\n\nFirst attempt at a proof\n\n0-000\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {C;,..-, Cp}-free graphs\n\nFirst attempt at a proof:\n\n00-00\n\nWe do not introduce any of the forbidden cycles.\n\u00a9 But we cannot guarantee that all tokens will be on the cliques,\n\nat the same time",
    "Hardness on {C;,..-,Cp}-free graphs\n\nFirst attempt at a proof\n\n00-00\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {C;,..-, Cp}-free graphs\n\nFirst attempt at a proof\n\n0000\n\n# We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "A familiar example: 15-puzzle",
    "Hardness on {C,,..., Cp}-free graphs\n\nFirst attempt at a proof:\n\n6006\n\n# We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {C;,..., Cp}-free graphs\n\nFirst attempt at a proof\n\n0000\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {C;,...,Cp}-free graphs\n\nFirst attempt at a proof\n\n0000\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {C;,...,Cp}-free graphs\n\nFirst attempt at a proof\n\n0000\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {C;,...,Cp}-free graphs\n\nFirst attempt at a proof\n\n6000.\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {C,,...,Cp}-free graphs\n\nFirst attempt at a proof\n\n6000.\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {C,,...,Cp}-free graphs\n\nFirst attempt at a proof\n\n6000.\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {C,,...,C)}-free graphs\n\nFirst attempt at a proof:\n\n6000.\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {Cy,..., Cp}-free graphs\n\nFirst attempt at a proof\n\n6000 -\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {Cy,..., Cp}-free graphs\n\nFirst attempt at a proof\n\n6000.\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "A familiar example: 15-puzzle\n\nhttps: //Lo github. io/fi",
    "Hardness on {C,,..., Cp}-free graphs\n\nFirst attempt at a proof\n\n6000.\n\n# We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {Cy,..., Cp}-free graphs\n\nFirst attempt at a proof\n\n6000.\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {Cy,..., Cp}-free graphs\n\nFirst attempt at a proof\n\n6000.\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {Cy,..., Cp}-free graphs\n\nFirst attempt at a proof\n\n6000.\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {Cy,..., Cp}-free graphs\n\nFirst attempt at a proof\n\n6000.\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {Cy,..., Cp}-free graphs\n\nFirst attempt at a proof\n\n6000.\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {G,,..., C)}-free graphs\n\nFirst attempt at a proof\n\n6000.\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {G,,..., C)}-free graphs\n\nFirst attempt at a proof\n\n6000.\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {C;,...,C)}-free graphs\n\nFirst attempt at a proof\n\n6000 -\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {C,,...,C)}-free graphs\n\nFirst attempt at a proof\n\n6000 -\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "A familiar example: 15-puzzle\n\nhttps: //Lo github. io/fi",
    "Hardness on {C,,...,C)}-free graphs\n\nFirst attempt at a proof\n\n6000 -\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {C,,..., C)}-free graphs\n\nFirst attempt at a proof\n\n6000 -\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {C,,..., C)}-free graphs\n\nFirst attempt at a proof\n\n0000\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {Cj,...,Cp}-free graphs\n\nFirst attempt at a proof\n\n000\u00a2\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {Cj,...,Cp}-free graphs\n\nFirst attempt at a proof:\n\n0000\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {Cj,...,C)}-free graphs\n\nFirst attempt at a proof:\n\n0000\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {G,,..., C)}-free graphs\n\nFirst attempt at a proof\n\n0000\n\nWe do not introduce any of the forbidden cycles.\n# But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {G,,..., C)}-free graphs\n\nFirst attempt at a proof\n\n0000\n\nWe do not introduce any of the forbidden cycles.\n# But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {Cj,...,C>}-free graphs\n\nFirst attempt at a proof:\n\n0000\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {Cj,...,C)}-free graphs\n\nFirst attempt at a proof:\n\n0000\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "A familiar example: 15-puzzle\n\nhttps: //Lo github. io/fi",
    "Hardness on {Cj,...,C)}-free graphs\n\nFirst attempt at a proof:\n\n0000\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {Cj,...,C)}-free graphs\n\nFirst attempt at a proof:\n\n0000\n\nWe do not introduce any of the forbidden cycles.\n# But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {(j,...,C)}-free graphs\n\nFirst attempt at a proof:\n\n0000.\n\nWe do not introduce any of the forbidden cycles.\n\u00a9 But we cannot guarantee that all tokens will be on the cliques,\n\nat the same time",
    "Hardness on {Cy,..., C)}-free graphs\n\nFirst attempt at a proof:\n\n0000.\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {G,,..., C)}-free graphs\n\nFirst attempt at a proof\n\n0000\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {G,,..., Cp}-free graphs\n\nFirst attempt at a proof\n\n0000\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {C,,...,C)}-free graphs\n\nFirst attempt at a proof:\n\n0000\n\nWe do not introduce any of the forbidden cycles.\n# But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {C,,...,Cp}-free graphs\n\nFirst attempt at a proof\n\n00-00\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {C;,...,Cp}-free graphs\n\nFirst attempt at a proof\n\n0000\u201d\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {C,,..., Cp}-free graphs\n\nFirst attempt at a proof\n\n00-00\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "A familiar example: 15-puzzle\n\nhttps: //Lorecioni.github een~puzzle-gi",
    "Hardness on {C,,..., Cp}-free graphs\n\nSecond attempt at a proof\n\n(O00\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {C,,..., Cp}-free graphs\n\nSecond attempt at a proof\n\n(00\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {C,,..., C)}-free graphs\n\nSecond attempt at a proof\n\n(00\u00b0\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {C,,..., C)}-free graphs\n\nSecond attempt at a proof\n\n(00\u00b0\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {C,,...,Cp}-free graphs\n\nSecond attempt at a proof\n\n0000\n\nWe guarantee that all tokens will be on the cliques at the\nsame time\n\nBut now we might have introduced some forbidden cycles",
    "Hardness on {C,,...,Cp}-free graphs\n\nSecond attempt at a proof\n\n(00\u00b0\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {G,,..., C)}-free graphs\n\nSecond attempt at a proof\n\n5000:\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {G,,..., C)}-free graphs\n\nSecond attempt at a proof\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {G,,..., C)}-free graphs\n\nSecond attempt at a proof\n\n5000:\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {G,,..., C)}-free graphs\n\nSecond attempt at a proof\n\n6000:\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "A familiar example: 15-puzzle\n\nhttps: //Lorecioni. github",
    "Hardness on {G,,..., C)}-free graphs\n\nSecond attempt at a proof\n\n6006:\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {Cj,...,C)}-free graphs\n\nSecond attempt at a proof\n\n6006:\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {G,,..., C)}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {G,,..., Cp}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {Cy,..., C)}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introdu forbidden cycles.",
    "Hardness on {C,,..., C)}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u2018\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introdu forbidden cycles.",
    "Hardness on {G,,..., C)}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u2018\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {G,,..., C)}-free graphs\n\nSecond attempt at a proof\n\n6006:\n\n\u2018\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {G,,..., C)}-free graphs\n\nSecond attempt at a proof\n\n6006:\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {G,,..., Cp}-free graphs\n\nSecond attempt at a proof\n\n5000:\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "A familiar example: 15-puzzle\n\nhttps: //L puzzle-game/",
    "Hardness on {G,,..., C)}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {G,,..., Cp}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {Cj,...,C)}-free graphs\n\nSecond attempt at a proof\n\n000 0>\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden",
    "Hardness on {Cj,...,C)}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden",
    "Hardness on {Cj,...,Cp}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden",
    "Hardness on {Cj,...,C)}-free graphs\n\nSecond attempt at a proof\n\n000 0>\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden",
    "Hardness on {Cj,...,C)}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a2 But now we might have introduced some forbidden",
    "Hardness on {Cj,...,C)}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a2 But now we might have introduced some forbidden",
    "Hardness on {Cj,...,C)}-free graphs\n\nSecond attempt at a proof\n\n00002\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden",
    "Hardness on {Cj,...,Cp}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden",
    "A familiar example: 15-puzzle\n\nhttps: //L github. io/fit",
    "Hardness on {Cj,...,C)}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden",
    "Hardness on {Cj,...,C)}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\nBut now we might have introduced some forbidden",
    "Hardness on {Cj,...,C)}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden",
    "Hardness on {Cj,...,C>}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden",
    "Hardness on {Cj,...,Cp}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden",
    "Hardness on {Cj,...,C)}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden",
    "Hardness on {Cj,...,C)}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\nBut now we might have introduced some forbidden",
    "Hardness on {Cj,...,Cp}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u2018\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {G,,..., C)}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u2018\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {Cj,...,Cp}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "A familiar example: 15-puzzle\n\nhttps: //L github. io/fit",
    "Hardness on {C,,..., C)}-free graphs\n\nSecond attempt at a proof\n\nO00\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden",
    "Hardness on {Cy,..., Cp}-free graphs\n\nSecond attempt at a proof\n\nO00\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\nBut now we might have introduced some forbidden",
    "Hardness on {(j,...,C)}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u2018\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {(j,...,Cp}-free graphs\n\nSecond attempt at a proof\n\n0000:\n\n\u2018\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {G,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\nWe also guarantee that no forbidden cycles are introduced.",
    "Hardness on {G,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a9 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {G,,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a9 We also guarantee that no forbidden cycles are introduced",
    "Hardness on {C,,...,Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {G,,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {G,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "A familiar example: 15-puzzle\n\nhttps: //1",
    "Hardness on {G,,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {G,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {C,,...,C)}-free graphs\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C,,..-,C)}-free graphs\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {C,,...,C)}-free graphs\n\nSecond attempt at a proof\n\n6006\n\n\u2018\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mou:\nAmerican Univ\n\nid (2a368@aub.edu.lb)\nf Beirut",
    "Hardness on {C,,...,C)}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {C,,...,C)}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {C,,...,C)}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {C,,..., Cp}-free graphs\n\nSecond attempt at a proof\n\n5006\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden",
    "Hardness on {Cj,...,C)}-free graphs\n\nSecond attempt at a proof\n\n5006\n\n\u2018\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a2 But now we might have introduced some forbidden",
    "A familiar example: 15-puzzle\n\nhttps: //1",
    "Hardness on {C,,...,C)}-free graphs\n\nSecond attempt at a proof\n\n0000:\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {C,,...,C)}-free graphs\n\nSecond attempt at a proof\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {C;,...,C)}-free graphs\n\nSecond attempt at a proof\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a2 But now we might have introduced some forbidden cycles.",
    "Hardness on {C,,...,C)}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {C,,...,C)}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {C,,...,C)}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {C,,...,C)}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {C,,...,C)}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {C,,...,Cp}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {C,,...,C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a9 We also guarantee that no forbidden cycles are introduced.",
    "A familiar example: 15-puzzle",
    "Hardness on {C,,...,Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\nWe also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C,,...,Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C;,...,Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {C,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a9 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C,,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a9 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C,,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u2018\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a9 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C;,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\nWe also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C;,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\nWe also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C,,...,Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a2 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C,,...,C,}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced.",
    "A familiar example: 15-puzzle\n\nhttps: //Lorecioni. github. io/fif!",
    "FPT on {G, G}-free graphs\n\nClass TS TW\nGi}-free graphs Warr Whil-hard\nOpen\n\nBiparte Ade FT (CA\" Kemal) FT (4A Berna)\n\nTheorem\nLet I =(G.S. Tk) be an instance of TOKEN JUMPING, |\n\nHW NclSU T], and let J denote the graph induced by Nc[SU T]\nIF H is e-sparse (number of edges in G is at most 1 0), and J is\n\n{Ci Ca}-free then T admits a kernel with O(K + k*\"/\") verti",
    "FPT on {G, G}-free graphs\n\nClass\nGi}-free graphs\n\nFPT cernel)\n\nTheorem\n\nH=G\u2014Ne[SUT] denote the graph induced by\nIFH is -sparse G is at most 0), and J is",
    "FPT on {G, G}-free graphs\n\nClass iz)\nGi}-free graphs\n\nTheorem\n\nH=G\u2014Nc[SUT], and let J denote the graph induced by\nIF H is e-sparse (number of e G is at most 0), and J is\n\n{Cs Ca)-free then T admits a kernel with O(K + k*\"/*) verti",
    "FPT on {C3, C;}-free graphs\n\nClass Ts\nwoth\n\nOpen\n\nWired\n\nGi}-free graphs\n\nFPT (O\u00b0 kernel\n\nFPT\n\nTheorem\nLet I =(G.$,T,) be an ins.\nH=G\u2014Ne(SUT)\nIH is\n\nsparse (number of edges in G\n\n{Ca Ca)-free then T admits a kernel\n\nTd\nWhil-hard\n\u201cOpen\nFPT (KA kernel)\n\nith Ok",
    "FPT on {C3, C;}-free graphs\n\nClass TS Td\nGi}-free graphs wih \u201cWhil-hard\n\nOpen\n\nTheorem\n\nLet I =(G.$, T,k) be an instance of TOKEN\n\nH=G\u2014No[SUT], and let J denote the graph induced by\n\nIF H is e-sparse (number of edges in G is at most 1 0), and J is\n\n{Ca Ca}-free then T admits a kernel with O(K? + k!/*) vertice",
    "FPT on {C3, C;}-free graphs\n\nClass TS Td\nGi}-free graphs wih \u201cWhil-hard\n\nOpen\n\nFPR(K\n\nTheorem\nLet I =(G.$, T,k) be an instance of TOKEN\n\nH=G\u2014No[SUT], and let J denote the graph induced by\nIF H is e-sparse (number of edges in G is at most 1 0), and J is\n\n{Cs Ca}-free then T admits a kernel with O(K + k*/*) vertice",
    "FPT on {G, G}-free graphs\n\nClass\n\nGiles\n\nle\nH=6\n\nIF H is e-sparse (rn\n\n7s\nWik\n\nOpen\nWhl-hard\n\nFPT (Khan\n\nnd let J denote the graph i\n\nadges in G is at most 1\n\n{Gi.Cal-free then admits a kernel with O(K? +k\n\n)_FPT\n\nKA kernel)",
    "FPT on {G, G}-free graphs\n\nTs\nwilh\nOpen\n\npartite graph Whilhard\nBipartite A-degree graphs FPT (\u00b0\u00b0 kemel) _FPT\n\nFPT (kK ken\n\nTheorem\n\nLet I =(6 be an instance of TOKEN JUMPING;\nH=6 T], and let J denote the graph induced by\nIF H is e-sparse (number of edges in G is at most 1\n\n{Cs Ca}-free then T admits a kernel with O(K? + k",
    "FPT on {G;, C;}-free graphs\n\nClass Ts iz)\nGaJ-free graphs Wil-hard Wiil-hard\n\n\u00a2 free graphs Open PT (K* kernel]\n\nBipartite graphs Wiilhard Open\nBipartite A-degree a FPT (\u20acA\" kemel) FPT (KA kernel)\n\nTheorem\nH=G\u2014No[SUT], and let J denote the graph induced by No\nIF H is e-sparse (number of edges in G is at most 1 0), and J is\n\n{Cs Ca} free ther J with O(K ) vertices",
    "FPT on {G, G}-free graphs\n\nClass \u2018TS iz)\nGaj-free graphs Wil-hard Wiil-hard\n\nG. Gi}-free graphs Open PT (K kernel\nBipartite graphs Wiil-hard Open\nBipart ee FPT ( A\" kernel\n\nTheorem\n\nLet I =(G.S. T,k) be an instance of TOKEN\n\nH=G\u2014Nc[SUT], and let J denote the graph induced by No\n\nIF H is e-sparse (number of edges in G is at most 1 0), and J is\n\n{Cs Ca}-free then T admits a kernel with O(K + k!/*) vertices",
    "A familiar example: 15-puzzle",
    "FPT on {G, G}-free graphs\n\nClass i iz)\nGi-free granhs. Wil-hard Wiil-hard\n\nG. Gi}-free graphs Open PT (ik kernel\n\nBipartite graphs Whil-hard Open\nBipartite A-degree graphs FPT (\u00b0\u00b0 kernel) PPT (KA kernel)\n\nTheorem\nLet I = (6.5, T,k) be an instance of TOKEN JUMPING, |\n\nH=G\u2014No[SUT], and let J denote the graph induced by Nc\nIF H is e-sparse (number of edges in G is at most 1 0), and J is\n\n{Cs Ca}-free then T admits a kernel with O(K? +k\") vertices",
    "FPT on {C3, C;}-free graphs\n\nClass Ss iz)\nGaj-free graphs Wiil-h Whil-hard\n\nG. G)-free graphs Open\u2019 PT (ke kernel)\n\nBipartite graphs Wiil-hard Open\nBipartite A-degree gf FPT (7\u00b0 kemel) FPT (KA k\n\nTheorem\n\nLet I =(G.5, T, k) be an instance of TOKEN\nH=G\u2014No[SUT], and let J denote the graph induced by No[S UT]\nIF H is c-sparse (number of edges in G is at most 1 0), and J is\n{Cs C}-free then T admits a kernel with O(K + k",
    "FPT on {C3, C;}-free graphs\n\nClass Ss iz)\nGaj-free graphs Wiil-h Whil-hard\n\nG. G)-free graphs Open\u2019 PT (ke kernel)\n\nBipartite graphs Wiil-hard Open\nBipartite A-degree graphs _FPT (K\u00b0A\u00b0 kemel) PPT (KA\n\nBipart 2 graphs F\n\nTheorem\n\nLet I =(G.5,T, k) be an instance of TOKEN 4}\nH=G\u2014No[SUT], and let J denote the graph induced by No[S UT]\nIF H is c-sparse (number of edges in G is at most 1 0), and J is\n{Cs C}-free then T admits a kernel with O(K + k",
    "FPT on {C3, C;}-free graphs\n\nClass TS iz)\nGaj-free graphs Wilh Whil-hard\nG.. G}-free graphs Open PT (K kernel\n\nBipartite graphs Wiil-hard Open\nBipartite A-degree graphs _FPT (KA kemel) FPT (KA k\n\nBipart 2 graphs F\n\nTheorem\nLet I = (6.5, T,k) be an instance of TOKEN J}\n\nH=G\u2014No[SUT], and let J denote the graph induced by No[S UT]\nIF H is e-sparse (number of edges in G is at most 1 0), and J is\n\n{Cs Ca} free then T admits a kernel with O(K + k!*\u2122/\") vertices.",
    "FPT on {(G, G}-free graphs\n\nClass Ts\n\nGi-free graohs. Whil-h\n\nG., G}-free graphs Open\n\nBipartite graphs Whil-hard\nBipartite A-degree graphs FPT (7\u00b0 kernel) FP\n\nTheorem\nLet I =(G.5, T, k) be an instance of TOKEN JUMPIN\n\nH=G\u2014No[SUT], and let J denote the graph induced by No[S\n\nIF H is e-sparse (number of edges in G is at most 1\n\n{Cs Ca}-free then T admits a kernel with O(K? + k\n\n7),",
    "FPT on {(G, G}-free graphs\n\nClass Ts\n\nGi-free graohs. Wilh\n\nG., G}-free graphs Open\nBipartite graphs Whil-hard\n\nBipartite A-degree graphs _FPT (KA\u00b0 kernel) FP\n\nTheorem\nLet I =(G.5, T, k) be an instance of TOKEN JUMPIN\n\nH=G\u2014No[SUT], and let J denote the graph induced by No[S\n\nIF H is -sparse (number of edges in G is at most 1\n\n{Cs Ca}-free then T admits a kernel with O(K? + k\n\n7)",
    "FPT on {G, G}-free graphs\n\nClass Ts in\nGa}-free graphs Wilh Whil-hard\n\nGG }-free graphs Open FPT (A kernel\n\nBipartite graphs Wiilhard Open\n\nBipartite A-degree graphs PT (K\u00b0A\u00b0 kernel\n\nTheorem\nLet I =(G.5, Tk) be an instance of ToKe\n\nH=G\u2014No[SUT], and let J denote the graph induced by No[S UT]\nIF H is -sparse (number of edges in G is at most 1 0), and J is\n\n{Gs. Ca} -free then T admits a kernel with O(K + k!*\u2122/*) vertices",
    "FPT on {(G, G}-free graphs\n\nClass Ts TW\n\nGal-free graphs Wilh Wiil-hard\n\nG. G}-free graphs Open FPT (4? kernel\nBipartite graphs Whil-hard Open\n\nBipartite A-degree graphs FPT (KA kernel)\n\nTheorem\nLet I = (6.5, T,k) be an instance of TOKEN\n\nH=G\u2014Nc[SUT], and let J denote the graph induced by No[S UT]\nIF H is e-sparse (number of edges in G is at most 1 0), and J is\n\n{Ca Ca}-free then T admits a kernel with O(K? +k\") vertices.",
    "FPT on {C3, C;}-free graphs\n\nClass TS TW\nGi}-feee graphs Wil-har ~Wiif-har\u00e9\n\nOpen\n\nBipartite A-degree a FPT (K2A\u00b0 kernel) PPT (KA kernel)\n\nFP\n\nTheorem\nH=G\u2014No[SUT], and let J denote the graph induced by No[S UT]\nIF H is e-sparse (number of edges in G is at most 1 0), and J is\n\n{Ca Ca}-free then Z admits a kernel with O(K? +k\") vertices.",
    "FPT on {C3, C;}-free graphs\n\nClass Ts\nGi}-free graphs Warr\nOpen\n\nBipartite graphs Whil-hard\n\u201cBipartite A-degree a FPT (ea\n\nTheorem\nLet I =(G.$, T,k) be an instance of TOKEN 4}\n\nH=G\u2014No[SUT], and let J denote the graph induced by No[S\n\nIF H is -sparse (number of edges in G is at most 1 0), and J is\n\n{Cs C}-free then T admits a kernel with O(K + k!\u2122/*) vertices",
    "A familiar example: 15-puzzle",
    "FPT on {C3, C;}-free graphs\n\nClass Ts\nGi}-free graphs Warr\nOpen\n\nBipartite graph Whilhard\n\u201cBipartite A-degre FPT (\"heme\n\nTheorem\nLet I =(G.S, T,k) be an instance of TOKEN\n\nH=G\u2014No[SUT], and let J denote the graph induced by No[S\n\nIF H is e-sparse (number of edges in G is at most 1 0), and J is\n\n{Cs Ca}-free then T admits a kernel with O(K + k!\u2122/*) vertices",
    "FPT on {G, G}-free graphs\n\nClass Ts Td\nGi}-free graphs war Whithard\n. G-free Open _FPT (ek\n\nTheorem\nLet I =(G.S, T,k) be an instance of TOKEN JUMPING, |\nH=G\u2014No[SUT], and let J denote the graph induced by NolS\n\nIF H is e-sparse (number of edges in G is at most n 0), and J is\n\n{Ca Ca}-free then Z admits a kernel with O(K? + k1\"/*) vertices.",
    "FPT on {G, G}-free graphs\n\nClass TS iz]\n\nGi}-free graphs wiih Whithard\n. Gre Open _FPT (ek\ngraphs Wiil-hard _ Open\n\nBipa\nBipantite A-de phs_FPT (K\u00b0A\" kernel) PPT (KA kernel)\n\nTheorem,\n\n{Ca Ca}-free then Z admits a kernel with O(k ) vertices",
    "FPT on {G, G}-free graphs\n\nClass iz]\nGi}-free graphs Whithard\nGre Open \u201cPPT (ek\n\nTheorem\nLet I =(G.S, T,k) be an instance of TOKEN JUMPING, |\nH=G\u2014No[SUT], and let J denote the graph induced by No|S\n\nIF H is e-sparse (number of edges in G is at most 0), and J is\n\n{C:. Ca}-free then T admits a kernel with O(k ) vertices.",
    "FPT on {G, G}-free graphs\n\nClass TS TW\nGi}-free graphs Warr _Whil-hard\n\nBipa gr FPT (k\u00b0A\u00b0 kernel) FPT (kA kernel)\n\nkernel)\n\nTheorem\nLet I = (6.5, T,k) be an instance of TOKEN JUMPING, |\n\nH=G\u2014Nc[SUT], and let J denote the graph induced by\nIF H is e-sparse (number of edges in G is at mast 1\n\n{Ca Ca)-free then T admits a kernel with O(K? + k",
    "FPT on {G, G}-free graphs\n\nClass TS TW\n\u201c1Gi free graphs Whirh: \u201cWhilchard\n\nBipartite grap Whif-hard pen\nBipartite A-degree graphs FPT (\u00b0\u00b0 kemel) PPT (KA kernel)\n\nTheorem\nLet I = (6.5, T,k) be an instance of TOKEN JUMPING, |\n\nH=G\u2014Nc[SUT], and let J denote the graph induced by\nIF H is -sparse (number of edges in G is at most 1\n\n{Ca. Ca}-free then T admits a kernel with O(K + k!/\") vertice",
    "FPT on {G, G}-free graphs\n\nClass TS\n\nGi)-fee graphs Wik\n\nTheorem\nH=G\u2014No[SUT], and let J denote the graph i\n\n{Cs Ca} free then T admits a kernel with O(K +k\") vertice",
    "FPT on {G, G}-free graphs\n\nClass\n1G. ree \u00a7 Open\nBipar Wil-hard\n\nTheorem\n\nH=G\u2014No[SUT], and let J denote the graph induced by No[S\n\n{Ca Ca}-free then T admits a kernel with O(K? +k\") verte",
    "FPT on {G, G}-free graphs\n\nClass\n1G. ree Open\nBipori Wired\n\nTheorem\n\nH=G\u2014No[SUT], and let J denote the graph induced by No[S\n\nIF H is e-sparse (number of edges in G is at most 1 0), and J is\n\n{Cs Ca} -free then T admits a kernel with O(K +k\") vertice",
    "FPT on {G, G}-free graphs\n\nClass TS\nGi}: free graphs Wik\n[ Open\n\nBipartte B-degree graphs FPT (KA\" Feral\n\nTheorem\nLet I = (6.5, T,k) be an instance of\nH=G\u2014No[SU T], and let J denote the graph induced by\n\nIF H is e-sparse (number of e G is at most 0), and J is\n\n{Cs, Ca)-free then T admits a kernel with O(K +k\") vertices",
    "A familiar example: 15-puzzle\n\nhttps: //Lorecioni. github. io/fif!",
    "FPT on { C3, C;}-free graphs\n\nClass TS\nGi}-free graphs Wark\n< Open\n\nBipartite A-degre FPT (A\" kernel\n\nTheorem\nLet I =(G.S, Tk) be an instance of ToKe\n\nH=G\u2014No[SUT], and let J denote the graph induced by\nIF H is e-sparse (number of edges in G is at most 1 0), and J is\n\n{Ca Ca} free then cere! with O(k ) vertices.",
    "FPT on { C3, C;}-free graphs\n\nClass TS\nGi}-free graphs Whrk\nc Open\n\nBipartite A-degre FPT (A\" kernel\n\nTheorem\n\nLet I = (6.5, T,k) be an instance of TOKEN\nH=G\u2014No[SUT], and let J denote the graph induced by\nIF H is -sparse (number of edges in G is at most 1 0), and J is\n\n{Ca Ca}-free then cere! with O(k ) vertices.",
    "FPT on {C3, C;}-free graphs\n\nClass TS\nGi}-free graphs Whil-hard\n\nOpen\nWhil-hard\nBipartite A-degree graphs _ FPT (K7A\u00b0 kernel) _FPT (KA kernel)\n\nTheorem\nH=G\u2014Nc[SUT], and let J denote the graph induced\nIF H is e-sparse (numb G is at most a 0), and J is\n\n{Cs Ca}-free then T admits a kernel with O(K +k\") vertices",
    "FPT on {C3, C;}-free graphs\n\nClass TS\nGi}-free graphs Whil-hard\n\nBipartte A-degree graphs _ FPT (J \u00b0 kere\n\nTheorem\nH=G\u2014Nc[SUT], and let J denote the graph induced by\nIF H is e-sparse (rn G is at most a 0), and J is\n\n{Ca Ca}-free then T admits a kernel with O(K? +k\") vertices",
    "FPT on { C3, C;}-free graphs\n\nClass TS Ts\nGi}-free graphs Whirh: ~Wifi-hard\n\nOpen\nWhi}tard\nFPT (I\u00b0A\" Kemal) RPT (kA fer)\n\nTheorem\nLet I =(G.S, Tk) be an instance of\n\nH=G\u2014No[SUT], and let J denote the graph induced by No[SU T]\nIF H is e-sparse (number of edges in G is at most 1 0), and J is\n\n{Cs C}-free then T admits a kernel with O(K + k!*\u2122/*) vertices",
    "FPT on {(, C;}-free graphs\n\nClass TS\nCi}-free graphs wih\n\nOpen\nWhiF-hard\n\nTheorem\nLet I =(G.5, Tk) be an instance of\n\nH=G\u2014No[SUT], and let J denote the graph induced by No[S UT]\nIF H is e-sparse (number of edges in G is at most 1 0), and J is\n\n{Cs Ci}-free then T admits a kernel with O(K +k\") vertices.",
    "FPT on { (3, C;}-free graphs\n\nClass TS\nCi-free graphs wih\n\nOpen\nWhi}tard\nBiparite Adear FPT (A kernel) FPT (Kd Formal)\n\nTheorem\nLet I= (6.5, T,) be an instance of\n\nH=G\u2014No[SUT], and let J denote the graph induced by No[S UT]\nIF H is e-sparse (number of edges in G is at most 1 0), and J is\n\n{Cs Ca}-free then T admits a kernel with O(K + k!*\u2122/*) vertices.",
    "FPT on {C3, C;}-free graphs\n\nClass TS Ty\n\n\u201cWirtard\n\nGi}-free graphs wilh\n\n= Open\nBipartite grap Whil-hard\nBipartite A-degree graphs FPT (K\u00b0A\u00b0 kernel\n\nTheorem\nLet I =(G.S, T,k) be an instance of\n\nH=G\u2014No[SUT], and let J denote the graph induced by No[SU T]\nIF H is e-sparse (number of edges in G is at most 1 0), and J is\n\n{Cs Ca}-free then T admits a kernel with O(K + k!*\u2122/*) vertices.",
    "FPT on {(3, C;}-free graphs\n\nChis s ALL\n\u201cWhi\n\nGi}-free graphs wih\n\n= Open\nBipartite grap Whil-hard\nBipartite A-degre 13 _FPT (A kernel\n\nTheorem\n\nLet I =(G.S, Tk) be an instance of\n\nH=G\u2014No[SUT], and let J denote the graph induced by No[SU T]\nIF H is e-sparse (number of edges in G is at most 1 0), and J is\n\n{Cs Ca}-free then T admits a kernel with O(K + k!*\u2122/*) vertices",
    "FPT on { C3, C;}-free graphs\n\nClass TS\nGi}-free graphs Whirh:\n\na Open\nBip: ph Whil-hard\nBipartite A-degree graphs FPT (K\u00b0A\u00b0 kernel\n\nTheorem\nLet I =(G.S, Tk) be an instance of\n\nH=G\u2014No[SUT], and let J denote the graph induced by\n\nIF H is e-sparse (number of edges in G is at most 1 0), and J is\n\n{Cs. C}-free then T admits a kernel with O(K +k\") vertices.",
    "A familiar example: 15-puzzle\n\nhttps: //L uzzle-game/",
    "FPT on { C3, C;}-free graphs\n\nChass 73 Ty\nGi)-ee graphs Wir Wirtan\nWhiFfard\nFPT (O\u00b0 kermel) _FPT (kd kernel)\n\nTheorem\nLet I =(G.5, T,) be an instance of\n\nH=G\u2014No[SUT], and let J denote the graph induced by\n\nIF H is e-sparse (number of edges in G is at most 1 0), and J is\n\n{Cs Ca}-free then T admits a kernel with O(K +k\") vertices.",
    "FPT on { (3, C;}-free graphs\n\nClass TS Ty\nGi}-free graphs wiih Wirthard\nOpen\n\nWhil-hard\n\nFPT (\u20acA\u00b0 kemel) FPT (kA kernel)\n\nTheorem\n\nH=G\u2014No[SUT], and let J denote the graph induced by No[SU T]\nIF H is e-sparse (number of edges in G is at most 1 0), and J is\n\n{Cs. C}-free then T admits a kernel with O(K + k!*\"/*) vertices",
    "FPT on {C3, C;}-free graphs\n\nClass TS\nGi}-free graphs wih\n\nFPT (k\n\nTheorem\n\nid let J denote the graph induced by\n\n{Cs C}-free then T admits a kernel with O(K? + k!*/*) vertices",
    "FPT on {C3, C;}-free graphs\n\nClass TS\nGi}-free graphs wih\n\nFPT (k\u2122 kernel)\n\nTheorem\n\nid let J denote the graph i\n\n{Ca Ca)-free then T admits a kernel with O(K? + k",
    "FPT on {C3, C;}-free graphs\n\n7s\nwoth\nOpen\nFBT (Ren\n\nTheorem\n\nNels\n\nH=6\n\nT], and let J denote the graph induced by\n\n{Cs Ci}-free then T admits a kernel with O(K? + k!*\u2122/*) vertices",
    "FPT on {C3, C;}-free graphs\n\nTS\nwih\nOpen\nBip: phs Whil-hard\nBipartite A-degre FPT (\u20acA\" kemel\nFPT (k\n\nTheorem\nH=G\u2014Nc[SUT], and let J denote the graph induced by\n\n{Cs Ca)-free then Z admits a kernel with O(k ) vertices",
    "FPT on {C3, C;}-free graphs\n\nBip: phs\nBipartite A-degree \u00a2\n\nTheorem\nH=G\u2014Nc[SUT], and let J denote the graph induced by\n\n{Cs Ca)-free then Z admits a kernel with O(k ) vertices",
    "FPT on {C3, C;}-free graphs\n\nClass\n\nGr}-free graphs\n\nBipartite A-degre\n\nTheorem\nLet I =(G.5,T,k) b\nH=G\u2014Ne(SUT)\n\nIF H is e-sparse (numb\n\n{Ca Ca} free then Ta\n\ni\nwilh\nOpen\nWhif-hard\n\nwaphs FT (CA keel) FPT\n\nid let J denote the graph i\nin G is at most 1\n\nnits a kernel with O(K? + k",
    "FPT on {C3, C;}-free graphs\n\nClass i\nGi}-free graphs wilh\nOpen\nWfifhard\nphs PPT (KB kernel\nT(k\n\nBipartite A-degre\n\nTheorem\nH=G\u2014NelS id let J denote the graph i\nIF H is e-sparse (numb G is at most and J is\n\n{Cs Ca}-free then T admits a kernel with O(K? + k",
    "FPT on {(3, C;}-free graphs\n\nClass TS\nGi}-free graphs wilh\n\nBiparti Whil-hard\nBipartite A-degree a FPT (@A\" kemel) _FPT\n\nTheorem\nH=G\u2014NelS id let J denote the graph i\nIF H is sparse (ni G is at most and J is\n\n{Cs Ca}-free then T admits a kernel with O(K? + k",
    "A familiar example: 15-puzzle\n\nhttps: //L github. io/fi uzzle-game/",
    "FPT on {C3, C;}-free graphs\n\nTS\nWarr\n\nClass\nGi} free graphs\n\n\u201cwih\n\nFPT (K\u00b0A\" kemel) _FPT\n\nBipartite grap\n\u201cBipartite A-degree graphs\n\nTheorem\n\nH=6-N,\nIF H is sparse (1\n\n{Ca, Ca}-free then\n\n[SUT], and let J denote the graph i",
    "FPT on {C;, C;}-free graphs\n\nClass 75\nGi) fee graphs Wark\n\nx ree Braj Open\n\u201cwih :\nFPT (CA kemel) PT\n\n\u201cBipartite A-degree graphs nel) _FPT (\n\n(A kernel)\n\nBipartite grap\n\nTheorem\nLet I = (6.5, T,k) be an instance of TOKEN\n\nH=6-N,\nIF H is sparse (1\n\n{Ca, Ca}-free then\n\n[SUT], and let J denote the graph i",
    "FPT on {G, G}-free graphs\n\nChass\nGi} free graphs\n\nBipa grap\n\nTheorem\nLet I = (6.5, T,k) be an instance of TOKEN J}\n\nH=6-N\n\nIPH is e-sparse (1\n\n{Ca, Ca}-free then T admits a kernel with O(k\n\n[SUT], and let J denote the graph i",
    "FPT on {G, G}-free graphs\n\nClass\nGi}-free graphs\nBipartite graphs\n\n\u201cBipartite A-degree graph:\n\nTheorem\n\nH=6-N,\nIF H is e-sparse (rn\n\n{Ca, Ca} free then\n\n[SUT], and fet J denote the graph i\n\nfedges in G is at most ri and J is\n\nadmits a kernel with O(k? + k",
    "FPT on {G, G}-free graphs\n\nClass TS\n\nGi}-free graphs Warr\n( as Open\nBipartite graph Wilh:\n\nBipartite A-degree graphs FPT (RA)\n\nTheorem\nLet Z = (G.5, T,k) be an instance of TOK?\n\nH=G\u2014No[SUT], and let J denote the graph induc [suT]\nIF H is e-sparse (1 fedges in G is at most ri and J is\n\n{Cs Ca}-free then T admits a kernel with O(K? + k",
    "FPT on {G, G}-free graphs\n\nClass\nGi}-free graphs\n\nBipartt\n\nTheorem\n\nT], and let J denote the graph i\nE\n\nH=6\u2014 Nels\nIF H js e-sparse (number\n{\u20ac,7Cs}-free then T admits a kernel\n\nfedges in G is at most 1 0), and J is\n\nith O(K? + k/\") vertice",
    "FPT on {G, G}-free graphs\n\nClass\nGi}-free graphs\n\nBipartite graph:\n\u201cBipartite A-degree graphs _FPT (ICA kernel\n\nkd kernel).\n\nTheorem\nLet I =(6.5,T,k) 6 ce of\nH=G\u2014No[SUT], and let J denote the graph induced by\n\n{Cs Ca}-free then T admits a kernel with O(K? + k",
    "FPT on { (3, C,}-free graphs\n\nTs\n\nWik\nOpen\nWhil-hard\n\nFPT (k\u2122 ken\n\nTheorem\nH=G\u2014Ne[SUT], and let J denote the graph induced by Nc[S UT]\nIf H is e-sparse (number of edge\u2019 in G is at most n 0), and J is\n\n{Ca Ca}-free then T admits a kernel with O(K? + k!\u2122/*) vertice",
    "FPT on {G, C;}-free graphs\n\n7s\nWik\nOpen\nSipaite {G is PT (A ber\n\nTheorem\nH=G\u2014Nc[SUT], and let J denote the graph induced by No[S UT]\nIF H is e-sparse (number of edges in G is at most 1? 0), and J is\n\n{Ca Ca-free then T admits a kernel with O(K? +k\") vertice",
    "FPT on {C3, C;}-free graphs\n\nClass 7s AL\nCi)-fee graphs woth whrtald\n\nken\n\nTheorem\nLet I = (6.5, T,k) be an instance of TOKEN JUMPING, |\n\nH=G\u2014No[SUT], and let J denote the graph induced by No[S UT]\nIF H is e-sparse (number of edges in G is at most 1 4), and J is\n\n{Ca Ca}-free then T admits a kernel with O(K? + k!*\u2122/*) vertice",
    "A familiar example: 15-puzzle\n\nhttps: //L github. io/fi uzzle-game/",
    "FPT on {C3, C;}-free graphs\n\nBiparti wi\nBipartite A-degree a FPT (2\u00b0 kemel) PPT (kd kernel)\n\nTheorem\nLet I = (6.5, T,k) be an instance of TOKEN. JUMPING, k\nH=G\u2014Nc{SU T], and let J denote the graph induced by No\n\n1 H is sparse (mn f edges in G is at most 1 0), and J is\n\n{Cs. Ca} free ther ts a kernel with O(K? + k!*\u2122/*) vertices.",
    "FPT on { C3, C;}-free graphs\n\nBiparti Whif-hard\nBipartite A-degree a FPT (K2A\u00b0 kernel) PPT (kd kernel)\n\nTheorem\nH=G\u2014No[SUT], and let J denote the graph i\nIF H is e-sparse (rn f edges in G is at most n\u00ae,*, \u00a9 > 0), and J is\n\n{Gi Ca}-free then ts a kernel with O(K? + KO\") vertices.",
    "FPT on { C3, C;}-free graphs\n\nClass Ts\nGi}-free graphs Whrk\nOpen\n\nTheorem\nLet I~ (6.5, T,k) be an instance of TOKEN J\n\nH=G\u2014No[SUT], and let J denote the graph induced by No\n\nIF His e-sparse (number of edges in G is at most 1 0), and J is\n\n{G.,Gi}-free then T admits a kernel with O(K +k\") vertices",
    "FPT on {C3, C;}-free graphs\n\nClass Ts\nGi}-free graphs Wark\nOpen\n\nBiparite Wika\n\nTheorem\nLet I = (6.5, T,k) be an instance of TOKEN\n\nH=G\u2014No[SUT], and let J denote the graph i\nIF is e-sparse (number of edges in G is at most 1 ), and J is\n\n{G:Gi)-free then Ladmits a kernel with O(K? + k",
    "FPT on {C3, C;}-free graphs\n\nClass\n\nGi}-free graphs\n\nBipartite\nBipart\n\nTheorem\nLet Z = (6.5, Tk) be an instance of TOKEN\n\nH=G\u2014No[SUT], and let J denote the graph i\nIF H is e-sparse (number of edges in G is at most 1 ). and J is\n\n{G.G}-free ther I with OF? +k\u2019",
    "FPT on {C3, C;}-free graphs\n\nClass 3\nGi-free graphs wiih\n\nTheorem\nLet I =(G.5, T,k) be an instance of ToKE\n\nH=G\u2014No[SUT], and let J denote the graph i\nIF H is e-sparse (number of edges in G is at most 1\n\n{G.G}-free then T admits a kernel with O(K + k1*/*) vertices",
    "FPT on {C3, C;}-free graphs\n\nClass Ts\n\nGi}-free graphs wiih\n\n1G.G) Open\nBipartite grap Whif-hard\nBipartite A-degre FPT (\u20ac A\" kemel\n\nTheorem\n\nLet I =(G.S, T,k) be an instance of\nH=G\u2014No[SUT], and let J denote thergraph i\nIF H is e-sparse (number of edges in G is at most 1\n\n{G.Gi}-free then T admits a kernel with O(K +k\") vertices",
    "FPT on {C3, C;}-free graphs\n\n7s\nwork\n\nOpen\n\nWilner\n\nFPT (CA kernal\n\nTheorem\nLet I =(G.S, T,k) be an instance of TOK?\n\nH=G\u2014No[SUT], and let J denote thergraph induced by\nIf Fis e-sparse (number of edges in G is at most 1 0), and J is\n\n{G:Gi)-free then Z admits a kernel with O(k ) vertices",
    "FPT on {C3, C:}-free graphs\n\nClass TS\nGi}-free graphs war-h\n\nBipari Whi}tord\n\nFPT (k\n\nTheorem\n\nH=G\u2014No[SUT], and let J denote thergraph induced by\nIF H is e-sparse (number of edges in G is at most n 0), and J is\n\n{Ci Ca}-free then T admits a kernel with O(KE +k\") vertices.",
    "FPT on {C3, C:}-free graphs\n\nClass TS\nGi}-free graphs War\n\n(G. GF Open\nBipartite grap wi\nBipartite A-de\n\nTheorem\nH=G\u2014No[SUT], and let J denote thergraph induced by\nIF H is e-sparse (number of edges in G is at most 1 0), and J is\n\n{Ci Ca}-free then T admits a kernel with O(KE +k!) vertice",
    "A familiar example: 15-puzzle",
    "FPT on { (3, C;}-free graphs\n\nClass TS\nGi}-free graphs wih\n\nOpen\nBipar\n\nrap Whil-hard\n\nBipartite A-degree graphs FPT (7\u00b0 kernel) PPT (KA kernel)\n\n_FPT (k\u201d kern\n\nTheorem\nLet I =(G.5,T,k) 6\nH=G\u2014Ne[SUT], and let J denote thengraph induced by\n\n{Gi.Gi}-free then T admits a kernel with O(K? + k",
    "FPT on {C3, C;}-free graphs\n\nClass TS\n\nGi}-free graphs wiih\n\nOpen\nBiri Whil-hard\n\nBiparti degree graphs _ FPT (K\u00b0A\u00ae kernel\n\nTheorem\nLet I =(6.5,T.k) 6\nH=G\u2014No[SUT], and let J denote thergraph induced by No[S\n\n{Gi Gi}-free then T admits a kernel with O(K + k",
    "FPT on {C3, C;}-free graphs\n\nClass TS\n\nGi}-free graphs Whil-hard\nOpen\n\nBipartite grap Wiil-hard\n\nTheorem\nLet I =(6.5,T.k) 6 ce of\ni\n\nH=G\u2014Nc[SUT], and let J denote thergraph induced by\n\n{Ci, Ca}-free then T admits a kernel with O(K +k!) vertice",
    "FPT on {C3, C;}-free graphs\n\nphs PPT (A A\u00ae kern\n\nH=6 ind let J denote thergraph induced by\n\n{G.Gi}-free ther 2 kernel with O(k? + k",
    "FPT on {C3, C;}-free graphs\n\nClass\n\nGi}-free graphs\n\nphs PPT (A A\u00b0 kern\n\nH=6 nd let J denote thergraph induced by Ne[S\n\n{G.Gi}-free ther 2 kernel with O(k? + k",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mou:\nAmerican Univ\n\nid (2a368@aub.edu.lb)\n\nf Beirut",
    "FPT on { C3, C;}-free graphs\n\nWy\n\nBipartite grap\n\nBipartite A-degree \u00a2\n\nTheorem\n\nLet I =(G.5,T,k) be an instance of TOKEN 4}\n\nH=G\u2014Nc[SUT], and let J denote thesgraph induced by\n\nIF H is e-sparse (number of edges in G is at most 1 0), and J is\n{Ci Ca}-free then T admits a kernel with O(K + K1/*) vertices",
    "G.}-free graphs\n\nClass TS\nGh-free gr Wak\nOpen\n\nBiparti\n\nBipart\n\nTheorem\nH=G\u2014Nc[SUT], and let J denote thergraph i\nIF H is e-sparse (number of edges in G is at most 1 0), and J is\n\n{Ci Ca}-free then T admits a kernel with O(KE + K1/*) vertices.",
    "FPT on {C3, C;}-free graphs\n\nClass TS\nGh-free gr Wak\nOpen\n\nBiparti Whil-hard\nBipartite A-degree a FPT (\u20acA\" kernel\n\nTheorem\nH=G\u2014No[SUT], and let J denote thergraph i\nIF H is e-sparse (number of edges in G is at most 1 0), and J is\n\n{Ci Ca}-free then T admits a kernel with O(K + K1/*) vertices",
    "FPT on { C3, C;}-free graphs\n\nClass 7s\nOpen\nBipartke gray Wii-hard\ntite {Ce FPT (Khem\n\nTheorem\n\nH=G\u2014No[SUT], and let J denote the graph induced by\n\n{Gi Ga}-free then T admits a kernel with O(K +k\") vertices.",
    "FPT on {C3, C;}-free graphs\n\nClass 7s\nOpen\n{Galfer graphs FPT (kernel)\n\nTheorem\nH=G\u2014No[SUT], and let J denote the graph induced by\n\n{Gi Ca}-free then T admits a kernel with O(K +k\") vertices.",
    "A familiar example: 15-puzzle",
    "FPT on { C3, C;}-free graphs\n\nChass Td\nCa}-free graphs ~Wiif-har\u00e9\n\nBipartite grap \u2018Open\n\nT (ken\n\nTheorem\nLet T= (6.5, T,k) be an instance of TOKEN JUMPING, |\n\nH=G\u2014No[SUT], and let J denote the graph induced by No[S UT]\nIF H is c-sparse (number of edges in G is at most 1 0), and J is\n\n(Cs. Ca)-free then with O(k? + k*/*) vertices",
    "FPT on {C,, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPINC\n\naS\n\nsun)\n\nIf we can find an independent set of size k in H then we are\ndone\nThe tokens can jump from S to said independent set and then\n\njump to T (one by one).",
    "FPT on {C,, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPINC\n\naa\n\nNUT)\n\n\u00ab If we can find an independent set of size k in H then we are\ndone.\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one).",
    "FPT on {C3, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPINC\n\nSSS\n\nNun)\n\n\u00a9 If we can find an independent set of size k in H then we are\ndone.\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one).",
    "FPT on {C3, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPINC\n\naS\n\nNUT)\n\n\u00a9 If we can find an independent set of size k in H then we are\ndone.\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one).",
    "FPT on {C3, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPINC\n\nSSS\n\nNUT)\n\n\u00a9 If we can find an independent set of size k in H then we are\ndone.\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one).",
    "FPT on { (3, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPING\n\nNun\n\nIf we can find an independent set of size k in H then we are\ndone.\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one).",
    "FPT on { C3, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPINC\n\naS\n\nNun)\n\nIf we can find an independent set of size k in H then we are\ndone.\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one).",
    "FPT on {C;, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPINC\n\nNun)\n\nIf we can find an independent set of size k in H then we are\ndone.\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one)",
    "FPT on {C3, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPINC\n\nNUT)\n\n\u00a9 If we can find an independent set of size k in H then we are\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one).",
    "A familiar example: 15-puzzle",
    "FPT on {C;, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPINC\n\nNu)\n\nIf we can find an independent set of size k in H then we are\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one).",
    "FPT on { C3, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPINC\n\nNUT)\n\nIf we can find an independent set of size k in H then we are\n\nis can jump from S to said independent set\njump to T (one by one).",
    "FPT on {G;, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPING\n\nNSU)\n\nIf we can find an independent set of size k in H then we are\n\nis can jump from S to said independent set\njump to T (one by one).",
    "FPT on {C3, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPINC\n\naS\n\nNu)\n\nIf we can find an independent set of size k in H then we are\ndone\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one).",
    "FPT on {(;, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPINC\n\naS\n\nNu)\n\nIf we can find an independent set of size k in H then we are\ndone\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one).",
    "FPT on {C;, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPING\n\naS\n\nNu)\n\n\u00a9 If we can find an independent set of size k in H then we are\ndone\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one).",
    "FPT on { (3, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPINC\n\naS\n\nNun)\n\n\u00a9 If we can find an independent set of size k in H then we are\ndone\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one).",
    "FPT on { C3, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPING\n\nSSS\n\nNun)\n\n\u00ab If we can find an independent set of size k in H then we are\ndone\n\n\u00a9 The tokens can jump from $ to said independent set and then\njump to T (one by one).",
    "FPT on {G, G}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPINC\n\na SSS\n\nNun)\n\n\u00a9 If we can find an independent set of size k in H then we are\ndone\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one).",
    "FPT on {C3, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPING\n\nNu)\n\nIf we can find an independent set of size k in H then we are\ndone.\n\u00a9 The tokens can jump from S to said independent set and then\n\njump to T (one by one).",
    "A familiar example: 15-puzzle\n\nhttps: //lorecion een-puzzle-g:",
    "FPT on {C3, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPING\n\naS SSS\n\nNu)\n\nIf we can find an independent set of size k in H then we are\ndone\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one).",
    "FPT on {G, G}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPINC\n\nNSU)\n\n\u00a9 If we can find an independent set of size k in H then we are\ndone\n\n\u00a9 The tokens can jump from S to said independent set\njump to T (one by one).",
    "FPT on {G, G}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPINC\n\nNu)\n\n\u00a9 If we can find an independent set of size k in H then we are\ndone\n\n\u00a9 The tokens can jump from S to said independent set\njump to T (one by one)",
    "FPT on {G, G}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPINC\n\nNSU)\n\n\u00a9 If we can find an independent set of size k in H then we are\ndone\n\n\u00a9 The tokens can jump from S to said independent set\njump to T (one by one)",
    "FPT on { (3, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPING\n\n[<a = 79\n\nNu)\n\n\u00ab If we can find an independent set of size k in H then we are\ndone.\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one).",
    "FPT on { C3, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPINC\n\n[<a = 79\n\nNu)\n\n\u00ab If we can find an independent set of size k in H then we are\ndone.\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one).",
    "FPT on {C3, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPINC\n\naS SS\n\nsun)\n\n\u00a9 If we can find an independent set of size k in H then we are\ndone.\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one).",
    "FPT on { C3, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPING\n\n[<a = 79\n\nNu)\n\n\u00ab If we can find an independent set of size k in H then we are\ndone.\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one).",
    "FPT on { C3, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPINC\n\n[<a ar = 797)\n\nNu)\n\nIf we can find an independent set of size k in H then we are\ndone.\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one).",
    "FPT on { C3, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPING\n\n[<a = 79\n\nNu)\n\n\u00ab If we can find an independent set of size k in H then we are\ndone.\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one).",
    "A familiar example: 15-puzzle\n\nhttps: //lorecion een-puzzle-g:",
    "FPT on { C3, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPINC\n\n[<a = 79\n\nNu)\n\n\u00ab If we can find an independent set of size k in H then we are\ndone.\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one).",
    "FPT on {C3, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPINC\n\naS SS\n\nsun)\n\n\u00a9 If we can find an independent set of size k in H then we are\ndone.\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one).",
    "FPT on { C3, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPING\n\n[<a = 79\n\nNu)\n\n\u00ab If we can find an independent set of size k in H then we are\ndone.\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one).",
    "FPT on { C3, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPINC\n\n[<a ar = 797)\n\nNu)\n\nIf we can find an independent set of size k in H then we are\ndone.\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one).",
    "FPT on { C3, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPING\n\nNu)\n\nIf we can find an independent set of size k in H then we are\ndone.\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one).",
    "FPT on { (3, C;}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPING\n\nNu)\n\nIf we can find an independent set of size k in H then we are\ndone.\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one).",
    "FPT on {C3, C,}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPING\n\n[<a ar = 1y/\n\nNu)\n\nIf we can find an independent set of size k in H then we are\ndone.\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one).",
    "FPT on {C3, C:}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPINC\n\naS\n\nNun)\n\n\u00a9 If we can find an independent set of size k in H then we are\ndone\n\u00a9 The tokens can jump from S to said independent set and then\n\njump to T (one by one)",
    "FPT on {G, G}-free graphs\n\nGiven an instance Z = (6,5, T,k) of TOKEN JUMPING, we let\n\nH =Nc{SU T] and we let J be the graph induced by Ne[SU T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n# His e-sparse and contains more than k(2k)!/* vertices; or\n\n\u00a9 Js {Cs, Ca}-free and contains a vertex of degree at least 3)",
    "FPT on {C3, C:}-free graphs\n\n\u00ab\nGiven an instance Z = (6,5, T,k) of TOKEN JUMPING, we let\n\nH = Ne[SU T] and we let J be the graph induced by Ne[$ U T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)!/* vertices; or\n\n\u00a9 Jis (Cs, Ca}-free and contains a vertex of degree at least 3",
    "A familiar example: 15-puzzle\n\nhttps: //Lorec",
    "FPT on {C3, C;}-free graphs\n\nGiven an instance Z = (G,S, T,k) of TOKEN JUMPING, we let\nH = Ng[SU T] and we let J be the graph induced by Ne[SU T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)!/* vertices; or\n\n# Jis {Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {C3, C:}-free graphs\n\nGiven an instance Z = (G,S, T,k) of TOKEN JUMPING, we let\nH = Ng[SU T] and we let J be the graph induced by Ne[SU T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)!/* vertices: or\n\n# Jis {Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {G, G}-free graphs\n\nGiven an instance Z = (G,S, T,k) of TOKEN JUMPING, we let\nH =Ne[SU T] and we let J be the graph induced by Ne[SU T]\n\n/e show that TZ is a yes-instance whenever one of those two\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)'/* vertices; or\n\n# Jis {Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {G, G}-free graphs\n\nGiven an instance Z = (G,S. T,k) of TOKEN JUMPING, we let\nH = Ne[SU T] and we let J be the graph induced by Ne[SU T]\n\n/e show that TZ is a yes-instance whenever one of those two\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)!/* vertices; or\n\n# Jis {Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {G, G}-free graphs\n\nGiven an instance Z = (G,S. T, k) of Tox JUMPING, we let\nH = Ng[SU T] and we let J be the graph induced by Ne[SU T]\n\nWe show that Z is a yes-instance whenever one of those two\nconditions is true\n\n# His e-sparse and contains more than k(2k)!/* vertices; or\n\n# Jis {Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {G, G}-free graphs\n\nGiven an instance Z = (G,S.T,k) of TOKEN JUMPING, we let\nH = Ne[SU T] and we let J be the graph induced by Ne[SU T]\n\n/e show that TZ is a yes-instance whenever one of those two\nconditions is true\n\n* His e-sparse and contains more than k(2k)!/* vertices; or\n\n# Jis {Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {G, G}-free graphs\n\nGiven an instance Z = (G,S. T,k) of TOKEN JUMPING, we let\nH = Ne[SU T] and we let J be the graph induced by Ne[SU T]\n\n/e show that TZ is a yes-instance whenever one of those two\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)!/* vertices; or\n\n# Jis {Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {G, G}-free graphs\n\nGiven an instance Z = (G.S.T.k) of Tox1 JUMPING, we let\nH =Ng[SU T] and we let J be the graph induced by Ne[SU T]\n\n/e show that Z is a yes-instance whenever one of those two\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)!/* vertices; or\n\n\u00a9 Jis {Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {G, G}-free graphs\n\nGiven an instance Z = (G,S, T,k) of TOKEN JUMPING, we let\nH = Ng[SU T] and we let J be the graph induced by Ne[SU T]\n\nWe show that Z is a yes-instance whenever one of those two\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)!/* vertices; or\n\n# Jis {Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {G, G}-free graphs\n\nGiven an instance Z = (G,S, T,k) of TOKEN JUMPING, we let\nH = Ng[SU T] and we let J be the graph induced by Ne[SU T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\u00a9 His e-sparse and contains more than k(2k)!/* vertices; or\n\n\u00a9 Jis (Cs, Ca}-free and contains a vertex of degree at least",
    "A familiar example: 15-puzzle\n\nhttps: //lorecion fifteen-puzzle-g:",
    "FPT on {G, G}-free graphs\n\nGiven an instance Z = (G,S, T,k) of TOKEN JUMPING, we let\nH =Ng[SU T] and we let J be the graph induced by Ne[$U T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n# His e-sparse and contains more than &(2k)\"/* vertices; or\n\n# Jis {Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {G, G}-free graphs\n\nGiven an instance Z = (G,S, T,k) of TOKEN JUMPING, we let\nH =Ng[SU T] and we let J be the graph induced by Ne[SU T]\n\nWe show that Z is a yes-instance whenever one of those two\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)!/* vertices; or\n\n# Jis {Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {G, G}-free graphs\n\nGiven an instance Z = (G,S, T,k) of TOKEN JUMPING, we let\nH =Ne[SU T] and we let J be the graph induced by Ne[S U T]\n\nWe show that Z is a yes-instance whenever one of those two\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)!/* wertices; or\n\n* Jis {Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {G, G}-free graphs\n\nGiven an instance Z = (G,S, T,k) of TOKEN JUMPING, we let\nH = Ng[SU T] and we let J be the graph induced by Ne[SU T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)!/* vertices; or\n\n\u00a9 Jis {Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on { (3, C;}-free graphs\n\nGiven an instance Z = (G,S,T,k) of TOKEN JUMPING, we let\nH = Ng[SU T] and we let J be the graph induced by Ne[SU T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n# His e-sparse and contains more than k(2k)!* vertices; or\n\n# Jis {Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {G, G}-free graphs\n\nGiven an instance Z = (G,S, T,k) of TOKEN JUMPING, we let\nH = Ng[SU T] and we let J be the graph induced by Ne[SU T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n# His e-sparse and contains more than k(2k)}* vertices; or\n\n# Jis {Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {G, G}-free graphs\n\nGiven an instance Z = (G,S, T,k) of TOKEN JUMPING, we let\nH = Ng[SU T] and we let J be the graph induced by Ne[SU T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n# His e-sparse and contains more than k(2k)}/* vertices; or\n\n# Jis {Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {C3, C;}-free graphs\n\nGiven an instance Z = (G,S, T,k) of TOKEN JUMPING, we let\nH =Ne[SU T] and we let J be the graph induced by Ne[S U T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)!/* vertices; or\n\n# Jis {Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {C3, C;}-free graphs\n\nGiven an instance Z = (G,S, T,k) of TOKEN JUMPING, we let\nH =Ne[SU T] and we let J be the graph induced by Ne[S U T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)!/\" vertices; or\n\n# Jis {Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {C3, C;}-free graphs\n\nGiven an instance Z = (G,S, T,k) of TOKEN JUMPING, we let\nH =Ne[SU T] and we let J be the graph induced by Ne[S U T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)\"/* vertices; or\n\n# Jis {Cs, Ca}-free and contains a vertex of degree at least 3k",
    "A familiar example: 15-puzzle\n\nhttps: //lorecion fifteen-puzzle-g:",
    "FPT on {C3, C:}-free graphs\n\nGiven an instance Z = (G,S, T,k) of Tox JUMPING, we\nH =Nc[SU T] and we let J be the graph induced by Ne[$U T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)'/* vertices; or\n\n\u00a9 Jis (Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {C3, C;}-free graphs\n\nGiven an instance Z = (G,S, T, k) of Tox JUMPING, we\nH = Ng[SU T] and we let J be the graph induced by Ne[$U T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)'/* vertices; or\n\n\u00a9 Jis (Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on { C3, C;}-free graphs\n\nGiven an instance Z = (G,S, T,k) of Tox JUMPING, we let\nH =Ne[SU T] and we let J be the graph induced by Ne[5 U T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)'/* vertices; or\n\n\u00a9 Jis (Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {C3, C;}-free graphs\n\nGiven an instance Z = (G,S, T, k) of Tox JUMPING, we\nH = Ng[SU T] and we let J be the graph induced by Ne[$U T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)'/* vertices; or\n\n\u00a9 Jis (Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {C3, C:}-free graphs\n\nGiven an instance Z = (G,S, T, k) of Tox JUMPING, we\nH = Ng[SU T] and we let J be the graph induced by Ne[$U T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)\"/* vertices; or\n\n\u00a9 Jis (Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {C3, C;}-free graphs\n\nGiven an instance Z = (G,S, T, k) of Tox JUMPING, we\nH = Ng[SU T] and we let J be the graph induced by Ne[SU T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)'/* vertices; or\n\n\u00a9 Jis (Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {C3, C;}-free graphs\n\nGiven an instance Z = (G,S, T, k) of Tox JUMPING, we\nH = Ng[SU T] and we let J be the graph induced by Ne[$U T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)'/* vertices; or\n\n\u00a9 Jis (Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on { C3, C;}-free graphs\n\nGiven an instance Z = (G,S, T,k) of Tox JUMPING, we let\nH =Ne[SU T] and we let J be the graph induced by Ne[5 U T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)'/* vertices; or\n\n\u00a9 Jis (Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on { C3, C;}-free graphs\n\nGiven an instance Z = (G,S, T,k) of TOKEN JUMPING, we let\nH =Ne[SU T] and we let J be the graph induced by Ne[5U T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)'/* vertices; or\n\n# Jis {Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on { (3, C:}-free graphs\n\nGiven an instance Z = (G,S, T,k) of TOKEN JUMPING, we let\nH = Ng[SU T] and we let J be the graph induced by Ne[SU T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)\"/* vertices; or\n\n\u00a9 Jis {Cs, Ca}-free and contains a vertex of degree at least 3k",
    "A familiar example: 15-puzzle\n\nhttps: //loreci",
    "FPT on {C3, C;}-free graphs\n\nGiven an instance Z = (G,S, T,k) of TOKEN JUMPING, we let\nH =Ne[SU T] and we let J be the graph induced by Ne[SU T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)'/* vertices; or\n\n# Jis {Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {C3, C:}-free graphs\n\nGiven an instance Z = (G,S, T,k) of TOKEN JUMPING, we let\nH =Ne[SU T] and we let J be the graph induced by Ne[SU T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)\"/* vertices; or\n\n\u00a9 Jis {Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on { (3, C;}-free graphs\n\nGiven an instance Z = (G,S, T,k) of TOKEN JUMPING, we let\nH = Ng[SU T] and we let J be the graph induced by Ne[SU T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)'/* vertices; or\n\n\u00a9 Jis (Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {G, G}-free graphs\n\nGiven an instance Z = (G,5, T,k) of TOKEN JUMPING, we let\nH =Ne[SU T] and we let J be the graph induced by Ne[S U T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)!/* vertices; or\n\n\u00a9 Jis {Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {G, G}-free graphs\n\nGiven an instance Z = (G,S, T,k) of TOKEN JUMPING, we let\nH =Ne[SU T] and we let J be the graph induced by Ne[S U T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)!/* vertices; or\n\n\u00a9 Jis {Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {G;, C;}-free graphs\n\nGiven an instance Z = (G,S, T,k) of TOKEN JUMPING, we let\nH =Ne[SU T] and we let J be the graph induced by Ne[SU T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)'/* vertices; or\n\n\u00a9 Jis (Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {G;, C;}-free graphs\n\nGiven an instance Z = (G,S, T,k) of TOKEN JUMPING, we let\nH =Ne[SU T] and we let J be the graph induced by Ne[SU T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)!/* vertices; or\n\n\u00a9 Jis (Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {G;, C;}-free graphs\n\nGiven an instance Z = (G,S, T,k) of TOKEN JUMPING, we let\nH =Ne[SU T] and we let J be the graph induced by Ne[S U T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)!/* vertices; or\n\n\u00a9 Jis (Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on { C3, C;}-free graphs\n\nGiven an instance Z = (G,S, T, k) of Tox JUMPING, we\nH =Nc[SU T] and we let J be the graph induced by Ne[$U T]\n\nWe show that Z is a yes-instance whenever one of those two\nconditions is true\n\u00a9 His e-sparse and contains more than k(2k)'/* vertices; or\n\n\u00a9 Jis (Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {C3, C;}-free graphs\n\nGiven an instance Z = (G,S, T,k) of Tox JUMPING, we\nH =Nc[SU T] and we let J be the graph induced by Ne[$U T]\n\nWe show that Z is a yes-instance whenever one of those two\nconditions is true\n\n\u00a9 His e-sparse and contains more than k(2k)'/* vertices; or\n\n\u00a9 Jis (Cs, Ca}-free and contains a vertex of degree at least 3k",
    "A familiar example: 15-puzzle\n\nhttps: //loreci",
    "FPT on { C3, C;}-free graphs\n\nGiven an instance Z = (G,S, T,k) of TOKEN JUMPING, we let\nH = Ng[SU T] and we let J be the graph induced ky Ne[SU T]\n\nWe show that Z is a yes-instance whenever one of those two\n\nconditions is true:\n\n\u00a9 His e-sparse and contains more than k(2k)'/* vertices; or\n\n\u00a9 Jis {Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {(, C;}-free graphs\n\nGiven an instance Z = (G,S, T,k) of TOKEN JUMPING, we let\nH =Ne[SU T] and we let J be the graph induced by Ne[S U T]\n\nWe show that Z is a yes-instance whenever one of those two\nconditions is true *\n\n# His e-sparse and contains more than k(2k)!/* vertices; or\n\n* Jis {Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {(, C;}-free graphs\n\nGiven an instance Z = (G,S, T,k) of TOKEN JUMPING, we let\nH =Ne[SU T] and we let J be the graph induced by Ne[SU T]\n\nWe show that Z is a yes-instance whenever one of those two\nconditions is true %\n\n# His e-sparse and contains more than k(2k)!/* vertices; or\n\n* Jis {Cs, Ca}-free and contains a vertex of degree at least 3k",
    "FPT on {C3, C;}-free graphs\n\nLemma\nIf H is an \u00a9-sparse graph with more than k(2k)\"/* vertices then Z\n\nis a yes-instance\nProof, \u00ab\n+ H must contain a vertex with degree less than\n\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is e-sparse, it holds that |E(H\u2019)| <n?\n\nHowever, 2 < n?-* if and only if n < (2k)?\n\ncontradiction.\n\nThe rest of the proof is by induction on k (greedy packing)",
    "FPT on {C3, C;}-free graphs\n\nLemma\nIF H is an \u00a9-sparse graph with more than k(2k)\"/* vertices then Z\n\nis a yes-instance.\nProof \u00ab\n\u00a9 H must contain a vertex with degree less than 2\n\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is e-sparse, it holds that |E(H\u2019)\n\nHowever, 2 < n?-= if and only if m < (2k)\"/*, contradiction\n\nThe rest of the proof is by induction on k (greedy packing)",
    "FPT on {C;, C;}-free graphs\n\nLemma\nIF H is an e-sparse graph with more than k(2k)\"/* vertices then Z\n\nis a yes-instance.\nProof.\n\u00a9 H must contain a vertex with degree less than 2\nAssume otherwise, i.e., suppose that the minimum degree in\n\nHis at least 2. Then, |E(H)| > %\n\nSince H is <-sparse, it holds that |E(H\u2019)\n\nHowever, $< n?-* if and only if n < (2k)*/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy packing)",
    "FPT on {C,, C;}-free graphs\n\nLemma\nIF H is an e-sparse graph with more than k(2k)\"/* vertices then Z\n\nis a yes-instance.\nProof.\n\u00a9 H must contain a vertex with degree less than ?\n\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is <-sparse, it holds that |E(H\u2019)\n\nHowever, if and only if n < (2k)\"/*, contradiction\n\nThe rest of the proof is by induction on k (greedy packing)",
    "FPT on { C3, C;}-free graphs\n\nLemma\nIF H is an \u00a9-sparse graph with more than k(2k)\"/* vertices then Z\n\nis a yes-instance.\nProof.\n# H must contain a vertex with degree less than ?\n\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least #2. Then, |E(H)| > %\n\nSince H is <-sparse, it holds that |E(H\u2019)\n\nHowever, if and only if n < (2k)\"/*, contradiction\n\nThe rest of the proof is by induction on k (greedy packing)",
    "FPT on { C3, C;}-free graphs\n\nLemma\nIF H is an \u00a9-sparse graph with more than k(2k)'/* vertices then\n\nis a yes-instance.\n\nProof.\n\u00a9 H must contain a vertex with degree less than 2\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\nSince H is =-sparse, it holds that |E(H\u2019)|\n\nHowever, 2 < n?-* if and only if n < (2k)\"/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy packing)",
    "FPT on {C3, C;}-free graphs\n\nLemma\nIf H is an \u00a9-sparse graph with more than k(2k)\"/* vertices then\n\nis a yes-instance.\n\nProof.\n\u00a9 H must contain a vertex with degree less than 2\n\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\nSince H is =-sparse, it holds that |E(H\u2019)\n\nHowever, 2 < n?-* if and only if n < (2k)*/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy packing)",
    "A familiar example: 15-puzzle\n\nhttps: //Lorecioni.githu",
    "FPT on {C3, C;}-free graphs\n\nLemma\nIF H is an \u00a9-sparse graph with more than k(2k)'/* vertices then\n\nis a yes-instance.\nProof.\n\u00a9 H must contain a vertex with degree less than 2\n\nAssume otherwise, i.e., suppose that the minimum degree in\nHis atleast 2. Then, |E(H)| > %\n\nSince H is <-sparse, it holds that |E(H\u2019)| <n?\n\nHowever, 2 < n?-* if and only if n < (2k)*/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy packing),",
    "FPT on {C, Gi}\n\nLemma\nIF H is an \u00a9-sparse graph with more than k(2k)'/* vertices then T\n\nis a yes-instance\nProof,\n+H must contain a vertex with degree less than 2\n\nAssume otherwise, i.e., suppose that the minimum degree in\nHis atleast 2. Then, |E(H)| > %\n\nSince H is <-sparse, it holds that |E(H\u2019)| <n?\n\nHowever, 2 < n?-* if and only if n < (2k)*/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy packing)",
    "FPT on {C,G}\n\nLemma\nIf H is an e-sparse graph with more than k(2k)'/* vertices then\n\nis a yes-instance\nProof,\n+H must contain a vertex with degree less than 2\n\nAssume otherwise, i.e., suppose that the minimum degree in\nHis atleast 2. Then, |E(H)| > %\n\nSince H is <-sparse, it holds that |E(H\u2019)| <n?\n\nHowever, 2 < n?-* if and only if n < (2k)*/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy packing)",
    "FPT on {C3, C;}-free graphs\n\nLemma\nIf H is an \u00a9-sparse graph with more than k(2k)'/* vertices then\n\nis a yes-instance.\n\nProof.\n\n+ H must contain a vertex with degree less than 2\n\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is =-sparse, it holds that |E(H\u2019)] < 7\n\nHowever, 2 < n?-* if and only if n < (2k)*/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy packing)",
    "FPT on {C3, C;}-free graphs\n\nLemma\nIf H is an \u00a9-sparse graph with more than k(2k)'/* vertices then Z\n\nis a yes-instance.\n\nProof.\n\n+ H must contain a vertex with degree less than 2\n\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is =-sparse, it holds that |E(H\u2019)] < 7\n\nHowever, 2 < n?-* if and only if n < (2k)*/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy packing)",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (22368@aub.edu.lb)\n\nAmerican Univ f Beirut",
    "FPT on {C3, C;}-free graphs\n\nLemma\nIf H is an \u00a9-sparse graph with more than k(2k)'/* vertices then\n\nis a yes-instance.\n\nProof.\n\n+ H must contain a vertex with degree less than 2\n\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is =-sparse, it holds that |E(H\u2019)| <n?\nHowever, 2 <n?- if and only if n < (2k)\u00a5/*, contradiction\n\nThe rest of the proof is by induction on k (greedy packing)",
    "FPT on {G, G}+free graphs\n\nLemma\nIf H is an \u00a9-sparse graph with more than k(2k)'/* vertices then\n\nis a yes-instance\nProof,\n\u00a9 H must contain a vertex with deg! less than 7.\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > &\nSince H is =-sparse, it holds that |E(H\u2019)| <n?\n\nHowever, $< n?-= if and only if n< (2k)\n\ncontradiction.\n\nThe rest of the proof is by induction on k (greedy packing)",
    "FPT on {G, G}-+free graphs\n\nLemma\nIf H is an \u00a9-sparse graph with more than k(2k)'/* vertices then\n\nis a yes-instance.\nProof.\n\u00a9 H must contain a vertex with degree less than 2\n\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is <-sparse, it holds that |E(H\u2019)| <n?\n\nHowever, $< n?-* if and only if n < (2k)\"/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy packing)",
    "FPT on {C:, Gs}\n\nLemma\nIf H is an \u00a9-sparse graph with more than k(2k)'/* vertices then\n\nis a yes-instance.\nProof.\n\u00a9 H must contain a vertex with degree less than 2\n\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is =-sparse, it holds that |E(H\u2019)| <n?\n\nHowever, $\u00a2 <n? if and only if n < (2k)\"/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy packing)",
    "FPT on {G, G}-+free graphs\n\nLemma\nIf H is an \u00a9-sparse graph with more than k(2k)'/* vertices then\n\nis a yes-instance.\nProof.\n\u00a9 H must contain a vertex with degree less than 2\n\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is <-sparse, it holds that |E(H\u2019)| <n?\n\nHowever, $< n?-* if and only if n < (2k)\"/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy packing)",
    "A familiar example: 15-puzzle\n\nhttps: //lorecioni .githu",
    "FPT on {C3, C:}-free graphs\n\nLemma\nIf H is an e-sparse graph with more than k(2k)'/* vertices then Z\n\nis a yes-instance.\nProof.\n\u00a9 H must contain a vertex with degree less than 2\n\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is c-sparse, it holds that |E(H\u2019)| <n?\n\nHowever, $ <n? if and only if n < (2k)\"/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy packing)",
    "FPT on {G, G}-+free graphs\n\nLemma\nIf H is an \u00a9-sparse graph with more than k(2k)'/* vertices then\n\nis a yes-instance.\nProof.\n\u00a9 H must contain a vertex with degree less than 2\n\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is <-sparse, it holds that |E(H\u2019)| <n?\n\nHowever, $< n?-* if and only if n < (2k)\"/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy packing)",
    "FPT on {G, G}-+free graphs\n\nLemma\nIf H is an \u00a9-sparse graph with more than k(2k)'/* vertices then\n\nis a yes-instance.\nProof.\n\u00a9 H must contain a vertex with degree less than 2\n\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is <-sparse, it holds that |E(H\u2019)| <n?\n\nHowever, $< n?-* if and only if n < (2k)\"/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy packing)",
    "FPT on {C;, C;}-free graphs\n\nLemma\nIf H is an \u00a9-sparse graph with more than k(2k)'/* vertices then\n\nis a yes-instance.\nProof.\n\u00a9 H must contain a vertex with degree less than 2\n\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is =-sparse, it holds that |E(H\u2019)| <n?\n\nHowever, $< n?-* if and only if n < (2k)\u201d*, contr\n\nThe rest of the proof is by induction on k (greedy packing)",
    "FPT on {C;, C;}-free graphs\n\nLemma\nIF H is an \u00a9-sparse graph with more than k(2k)'/* vertices then\n\nis a yes-instance\nProof.\n# H must contain a vertex with degree less than ?\n\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is <-sparse, it holds that |E(H\")| <n?\n\nHowever, $ < n?-* if and only if n < (2k)\"/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy packing)",
    "FPT on {C3, C;}-free graphs\n\nLemma\nIf H is an \u00a9-sparse graph with more than k(2k)'/* vertices then\n\nis a yes-instance\nProof.\n# H must contain a vertex with degree less than ?\n\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is e-sparse, it holds that |E(H\")| <n?\n\nHowever, $\u00a2 < n?-* if and only if n < (2k)\"/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy packing),",
    "FPT on {G, G}-free graphs\n\nLemma\nIf H is an \u00a9-sparse graph with more than k(2k)'/* vertices then\n\nis a yes-instance\nProof.\n\u00a9 H must contain a vertex with degree less than ?\n\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is c-sparse, it holds that |E(H\u2019)\n\nHowever, if and only if n < (2k)*/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy packing)",
    "FPT on {C3, C;}-free graphs\n\nLemma\nIf H is an \u00a9-sparse graph with more than k(2k)'/* vertices then T\n\nis a yes-instance.\n\nProof.\n\n\u00a9 H must contain a vertex with degree less than ?\n\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is c-sparse, it holds that |E(H\u2019)\n\nHowever, 2 < n?-* if and only if n < (2k)*/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy packing)",
    "FPT on {(, C;}-free graphs\n\nLemma\nIF H is an \u00a9-sparse graph with more than k(2k)\"* vertices then\n\nis a yes-instance\nProof.\n\n\u00a9 H must contain a vertex with degree less than 2\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is <-sparse, it folds that |E(H\u2019)\n\nHowever, $< n?-* if and only if n < (2k)\"/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy pa:",
    "FPT on {(, C,}-free graphs\n\nLemma\nIf H is an <-sparse graph with more than k(2k)\"/* vertices then Z\nis a yes-instance\nProof.\n\n\u00a9 H must contain a vertex with degree less than 2\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is c-sparse, it holds that |E(H\u2019)\n\nHowever, $< n?-* if and only if n < (2k)\"/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy pa:",
    "A familiar example: 15-puzzle",
    "FPT on {(, C,}-free graphs\n\nLemma\nIf H is an <-sparse graph with more than k(2k)\"/* vertices then Z\nis a yes-instance\nProof.\n\n\u00a9 H must contain a vertex with degree less than 2\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is e-sparse, it holds thgt |E(H\u2019)\n\nHowever, $< n?-* if and only if n < (2k)\"/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy pa:",
    "FPT on {C, C;}-free graphs\n\nLemma\nIf H is an \u00a9-sparse graph with more than k(2k)'/* vertices then\n\nis a yes-instance.\nProof.\n\u00a9 H must contain a vertex with degree less than 2\n\n# Assume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is c-sparse, it holds that |E(H\u2019)| < n\u00ae\n\nThe rest of the proof is by induction on k (greedy packing)",
    "FPT on {(, C;}-free graphs\n\nLemma\nIf H is an \u00a9-sparse graph with more than k(2k)'/* vertices then\n\nis a yes-instance.\nProof.\n\u00a9 H must contain a vertex with degree less than 2\n\n# Assume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is e-sparse, it holds that |E(H!)| < 1\n\nHowever, 2 < n?-* if and only if n < (2k)*/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy packing)",
    "FPT on {C, C;}-free graphs\n\nLemma\nIf H is an \u00a9-sparse graph with more than k(2k)'/* vertices then\n\nis a yes-instance.\nProof.\n\u00a9 H must contain a vertex with degree less than 2\n\n# Assume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is e-sparse, it holds that |E{H\")| < n\u00ae\n\nHowever, 2 < n?-* if and only if n < (2k)\"/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy packing)",
    "FPT on {C3, C;}-free graphs\n\nLemma\nIf H is an \u00a9-sparse graph with more than k(2k)'/* vertices then\n\nis a yes-instance.\n\nProof.\n\n\u00a9 H must contain a vertex with degree less than 2\n\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is sparse, it holds that |E(H\u2019)| <n?\nHowever, 2 < n?- if and only if n < (2k)*/*, contr\n\nThe rest of the proof is by induction on k (greedy packing).",
    "FPT on {C;, C;}-free graphs\n\nLemma\nIf H is an \u00a9-sparse graph with more than k(2k)'/* vertices then\n\nis a yes-instance.\n\nProof.\n\n\u00a9 H must contain a vertex with degree less than 2\n\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is <-sparse, it holds that |E(H\u2019)| <n?\nHowever, 2 < n?- if and only if n < (2k)*/*, contr\n\nThe rest of the proof is by induction on k (greedy packing).",
    "FPT on {C;, C;}-free graphs\n\nLemma\nIf H is an \u00a9-sparse graph with more than k(2k)\"/* vertices then\n\nis a yes-instance.\n\nProof.\n\n\u00a9 H must contain a vertex with degree less than 2\n\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is <-sparse, it holds that |E(H\u2019)| <n?\n\nHowever, $< n?-= if and only ifn < (2k)/*, contr\n\nThe rest of the proof is by induction on k (greedy packing).",
    "FPT on {C;, C;}-free graphs\n\nLemma\nIf H is an \u00a9-sparse graph with more than k(2k)'/* vertices then\n\nis a yes-instance.\nProof.\n\n\u00a9 H must contain a vertex with degree less than 2\n\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is <-sparse, it holds that |E(H\u2019)| <n?\n\nHowever, $< n?-* if and only ifn < (2k)\u201d*, contr\n\nThe rest of the proof is by induction on k (greedy packing).",
    "FPT on {C;, C;}-free graphs\n\nLemma\nIf H is an \u00a9-sparse graph with more than k(2k)'/* vertices then\nis a yes-instance.\n\nProof.\n\n+ H must contain a vertex with degree less than\n\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is =-sparse, it holds that |E(H\u2019)| <\n\nHowever, 2 < n?-* if and only if'n < (2k)\"/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy packing).",
    "FPT on {G;, C;}-free graphs\n\nLemma\nIf H is an <-sparse graph with more than k(2k)\"/* vertices then Z\n\nis a yes-instance.\n\nProof.\n\n\u00a9 H must contain a vertex with degree less than 2\n\n\u2018Assume otherwise, i.e., suppose that the minimum degree in\nHis at least ?. Then, |E(H)| > %\n\nSince H is c-sparse, it holds that |E(H\")| < n?\nHowever, 2 < n?- if and only if'n < (2k)!/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy packing)",
    "A familiar example: 15-puzzle\n\nhttps: //lorecioni.githu",
    "FPT on {G;, C;}-free graphs\n\nLemma\nIf H is an \u00a9-sparse graph with more than k(2k)\"/* vertices then Z\n\nis a yes-instance.\n\nProof.\n\n\u00a9 H must contain a vertex with degree less than 2\n\n\u2018Assume otherwise, i.e., suppose that the minimum degree in\nHis at least ?. Then, |E(H)| > %\n\nSince H is c-sparse, it holds that |E(H\")| < n\u00ae\nHowever, 2 <n?- if and only if'n < (2k)!/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy packing)",
    "FPT on {C3, C;}-free graphs\n\nLemma\nIf H is an \u00a9-sparse graph with more than k(2k)'/* vertices then\n\nis a yes-instance\n\nProof.\n\n+H must contain a vertex with degree less than\n\n\u2018* Assume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| >\n\nSince H is =-sparse, it holds that |E(H\u2019)| < n?\n\nHowever, $< n?-* if and only if'n < (2k)\"/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy packing)",
    "FPT on {C,, C,}-free graphs\n\nLemma\nIF H is an \u00a9-sparse graph with more than k(2k)'/* vertices then\nis a yes-instance,\n\nProof.\n\n+ H must contain a vertex with degree less than\n\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is <-sparse, it holds that |E(H\u2019)\n\nHowever, $< n?-* if and only if'n < (2k)\"/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy packing)",
    "FPT on {C3, C;}-free graphs\n\nLemma\nIf H is an \u00a9-sparse graph with more than k(2k)'/\u201cvertices then T\nis a yes-instance,\nProof.\n\u00a9 H must contain a vertex with degree less than 2\n\nAssume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)| > %\n\nSince H is <-sparse, it holds that |E(H\u2019)\n\nHowever, 2 < n?-* if and only if'n < (2k)*/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy packing)",
    "FPT on {G, G}-free graphs\n\nLemma\nIf H is an \u00a9-sparse graph with more than k(2k)\"/\u201cvertices then T\n\nis a yes-instance\nProof,\n+ H must contain a vertex with degree less than\n\n# Assume otherwise, i.e., suppose that the minimum degree in\nHis at least 2. Then, |E(H)\n\nSince H is =-sparse, it holds that |E(H\u2019)\n\nHowever, $< n?-* if and only if n < (2k)\"/*, contradiction.\n\nThe rest of the proof is by induction on k (greedy packing)",
    "FPT on {G, G}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen Z is a yes-instance. .\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a bi",
    "FPT on {G, G}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance. *\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a buffer.",
    "FPT on {G, G}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a bi",
    "FPT on {G, G}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a bi",
    "FPT on {G, G}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a buffer.",
    "A familiar example: 15-puzzle\n\nhttps: //lorecioni.githu",
    "FPT on {G, G}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a buffer.",
    "FPT on {G, G}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a buffer.",
    "FPT on {C3, C;}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a buffer.",
    "FPT on { C3, C;}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\n(VATA\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a buffer.",
    "FPT on {G, G}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a buffer.",
    "FPT on {C;, C;}-free graphs\n\nLemma\nIf J is (C3, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a buffer.",
    "FPT on { C3, C:}-free graphs\n\nLemma\nIf J is (C3, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a buffer.",
    "FPT on {C;, C;}-free graphs\n\nLemma\nIf J is (C3, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a buffer.",
    "FPT on {C;, C;}-free graphs\n\nLemma\nIf J is (C3, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a buffer.",
    "FPT on {G, G}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a buffer.",
    "A familiar example: 15-puzzle",
    "FPT on {C;, C;}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\n(VATA\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a buffer.",
    "FPT on {C3, C:}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a buffer.",
    "FPT on {C;, C;}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a buffer.",
    "FPT on {C;, C;}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\n(TAA\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a buffer.",
    "FPT on {G, G}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a buffer.",
    "FPT on {C;, C;}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\n(TAA\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a buffer.",
    "FPT on {C3, C:}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\n(TAA\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a buffer.",
    "FPT on {C3, C;}-free graphs\n\nLemma\nIf J is {C3, C4}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a buffer.",
    "FPT on { C3, C;}-free graphs\n\nLemma\nIf J is {C3, C4}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a buffer.",
    "FPT on {C3, C;}-free graphs\n\nLemma\nIf J is {C3, C4}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a buffer.",
    "A familiar example: 15-puzzle",
    "FPT on {C3, C;}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a buffer.",
    "FPT on { C3, C;}-free graphs\n\nLemma\nIf J is {Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a buffer.",
    "FPT on {C3, C;}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a buffer. a}",
    "FPT on { (3, C;}-free graphs\n\nLemma ,\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a buffer. 1",
    "FPT on {C, C;}-free graphs\n\nLemma ,\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a buffer.",
    "FPT on {C3, C,}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a bu",
    "FPT on {C3, C;}-free graphs\n\nLemma\nIJ is {Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a bu",
    "FPT on {C, C;}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen Z is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a buffer.",
    "FPT on {(3, C;}-free graphs\n\nLemma\nIf J is {C3, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a buffer.",
    "FPT on {(3, C;}-free graphs\n\nLemma\nIf J is {C3, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a buffer.",
    "A familiar example: 15-puzzle",
    "FPT on {G, G}-free graphs\n\nLemma\nIf J is {C3, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a buffer.",
    "FPT on {G, G}-free graphs\n\nLemma\nIFJ is (Cs, Cy}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a buffer.",
    "FPT on {G, G}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a buffer.",
    "FPT on {G, G}-free graphs\n\nLemma\nIf J is {C3, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a buffer.",
    "FPT on {G, G}-free graphs\n\nLemma\nIf J is (C3, C4}-free and contains a vertex v of degree at least 3k\n\nthen Z is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a buffer.",
    "FPT on {(3, C;}-free graphs\n\nLemma\nIFJ is {Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a buffer.",
    "FPT on {C3, C;}-free graphs\n\nLemma\nIFJ is {Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a buffer.",
    "FPT on {C3, C;}-free graphs\n\nLemma\nIFJ is {Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a buffer.",
    "FPT on {C;, C,}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a buffer.",
    "FPT on { C3, C;}-free graphs\n\nLemma\nIJ is {Cs, Ca}-free and contains a vertex v of degree at least 3k,\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a buffer.",
    "A familiar example: 15-puzzle\n\nhttps: //lorecioni .github",
    "FPT on {C3, C;}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a buffer.",
    "FPT on {G, G}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a buffer.",
    "FPT on {G, G}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a buffer.",
    "FPT on {C3, C;}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a bu",
    "FPT on {C3, C;}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a buffer.",
    "FPT on {G, G}-free graphs\n\nLemma\nIf J is {C3, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a buffer.",
    "FPT on {G, G:}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a buffer.",
    "FPT on {G, G,}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a buffer.",
    "FPT on {G, G:}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen Z is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a bu",
    "FPT on {G, G,}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a bu",
    "A familiar example: 15-puzzle\n\nhttps: //lorecioni .github",
    "FPT on {G, G}-free graphs\n\nLemma\nIf J is {C3, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a buffer.",
    "FPT on {G, G,}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a bu",
    "FPT on {G, G:}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a buffer.",
    "FPT on {G, G}-free graphs\n\nLemma\nIFJ is {Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a buffer.",
    "FPT on {G;, G}-free graphs\n\nLemma\nIFJ is {Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nasa neighbor in SU T and we can use them as a buffer.",
    "FPT on {G, G}-free graphs\n\nLemma\nIFJ is {Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a buffer.",
    "FPT on {G, G}-free graphs\n\nLemma\nIf J is (Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a buffer.",
    "FPT on {G, G}-free graphs\n\nLemma\nIJ is {Cs, Ca}-free and contains a vertex v of degree at least 3k\n\nthen T is a yes-instance.\n\nProof.\n\nIf w has at least 3k neighbors then at least k of them only have w\n\nas a neighbor in SU T and we can use them as a buffer.",
    "FPT on {C3, C;}-free graphs\n\nTheorem\nIf H is e-sparse, \u00a9 > 0, and J is {C3, Ca}-free then I admits a\n\nkernel with O(k? + k\u2122*/*) vertices.\nProof.\n\n\u00a9 If H contains more than k(2k)}/\u00b0 vertices then Z is a\n\nyes-instance\n\u00a9 If J contains a vertex o 3k or more then, again, Z is a\nyes-instance.\n\u00a9 Putting it all together, we have |S U T|\nNe(SU T)| < 2k(3k ~ 1) = 6K? \u2014 2k = O(K2), and\nvc) Tl < K(2k)!/e = O(k+\u00a5/*),",
    "FPT on {G,, G,}-free graphs\n\nTheorem\nIF H is =-sparse, \u00a2 > 0, and J is (Cz, Cs}-free then Z admits a\nkernel with O(k? + k**/*) vertices\nProof.\n@ If H contains more than k(2k)}/\u00b0 vertices then Z is a\nyes-instance.\n\u00a9 If J contains a vertex of degree 3k or more then, again, Z is a\nyes-instance.\n\u00a9 Putting it all together, we have |S UT\nNe(SU T)| < 2k(3k \u2014 1) = 6k? \u2014 2k\nV(G)\\ Ne[SU T]| < k(2k)\u00a5/\" = O( Kt",
    "A familiar example: 15-puzzle\n\nhttps: //lorecioni .github",
    "FPT on {G,, G,}-free graphs\n\nTheorem\nIf H is e-sparse, = > 0, and J is {C3, Ca}-free then I admits a\n\nkernel with O(k? + k**/*) vertices\nProof.\n\u00a9 If H contains more than k(2k)!/\u00b0 vertices then Z is a\nyes-instance.\n\u00a9 If J contains a vertex of degree 3k or more then, again, Z is a\nyes-instance.\n# Putting it all together, we have |S U T| < 2k\nNe($U T)| < 2k(3k \u2014 1) = 6K? \u2014 2k = O(K?), and.\nV(G)\\ Ne[SU T]| < k(2k)\u00a5* = O(kE+/>)",
    "FPT on { C3, C;}-free graphs\n\nTheorem\nIf H is e-sparse, = > 0, and J is {C3, Ca}-free then I admits a\nkernel with O(k? + k*1/*) vertices.\n\nProof.\n\n# If H contains more than k(2k)}/\u00b0 vertices then Z is a\nyes-instance.\n\n\u00a9 If J contains a vertex of degree 3k or more then, again, Z is a\nyes-instance\n\n\u00a9 Putting it all together, we have |S U T| < 2k\nNc($U T)| < 2k(3k \u2014 1) = 6k? \u2014 2k = O(K?), and\nV(G)\\ Ne[SU T]| < k(2k)\u00a5* = O(kE+/9)",
    "FPT on { C3, C;}-free graphs\n\nTheorem\nIf H is e-sparse, = > 0, and J is {C3, Ca}-free then I admits a\nkernel with O(k? + k*1/*) vertices.\n\nProof.\n\n# If H contains more than k(2k)}/\u00b0 vertices then Z is a\nyes-instance.\n\n\u00a9 If J contains a vertex of degree 3k or more then, again, Z is a\nyes-instance\n\n\u00a9 Putting it all together, we have |S U T| < 2k\nNc($U T)| < 2k(3k \u2014 1) = 6k? \u2014 2k = O(K?), and\nV(G)\\ Ne[SU T]| < k(2k)\u00a5* = O(kE+/9)",
    "FPT on { C3, C;}-free graphs\n\nTheorem\nIf H is e-sparse, = > 0, and J is {C3, Ca}-free then I admits a\nkernel with O(k? + k*1/*) vertices.\n\nProof.\n\u00a9 If H contains more than k(2k)!/\u00b0 vertices then Z is a\nyes-instance.\n\n\u00a9 If J contains a vertex of degree 3k or more then, again, Z is a\nyes-instance\n\n\u00a9 Putting it all together, we have |S U T| < 2k\nNc(SU T)| < 2k(3k \u2014 1) = 6k? \u2014 2k = O(K?), and\nV(G)\\ Ne[SU T]| < k(2k)\u00a5* = O(k+/*)",
    "FPT on { C3, C;}-free graphs\n\nTheorem\nIf H is e-sparse, = > 0, and J is {C3, Ca}-free then I admits a\nkernel with O(k? + k*1/*) vertices.\n\nProof.\n\n# If H contains more than k(2k)}/\u00b0 vertices then Z is a\nyes-instance.\n\n\u00a9 If J contains a vertex of degree 3k or more then, again, Z is a\nyes-instance\n\n\u00a9 Putting it all together, we have |S U T| < 2k\nNc($U T)| < 2k(3k \u2014 1) = 6k? \u2014 2k = O(K?), and\nV(G)\\ Ne[SU T]| < k(2k)\u00a5* = O(kE+/9)",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (22368@aub.edu.lb)\n\nAmerican Univ f Beirut",
    "FPT on { C3, C;}-free graphs\n\nTheorem\nIf H is e-sparse, = > 0, and J is {C3, Ca}-free then I admits a\nkernel with O(k? + k*1/*) vertices.\n\nProof.\n\n# If H contains more than k(2k)}/\u00b0 vertices then Z is a\nyes-instance.\n\n\u00a9 If J contains a vertex of degree 3k or more then, again, Z is a\nyes-instance\n\n# Putting it all together, we have |S U T| < 2k\nNc($U T)| < 2k(3k \u2014 1) = 6k? \u2014 2k = O(K?), and\nV(G)\\ Ne[SU T]| < k(2k)\u00a5* = O(k+/9)",
    "FPT on { C3, C;}-free graphs\n\nTheorem\nIf H is e-sparse, = > 0, and J is {C3, Ca}-free then I admits a\nkernel with O(k? + k*1/*) vertices.\n\nProof.\n\n# If H contains more than k(2k)}/\u00b0 vertices then Z is a\nyes-instance.\n\n\u00a9 If J contains a vertex of degree 3k or more then, again, Z is a\nyes-instance\n\n\u00a9 Putting it all together, we have |S U T| < 2k\nNc($U T)| < 2k(3k \u2014 1) = 6k? \u2014 2k = O(K?), and\nV(G)\\ Ne[SU T]| < k(2k)\u00a5* = O(kE+/9)",
    "FPT on {C;, C;}-free graphs\n\nTheorem\nIf H is e-sparse, \u00a9 > 0, and J is {C3, Ca}-free then I admits a\nkernel with O(k? + k*1/*) vertices.\n\nProof.\n\n# If H contains more than k(2k)}/\u00b0 vertices then Z is a\nyes-instance.\n\n\u00a9 If J contains a vertex of degree 3k or more then, again, Z is a\nyes-instance\n\n\u00a9 Putting it all together, we have |S U T| < 2k\nNc($U T)| < 2k(3k \u2014 1) = 6k? \u2014 2k = O(K?), and\nV(G)\\ Ne[SU T]| < k(2k)\u00a5* = O(k+/9)",
    "FPT on { C3, C;}-free graphs\n\nTheorem\nIf H is e-sparse, = > 0, and J is {C3, Ca}-free then I admits a\n\nkernel with O(k? + k**/*) vertices\nProof.\n@ If H contains more than k(2k)}/\u00b0 vertices then Z is a\nyes-instance\n\u00a9 If J contains a vertex of degree 3k or more then, again, Z is a\nyes-instance\n# Putting it all together, we have |S U T| < 2k\nNc(SU T)| < 2k(3k \u2014 1) = 6k? \u2014 2k = O(K?), and\nV(G)\\ Ne[SU T]| < k(2k)\u00a5* = O(k+/*),",
    "FPT on { (3, C;}-free graphs\n\nTheorem\nIf H is e-sparse, = > 0, and J is {C3, Ca}-free then I admits a\n\nkernel with O(k? + k**/*) vertices.\nProof.\n# If H contains more than k(2k)!/\u00b0 vertices then Z is a\nyes-instance.\n\u00a9 If J contains a vertex of degree 3k or more then, again, Z is a\nyes-instance\n\u00a9 Putting it all together, we have |S U T| < 2k\nNc(SU T)| < 2k(3k \u2014 1) = 6k? \u2014 2k = O(K?), and\nV(G)\\ Ne[SU T]| < k(2k)\u00a5* = O(k+/*)",
    "A familiar example: 15-puzzle\n\nhttps: //lorecioni .github",
    "FPT on { C3, C;}-free graphs\n\nTheorem\nIf H is e-sparse, = > 0, and J is {C3, Ca}-free then I admits a\n\nkernel with O(k? + k*4/*) vertices.\n\nProof. 7\n\n\u00a9 If H contains more than (2k)}/\u00b0 vertices then Z is a\nyes-instance\n\n\u00a9 If J contains a vertex of degree 3k or more then, again, Z is a\nyes-instance\n\n\u00a9 Putting it all together, we have |S U T| < 2k\nNc(SU T)| < 2k(3k \u2014 1) = 6k? \u2014 2k = O(K?), and\nV(G)\\ Ne[SU T]| < k(2k)\u00a5* = O(kE+/*)",
    "FPT on {G,, G}-free graphs\n\nTheorem\nIf H is e-sparse, \u00a2 > 0, and J is (Cs, C4}-free then Z admits a\n\nkernel with O(k? + k**1/*) vertices.\n\nProof.\n\n\u00a9 If H contains more than |k(2k)}/\u00b0 \\vertices then Z is a\nyes-instance,\n\n\u00a9 If J contains a vertex of fegree 3k or more then, again, Z isa\nyes-instance.\n\n\u00a9 Putting it all together, we have |S UT\nNo($U T)| < 2k(3k \u2014 1) = 6K? \u2014 2k = O(K?), and.\nV(G)\\ Ne[SU T]| < k(2k)\u00a5* = O(kI+/*)",
    "FPT on {G, G,}-free graphs\n\nTheorem\nIf H is =-sparse, \u00a2 > 0, and J is {Cs, C4}-free then Z admits a\n\nkernel with O(k? + k**1/*) vertices.\n\nProof.\n\u00a9 If H contains more than |k(2k)}/\u00b0 vertices then Z is a\nyes-instance,\n\n\u00a9 If J contains a vertex of degree 34 or more then, again, Z is a\nyes-instance.\n\n# Putting it all together, we have | U T| < 2k\nNo($U T)| < 2k(3k ~ 1) = 6K? \u2014 2k = O(K?), and.\nV(G)\\ Ne[SU T]| < k(2k)\u00a5* = O(k+/9)",
    "FPT on {G,, G}-free graphs\n\nTheorem\nIf H is =-sparse, \u00a2 > 0, and J is {Cs, C4}-free then Z admits a\n\nkernel with O(k? + k**1/*) vertices.\n\nProof.\n\n\u00a9 If H contains more than |k(2k)}/\u00b0 vertices then Z\n\nyes-instance, -\n\n\u00a9 If J contains a vertex of degred 3k pr more then, again, Z isa\nyes-instance.\n\n\u00a9 Putting it all together, we have |S U T|\nNe($U T)| < 2k(3k \u2014 1) = 6k? \u2014 2k\nV(G)\\ Ne[SU T]] < K(2Kk)/\u00b0 = Of",
    "FPT on { C3, C;}-free graphs\n\nTheorem\nIf H is e-sparse, <> 0, and J is {Cs, C4}-free then T admits a\nkernel with O(k? + k**1/*) vertices\n\nProof.\n\n\u00a9 If H contains more than |k(2k)!/\u00b0 vertices then Z is a\nyes-instance,\n\n\u00a9 If J contains a vertex of degred 3k pr more then, again, Z is a\n\nyes-instance\n\u00a9 Putting it all together, we have |S U T|\n\nNe(SU T)| < 2k(3k \u2014 1) = 6k? \u2014 2k\nV(G)\\ Ne[SU T]| < K(2k)\u00a5/* = O(Kt",
    "FPT on { C3, C;}-free graphs\n\nTheorem\nIf H is e-sparse, <> 0, and J is {Cs, C4}-free then T admits a\nkernel with O(k? + k**1/*) vertices\n\nProof.\n\u00a9 If H contains more than |k(2k)!/\u00b0 vertices then Z is a\nyes-instance,\n\n\u00a9 If J contains a vertex of degred 3k pr more then, again, Z is a\nyes-instance\n\n\u00a9 Putting it all together, we have |S U T|\nINc($U T)| < 2k(3k \u2014 1) = 6k? \u2014 2k = O(k?), and\nV(G)\\ No[SU T]| < K(2k)/* = O(kE+Y*)",
    "FPT on { C3, C;}-free graphs\n\nTheorem\nIF H is =-sparse, <> 0, and J is {Cs, C4}-free then T admits a\nkernel with O(k? + k**4/*) vertices\n\nProof.\n\u00a9 If H contains more than |k(2k)!/\u00b0 vertices then Z is a\nyes-instance,\n\n\u00a9 If J contains a vertex of degred 3k pr more then, again, Z is a\nyes-instance\n\n\u00a9 Putting it all together, we have |S U T| <\\2k\n\n4Ng(SU T)| < 2k(3k \u2014 1) = 6k? \u2014 2k = O(k?), and\nV(G)\\ Ne[SU T]] < K(2k)/* = O(kE+Y/*)",
    "FPT on { C3, C;}-free graphs\n\nTheorem\nIf H is e-sparse, <> 0, and J is {Cs, C4}-free then T admits a\n\nkernel with O(k? + k**1/*) vertices.\n\nProof.\n\u00a9 If H contains more than |k(2k)!/\u00b0 vertices then Z is a\nyes-instance,\n\ne If J contains a vertex of degree 3k pr more then, again, Z is a\nyes-instance\n\n\u00a9 Putting it all together, we have |S U T|\nNc(SU T)| <2k(3k \u2014 1) = 6k? \u2014 2k\nV(G) \\ Ne[SU T]| < k(2k)/* = O(k#",
    "FPT on {G;, C;}-free graphs\n\nTheorem\nIf H is e-sparse, <> 0, and J is {Cs, C4}-free then T admits a\n\nkernel with O(k? + k**1/*) vertices.\n\nProof.\n\u00a9 If H contains more than |k(2k)}/\u00b0 vertices then Z is a\nyes-instance.\n\n\u00a9 If J contains a vertex of degred 3k pr more then, again, Z is a\nyes-instance\n\n\u00a9 Putting it all together, we have |S U T|\nNo($U T)| < 2k(3k \u2014 1f = 6k? \u2014 2k\nV(G)\\ Ne[SU T]] < K(2k)/* = O(k",
    "FPT on {G;, C;}-free graphs\n\nTheorem\nIF H is e-sparse, \u00a2 > 0, and J is {Cs, C4}-free then Z admits a\n\nkernel with O(k? + k**1/*) vertices.\n\nProof.\n\u00a9 If H contains more than |k(2k)!/\u00b0 vertices then Z is a\nyes-instance.\n\n\u00a9 If J contains a vertex of degred 3k pr more then, again, Z is a\nyes-instance\n\n\u00a9 Putting it all together, we have |S \u201cT| <\\2k\nNe(SU T)| < 2k(3k \u2014 1) = 6k? \u2014 2k = O(k2), and\nV(G) \\ No[$U T]| < k(2k)* (kt ).",
    "The reconfiguration graph\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "FPT on {G;, C;}-free graphs\n\nTheorem\nIF H is e-sparse, \u00a2 > 0, and J is {Cs, C4}-free then Z admits a\n\nkernel with O(k? + k**1/*) vertices.\n\nProof.\n\u00a9 If H contains more than |k(2k)!/\u00b0 vertices then Z is a\nyes-instance,\n\n\u00a9 If J contains a vertex of degred 3k pr more then, again, Z is a\nyes-instance\n\n\u00a9 Putting it all together, we have |S U T| <\\2k\nNe(SU T)| < 2k(3k \u2014 1) = 6k? \u2014 2k = O(k2), and\nV(G) \\ No[$U T]| < k(2k)* (kt ).",
    "FPT on { (3, C;}-free graphs\n\nTheorem\nIf H is e-sparse, \u00a9 > 0, and J is {C3, Ca}-free then I admits a\n\nkernel with O(k? + k*1/*) vertices.\nProof.\n\u00a9 If H contains more than |k(2k)}/\u00b0 vertices then Z is a\nyes-instance.\n\n\u00a9 If J contains a vertex of degred 3k pr more then, again, T is a\nyes-instance\n\n\u00a9 Putting it all together, we have |S U T|\nNe($U T)| < 2k(3k \u2014 1) = 6k? \u2014 2k = O(K?), and\nV(G) \\ Ne[S U T]| <Ik(2k)\u00a5* = O(4+\u00a5/*)",
    "FPT on {C3, C;}-free graphs\n\nTheorem\nIf H is e-sparse, = > 0, and J is {C3, Ca}-free then I admits a\n\nkernel with O(k2 + k**1/*) vertices.\n\nProof.\n\n\u00a9 If H contains more than |k(2k)}/\u00b0 fertices then Z is a\nyes-instance\n\n\u00a9 If J contains a vertex of degred 3k pr more then, again, Tis a\nyes-instance\n\n\u00a9 Putting it all together, we have |S U T| <(k\nNe(SU T)| < 2k(3k \u2014 1) = 6k? \u2014 2k = O(k?)\nV(G) \\ No{SU T]| <]k(2k)/*]= O(K+/*)\n\nand",
    "FPT on {C3, C;}-free graphs\n\nTheorem\nIf H is e-sparse, = > 0, and J is {C3, Ca}-free then I admits a\n\nkernel with O(k? + k**1/*) vertices.\n\nProof.\n\n\u00a9 If H contains more than |k(2k)}/\u00b0 fertices then Z is a\nyes-instance\n\n\u00a9 If J contains a vertex of degred 3k pr more then, again, T is a\nyes-instance\n\n\u00a9 Putting it all together, we have |S U T| <(k\nNe(SU T)| < 2k(3k \u2014 1) = 6k? \u2014 2k = O(k?)\nV(G) \\ Ne[S U T]| <|k(2k)* (k=)",
    "FPT on {G, G}-free graphs\n\nTheorem\nIF H is e-sparse, \u00a2 > 0, and J is {Cs, C4}-free then Z admits a\nkernel with J0(k2 + k3/\u00b0) vertices\nProof.\n\u00a9 If H contains more than (2k)}/\u00b0 vertices then Z is a\nyes-instance\n\u00a9 If J contains a vertex of degred 3k pr more then, again, Z is a\nyes-instance\n\u00a9 Putting it all together, we have |S U T| <(2k\nNe(SU T)| < 2k(3k \u2014 1) = 6k? \u2014 2k = O(K2), and\nV(G)\\ Ne[S U T]| <]k(2k)\u00a5*|= O(k+/*)",
    "FPT on { C3, C;}-free graphs\n\nTheorem\nIf H is e-sparse, = > 0, and J is {C3, Ca}-free then I admits a\n\nkernel with (O(k2 + KY vertices.\n\nProof.\n\n\u00a9 If H contains more than |k(2k)!/\u00b0 vertices then Z is a\nyes-instance.\n\n\u00a9 If J contains a vertex of degred 3k pr more then, again, Z is a\nyes-instance\n\n\u00a9 Putting it all together, we have |S U T| <\\2k\nNe(SU T)| < 2k(3k 1) = 6k? \u2014 2k = O(K2), and\nV(G)\\ Ne[S U T]| <]k(2k)\u00a5*|= O(k+4/*)",
    "FPT on {C3, C,}-free graphs\n\nTheorem\nIf H is e-sparse, \u00a9 > 0, and J is {C3, Ca}-free then I admits a\n\nkernel with O(k? + K\u21221) vertices.\nProof\nIf H contains more than |k(2k)}/\u00b0 vertices then Z is a\nyes-instance\n\nIf J contains a vertex of degred 3k pr more then, again, Z is a\nyes-instance\n\nPutting it all together, we have |S U T| <(2k.\n\nNc(SU T)| < 2k(3k = 1) = 6k? \u2014 2k = O(K?), and\n\nV(G)\\ Ne[S U T]| <]k(2k)\u00a5*|= O(k+4/\")",
    "FPT on {C;, C;}-free graphs\n\nTheorem\nIf H is e-sparse, = > 0, and J is {C3, Ca}-free then I admits a\n\nkernel with (O(k? + KA\") vertices.\n\nProof.\n\n\u00a9 If H contains more than |k(2k)}/\u00b0 fertices then Z is a\nyes-instance\n\n\u00a9 If J contains a vertex of degred 3k pr more then, again, T is a\nyes-instance\n\n\u00a9 Putting it all together, we have |S U T| <\\2k\nNo($U T)| < 2k(3k = 1) = 6K? \u2014 2k = O(K?), and,\nV(G)\\ Ne[Su T]| <]k(2k)\u00a5*|= O(k+/\")",
    "FPT on {C;, C;}-free graphs\n\nTheorem\nIf H is e-sparse, \u00a9 > 0, and J is {C3, Ca}-free then I admits a\n\nkernel with O(k? + k**/\u00b0) vertices.\ncernel with O(k ) vertices \u2018\n\nProof.\n\n\u00a9 If H contains more than k(2k)}/\u00b0 vertices then Z is\nyes-instance\n\n\u00a9 If J contains a vertex of degree 3k or more then, again, Z is a\nyes-instance\n\n# Putting it all together, we have |S UT\nNe(SU T)| < 2k(3k \u2014 1) = 6k? \u2014 2k = C\nV(G)\\ Ne[SU T]| < k(2k)\u00a5/* = O(K",
    "FPT on {C3, C,}-free graphs\n\nCorollary\nTOKEN JUMPING parameterized by k admits a kernel with at\n\nmost O(k?) vertices on {Cs, Cx}-free graphs as well as bipartite\n\nCe-free graphs. .\nProof\n\u00a9 Since J is (C3, Ca}-free, if J contains more than 6k?\nvertices, then Z is a yes-instance\n\n\u00a9 Cy-free graphs with O(k?/(log k)) vertices contain an\n\nindependent set of size at least k\n\n# Hence, if H contains more than O(K?/(log k)) vertices,\n\nT is a yes-instance.",
    "The reconfiguration graph\n\ni ia\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "FPT on {C3, C;}-free graphs\n\nTheorem\nIf H is e-sparse, \u00a2 > 0, and J is {Cs. Cs}-free then Z admits a\n\nkernel with O(k? + k**1/*) vertices.\n\nProof. .\n\n\u00a9 If H contains more than k(2k)!/\u00b0 vertices then Z is a\nyes-instance.\nIf J contains a vertex of degree 3k or more then, again\nyes-instance\nPutting it all together, we have |S U T| < 2k\nINc($U T)| < 2k(3k \u2014 1) = 6k? \u2014 2k = O(k?), and\nV(G)\\ No[SU T]] < K(2k)!/* = O(kEHY/*)",
    "FPT on {C3, C;}-free graphs\n\nTheorem\nIf H is e-sparse, \u00a2 > 0, and J is {Cs. Cs}-free then I admits a\n\nkernel with O(k? + k**1/*) vertices.\n\nProof.\n\u00a9 If H contains more than k(2k)!/\u00b0 vertices then Z is a\nyes-instance.\n\n\u00a9 If J contains a vertex of degree 3k or more then, again, Z is a\nyes-instance.\n\n\u00a9 Putting it all together, we have |S UT\nNe(SU T)| < 2k(3k \u2014 1) = 6k? \u2014 2k\nV(G)\\ Ne[SU T]| < K(2k)\u00a5/* = O(Kt",
    "FPT on {G, G}-free graphs\n\nTheorem\nIf H is e-sparse, <> 0, and J is {Cs. C4}-free then T admits a\n\nkernel with O(k? + k**1/*) vertices.\n\nProof. =\n\u00a9 If H contains more than k(2k)!/* vertices then Z is a\nyes-instance\n\n\u00a9 If J contains a vertex of degree 3k or more then, again, Z is a\nyes-instance\n\n\u00a9 Putting it all together, we have |S U T| < 2k\nNe(SU T)| < 2k(3k \u2014 1) = 6k? \u2014 2k = O(K2), and\nV(G)\\ Ne[SU T]| < k(2k)\u00a5* = O(k+/*),",
    "FPT on {G, G}-free graphs\n\nCorollary\nTOKEN JUMPING parameterized by k admits a kernel with at\nmost O(k?) vertices on {C, C4}-free graphs as well as bipartite\n\nCa-free graphs. \u00ab\nProof,\n\n\u00a9 Since J is {C3, Ca}-free, if J contains more than 6k? \u2014 2k\nvertices, then Z is a yes-instance\n\u00a9 Cy-free graphs with O(k?/(log k)) vertices cor\n\nindependent set of size at least k\n\n# Hence, if H contains more than O(k?/(log k)) vertices, then\n\nT is a yes-instance.",
    "FPT on {G, G}-free graphs\n\nCorollary\nTOKEN JUMPING parameterized by k admits a kernel with at\nmost O(k?) vertices on { C3, C4}-free graphs as well as bipartite\n\nCe-free graphs.\nProof\n\n@ Since J is (Cs, Ca}-free, if J contains more than 6k? \u2014 2k\nvertices, then Z is a yes-instance\n\n\u00a9 Cy-free graphs with O(k?/(log k)) vertices contain an\nindependent set of size at least k\n\nHence, if H contains more than O(k?/(log k)) vertices, then\n\nT is a yes-instance.",
    "FPT on {G, G}-free graphs\n\nCorollary\nTOKEN JUMPING parameterized by k admits a kernel with at\n\nmost O(k?) vertices on { C3, Cy}-free graphs as well as bipartite\nCa-free graphs.\nProof\n\n@ Since J is (Cs, Ca}-free, if J contains more than 6k? \u2014 2k\n\nvertices, then Z is a yes-instance\n\u00a9 Cy-free graphs with O(k?/(log k)) vertices cor\n\nindependent set of size at least k\n\n\u00ab Hence, if H contains more than O(k?/(log k)) vertices, then\n\nT is a yes-instance.",
    "FPT on {G, G}-free graphs\n\nCorollary\nTOKEN JUMPING parameterized by k admits a kernel with at\n\nmost O(k?) vertices on {C3, Cy}-free graphs as well as bipartite\nCa-free graphs.\nProof\n\n@ Since J is (Cs, C}-free, if J contains more than 6k? \u2014 2k\n\nvertices, then Z is a yes-instance\n\u00a9 Cy-free graphs with O(k?/(log k)) vertices cor\n\nindependent set of size at least k\n\nHence, if H contains more than O(k?/(log k)) vertices, then\n\nT is a yes-instance.",
    "FPT on {G, G}-free graphs\n\nCorollary\n\nTOKEN JUMPING parameterized by k admits a kernel with at\n\nmost O(k?) vertices on {C3, Cx}-free graphs as well as bipartite\n\nCe-free graphs.\nProof\n@ Since J is (Cs, Ca}-free, if J contains more than 6K? \u2014 2k\nvertices, then Z is a yes-instance.\n\u00a9 Gy-free graphs with O(k?/(log k)) vertices cor\nindependent set of size at least k\n\n# Hence, if H contains more than O(K?/(log k)) vertices, then\n\nT is a yes-instance.",
    "FPT on {G, G}-free graphs\n\nCorollary\n\nTOKEN JUMPING parameterized by k admits a kernel with at\n\nmost O(k?) vertices on {C3, Cx}-free graphs as well as bipartite\n\nCe-free graphs.\nProof\n@ Since J is (Cs, Ca}-free, if J contains more than 6K? \u2014 2k\nvertices, then Z is a yes-instance.\n\u00a9 Gy-free graphs with O(k?/(log k)) vertices cor\nindependent set of size at least k\n\nHence, if H contains more than O(K?/(log k)) vertices, then\n\nT is a yes-instance.",
    "FPT on {G, G}-free graphs\n\nCorollary\nTOKEN JUMPING parameterized by k admits a kernel with at\nmost O(k) vertices on {C, C4}-free graphs as well as bipartite\nCa-free graphs.\nProof\n\n# Since J is (C3, Ca}-free, if J contains more than\nvertices, then Z is a yes-instance.\n\n\u00a9 Gy-free graphs with O(k?/(log k)) vertices contain an\nindependent set of size at least k\n\n# Hence, if H contains more than O(k?/(log k)) vertices, then\n\nT is a yes-instance.",
    "The reconfiguration graph\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "FPT on {G, G}-free graphs\n\nCorollary\n\nTOKEN JUMPING parameterized by k admits a kernel with at\n\nmost O(k?) vertices on {C3, Cx}-free graphs as well as bipartite\n\nCe-free graphs.\nProof\n@ Since J is (Cs, Ca}-free, if J contains more than 6K? \u2014 2k\nvertices, then Z is a yes-instance.\n\u00a9 Gy-free graphs with O(k?/(log k)) vertices cor\nindependent set of size at least k\n\n# Hence, if H contains more than O(K?/(log k)) vertices, then\n\nT is a yes-instance.",
    "FPT on {G, G}-free graphs\n\nCorollary\n\nTOKEN JUMPING parameterized by k admits a kernel with at\n\nmost O(k?) vertices on {C3, Cx}-free graphs as well as bipartite\n\nCa-free graphs.\nProof\n# Since J is (C3. Ca}-free, if J contains more than 6k? \u2014 2k\nvertices, then Z is a yes-instance.\n\u00a9 Cy-free graphs with O(k?/(log k)) vertices cor\n\nindependent set of size at least k\n\nHence, if H contains more than O(k?/(log k)) vertices, then\n\nT is a yes-instance.",
    "FPT on {C, C;}-free graphs\n\nCorollary ;\nTOKEN JUMPING parameterized by k admits a kernel with at\n\nmost O(k*) vertices on { C3, C4}-free graphs as well as bipartite\nCe-free graphs.\n\nProof\nC;}-free, if J contains more than 6k:\nis a yes-instance\n\u00a9 Gy-free graphs with O(k2/(log k)) vertices cor\nindependent set of size at least k\n\nHence, if H contains more than O(K?/(log k)) vertices, then\n\nT is a yes-instance.",
    "FPT on { C3, C:}-free graphs\n\nCorollary\nTOKEN JUMPING parameterized by k admits a kernel with at\n\nmost O(k*) vertices on { C3, C4}-free graphs as well as bipartite\nCq-free graphs.\nProof ,\n\nC\u00e9}-free, if J contains more than\n\nis a yes-instance.\n\n\u00a9 Gy-free graphs with O(k2/(log k)) vertices cor\n\nindependent set of size at least k\n\nHence, if H contains more than O(k?/(log k)) vertices, then\n\nT is a yes-instance.",
    "FPT on {G, G}-free graphs\n\nCorollary\nTOKEN JUMPING parameterized by k admits a kernel with at\nmost O(k?) vertices on {C3, Cx}-free graphs as well as bipartite\nCe-free graphs.\nProof 2\n\n\u00a9 Since J is (C3. Ca}-free, if J contains more than\\6k?\nvertices, then T is a yes-instanc\n\n\u00a9 Cy-free graphs with O(k?/(log k)) vertices contain an\nindependent set of size at least k\n\nHence, if H contains more than O(K?/(log k)) vertices,\n\nT is a yes-instance.",
    "FPT on {G, G}-free graphs\n\nCorollary\nTOKEN JUMPING parameterized by k admits a kernel with at\n\nmost O(k?) vertices on {C3, Ca}-free graphs as well as bipartite\nCe-free graphs.\n\nProof,\n\n\u00a9 Since J is (C3. Ca}-free, if J contains more than\\6k? \u2014 2k\nvertices, then Z is a yes-instanc\n\n\u00a9 G-free graphs with O(k?/(log k)) vertices contain an\n\nindependent set of size at least k\n\n# Hence, if H contains more than O(k?/(log k)) vertices, then\n\nT is a yes-instance.",
    "FPT on {G, G}-free graphs\n\nCorollary\nTOKEN JUMPING parameterized by k admits a kernel with at\n\nmost O(k\u00ae) vertices on {C3 Ca}-free graphs as well as bipartite\nCg-free graphs.\nProof.\n\n# Since J is (C3. Ca}-free, if J contains more than\\6k? \u2014 2k\n\nvertices, then Z is a ges-instance\n\n\u00a9 Cy-free graphs with O(k?/(log k)) vertices contain an\n\nindependent set of size at least k\n\n# Hence, if H contains more than O(k?/(log k)) vertices, then\n\nT is a yes-instance.",
    "FPT on {C3, C;}-free graphs\n\nCorollary\nTOKEN JUMPING parameterized by k admits a kernel with at\n\nmost O(k?) vertices on {C;, Cy}-free graphs as well as bipartite\nCa-free graphs\nProof.\n\n# Since J is {C3. Ca}-free, if J contains more than\\6k? \u2014 2k\n\nvertices, then Z is a yes-instance\n\n\u00ab Gree graphs with O(k2/(log k)) vertices contain an\n\nindependent set of size at least k\n\n# Hence, if H contains more than O(K?/(log k)) vertices, then\nT is a yes-instance",
    "FPT on {C3, C;}-free graphs\n\nCorollary\nTOKEN JUMPING parameterized by k admits a kernel with at\n\nmost O(k?) vertices on {C;, Cy}-free graphs as well as bipartite\n4-free graphs.\nProof.\n\n# Since J is {C3. Cy}-free, if J contains more than\\6k? \u2014 2k\nvertices, then Z is a yes-instance.\n\n| Cs-free graphs with O(k?/(log k)) vertices contain an\n\nindependent set of size at least k\n\n# Hence, if H contains more than O(K?/(log k)) vertices, then\n\nT is a yes-instance.",
    "FPT on {C3, C;}-free graphs\n\nCorollary\nTOKEN JUMPING parameterized by k admits a kernel with at\nmost O(k?) vertices on {C3, C4}-free graphs as well as bipartite\nCe-free graphs.\nProof\n\n@ Since J is (Cs. Ca}-free, if J contains more than\\6k? \u2014 2k\nvertices, then Z is a yes-instance.\n\n\u00ab| C-free graphs with O(k?/(log k)) vertices contain an\nindependent set of size at least k\n\n# Hence, if H contains more than O(k\n\n(log k)) vertices, then\nT is a yes-instance",
    "The reconfiguration graph\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "FPT on { C3, C;}-free graphs\n\nCorollary\nTOKEN JUMPING parameterized by k admits a kernel with at\n\nmost O(k) vertices on { C3, C4}-free graphs as well as bipartite\n\nCa-free graphs.\nProof\n# Since J is {C3, Ca}-free, if J contains more than\\6k? \u2014 2k\nvertices, then TZ is a yes-instance.\n\u00ab| Cs-free graphs with O(k2/(log k)) vertices contain an\u00e9\nindependent set of size at least k\n\u00abHence, if H contains more than O(K?/(log k)) vertices, then\n\nTis a yes-instance.",
    "FPT on {C:, Gi}\n\nCorollary\nTOKEN JUMPING parameterized by k admits a kernel with at\n\nmost O(k) vertices on { C3, C4}-free graphs as well as bipartite\n\nCs-free graphs.\nProof\n# Since J is {C3, Ca}-free, if J contains more than\\6k? \u2014 2k\nvertices, then TZ is a yes-instance.\n| Cs-free graphs with O(k2/(log k)) vertices cor\nindependent set of size at least k.7\nHence, if H contains more than O(k?/(log k)) vertices, then\n\nTis a yes-instance",
    "FPT on {G, G}-free graphs\n\nCorollary\nTOKEN JUMPING parameterized by k admits a kernel with at\n\nmost O(k?) vertices on {C3, Ca}-free graphs as well as bipartite\nCe-free graphs.\nProof.\n\u00a9 Since J is (C3, Ca}-free, if J contains more than\\6k?\nvertices, then Z is a yes-instance.\n| Cs-free graphs with O(k2/(log k)) vertices contain an\nindependent set of size at least k\n\n\u00a9 Hence, if H\u2019contains more than O(k2/(log k)) vertices, then\n\nTis a yes-instance",
    "FPT on {G, G}-free graphs\n\nCorollary\nTOKEN JUMPING parameterized by k admits a kernel with at\n\nmost O(k?) vertices on {C3, Cx}-free graphs as well as bipartite\nCe-free graphs.\nProof.\n\u00a9 Since J is {C3, Ca}-free, if J contains more than\\6k? \u2014 2k\nvertices, then Z is a yes-instance\n| Cs-free graphs with O(k?/(log k)) vertices contain an\nindependent set of size at least k\n\n# Hence, if H contains more than O(K?/(log k)) vertices, then\n\nTis a yes-instance",
    "FPT on {G, G}-free graphs\n\nCorollary\nTOKEN JUMPING parameterized by k admits a kernel with at\n\nmost O(k?) vertices on {C3, Cx}-free graphs as well as bipartite\nCa-free graphs.\n\nProof.\n\n\u00a9 Since J is {C3, Ca}-free, if J contains more than\\6k? \u2014 2k\nvertices, then Z is a yes-instance\n\n\u00ab| G-free graphs with O(K2/(log k)) vertices contain an\n\nindependent set of size at least k\n\n# Hence, if H contains more than O(K?/(log k)) vertices, then\n\nTis a yes-instance",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mou:\nAmerican Univ\n\n@aub.edu.lb)",
    "FPT on {G, G}-free graphs\n\nCorollary\nTOKEN JUMPING parameterized by k admits a kernel with at\n\nmost O(k2) vertices on {Cs, C4}-free graphs as well as bipartite\n\nCa-free graphs.\nProof.\n\u00a9 Since J is (C3, Ca}-free, if J contains more than\\6k? \u2014 2k\nvertices, then TZ is a yes-instance\n| Cs-free graphs with O(k?/(log k)) vertices contain an\nindependent set of size at least k\n# Hence, if H contains more than O(K?/(log k)) vertices, then\n\nTis a yes-instance",
    "FPT on {G, G}-free graphs\n\nCorollary\nTOKEN JUMPING parameterized by k admits a kernel with at\n\nmost O(k2) vertices on {Cs, C4}-free graphs as well as bipartite\n\nCa-free graphs.\nProof.\n\u00a9 Since J is (C3, Ca}-free, if J contains more than\\6k? \u2014 2k\nvertices, then TZ is a yes-instance\n| Cs-free graphs with O(k?/(log k)) vertices contain an\nindependent set of size at least k\n# Hence, if H contains more than O(K?/(log k)) vertices, then\n\nTis a yes-instance",
    "FPT on {G, G}-free graphs\n\nCorollary\nTOKEN JUMPING parameterized by k admits a kernel with at\n\nmost O(k) vertices on { Cs, C4}-free graphs as well as bipartite\nCa-free graphs.\n\nProof,\n\n\u00a9 Since J is (C3, Ca}-free, if J contains more than\\6k? \u2014 2k\n\nvertices, then TZ is a yes-instance.\n\n| Cs-free graphs with O(k?/(log k)) vertices contain an\nindependent set of size at least k\n\n# Hence, if H contains more than O(K?/(log k)) vertices, then\n\nTis a yes-instance",
    "FPT on {C;, C;}-free graphs\n\nCorollary ,\nTOKEN JUMPING parameterized by k admits a kernel with at\n\nmost O(k) vertices on { C3, C4}-free graphs as well as bipartite\nCa-free graphs.\n\nProof,\n\n\u00a9 Since J is (C3, Ca}-free, if J contains more than\\6k? \u2014 2k\n\nvertices, then Z is a yes-instance.\n\n| Cs-free graphs with O(k?/(log k)) vertices cont:\nindependent set of size at least k\n\n# Hence, if H contains more than O(K?/(log k)) vertices, then\n\nTis a yes-instance",
    "FPT on {C3, C;}-free graphs\n\nCorollary\nTOKEN JUMPING parameterized by k admits a kernel with at\n\nmost O(k?) vertices on { C3, C4}-free graphs as well as bipartite\n\nCe-free graphs.\nProof ,\n# Since J is (C3, Ca}-free, if J contains more than 6k? \u2014 2k\nvertices, then TZ is a yes-instance.\n\u00a9 Cy-free graphs with O(k?/(log k)) vertices cont:\nindependent set of size at least k\n# Hence, if H contains more than O(k?/(log k)) vertices, then\n\nTis a yes-instance",
    "The reconfiguration graph\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "FPT on {G, G}-free graphs\n\nTheorem\nIf H is e-sparse, = > 0, and J is {C3, Ca}-free then I admits a\n\nkernel with O(k? + k**1/*) vertices.\n*\n\nProof.\n\n\u00a9 If H contains more than k(2k)!/\u00b0 vertices then Z is a\nyes-instance\n\n\u00a9 If J contains a vertex of degree 3k or more then, again, Z is a\nyes-instance.\n\n\u00a9 Putting it all together, we have |S U T|\nINc($U T)| < 2k(3k \u2014 1) = 6k? \u2014 2k = O(k?), and\nV(G)\\ No{SU T]] < K(2k)/* = O(kE+Y/*)",
    "FPT on {G, G}-free graphs\n\nTheorem\nIF H is c-sparse, \u00a9 > 0, and J is {Cs, Ca}-free then Z admits a\nkernel with O(k? + k1+1/*) vertices\n\nProof.\n\n* -\n\u00a9 If H contains more than k(2k)}/\u00b0 vertices then Z is a\n\nyes-instance.\n\n\u00a9 If J contains a vertex of degree 3k or more then, again, Tis a\nyes-instance.\n\n\u00a9 Putting it all together, we have |S U T|\nNe(SU T)| < 2k(3k \u2014 1) = 6k? \u2014 2k = O(k?), and\nV(G)\\ No[SU T]| < K(2k)/* = O(kEY/*)",
    "FPT on {G, G}-free graphs\n\nTheorem\nIf H is e-sparse, = > 0, and J is {C3, Ca}-free then I admits a\n\nkernel with O(k? + k**4/*) vertices.\n\nProof %\n\n\u00a9 If H contains more than k(2k)!/\u00b0 vertices then Z is a\nyes-instance.\n\n\u00a9 If J contains a vertex of degree 3k or more then, again, Tis a\nyes-instance\n\n# Putting it all together, we have |S U T| < 2k\nNe($U T)| < 2k(3k \u2014 1) = 6k? \u2014 2k = O(k?), and\nV(G)\\ Ne[SU T]] < K(2k)/* = O(kEHY*)",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "The reconfiguration graph\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing mete or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "\u00ab\nThat's it. Thank you for listening,\n\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "The reconfiguration graph\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "\u00ab\nThat's it. Thank you for listening,\n\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    ".\nThat's it. Thank you for listening,\n\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "\u00ab\nThat's it. Thank you for listening,\n\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "The reconfiguration graph\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "The reconfiguration graph\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mou:\n\nid (2a368@aub.edu.lb)\n\nAmerican Univ f Beirut",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "The reconfiguration graph\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "The reconfiguration graph\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "The reconfiguration graph\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "The reconfiguration graph\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "The reconfiguration graph\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "The reconfiguration graph\n\nThe reconfiguration graph/state space is the graph having one\n\nertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "The reconfiguration graph\n\nThe reconfiguration graph/state space is the graph having one\n\nertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "The reconfiguration graph\n\nThe reconfiguration graph/state space is the graph having one\n\nertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "The reconfiguration graph\n\ncael\n\nFES SES\n\ni ia\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "The reconfiguration graph\n\ncael\n\nFES SE\n\ni ia\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (a3368@aub.edu.lb)\nAmerican Univ f Beirut",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "The reconfiguration graph\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "That's it. Thank you for listening,\nIf you're interested in knowing more or working on\n\nsuch problems get in touch!",
    "The reconfiguration graph\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "FPT on {C3, C,}-free graphs\n\nCorollary\nTOKEN JUMPING parameterized by k admits a kernel with at\nmost O(k*) vertices on {C, C4}-free graphs as well as bipartite\n\nCe-free graphs.\nProof\n\n@ Since J is (C3, Ca}efree, if J contains more than 6k?\nvertices, then Z is a yes-instance.\n\n\u00a9 Cy-free graphs with O(k?/(log k)) vertices contain an\nindependent set of size at least k\n\n# Hence, if H contains more than O(K?/(log k)) vertices,\n\nT is a yes-instance.",
    "Hardness on {Gy }-free graphs\n\nWe use a known reduction from Grip TILING (known to be\nW[t]-hard) to INDEPENDENT SEY on {Ca,..-,Cp}-free graphs\n\nthat gives us a graph G satisfying the following:\n\u00a9 G can be partitioned into 8k*(p + 1) cliques Vi\neach of size n with edges between tl\nGis Cp}-free\n\nThe instance of GRID TILING is a yes-instance iff G has an\nindependent set of size 8k2(p + 1).\n\nNote that an independent set of size 8k2(p + 1) in G has to be",
    "Hardness on {G,,..., C)}-free graphs\n\nFirst attempt at a proof:\n\n6000\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {G,,..., C)}-free graphs\n\nFirst attempt at a proof:\n\n0000\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {C,,..., Cp}-free graphs\n\nFirst attempt at a proof:\n\n6000\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {C,,...,Cp}-free graphs\n\nFirst attempt at a proof\n\n6060\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {C,,..., Cp}-free graphs\n\nFirst attempt at a proof\n\n6000\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {C,,...,Cp}-free graphs\n\nFirst attempt at a proof:\n\n5400\n\n# We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {C,,...,Cp}-free graphs\n\nFirst attempt at a proof:\n\n00-00\n\n# We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {C,,..., Cp}-free graphs\n\nFirst attempt at a proof:\n\n00-00\n\n# We do not introduce any of the forbidden cycles.\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "The reconfiguration graph\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "Hardness on {G,,..., C)}-free graphs\n\nFirst attempt at a proof:\n\n00-00\n\nWe do not introduce any of the forbidden cycles.\n# But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {G,,..., C)}-free graphs\n\nFirst attempt at a proof:\n\n00-00\n\nWe do not introduce any of the forbidden cycles.\n# But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {C,,..., Cp}-free graphs\n\nFirst attempt at a proof\n\n00-00\n\n\u00a9 We do not introduce any of the forbidden cycles\n\u00a9 But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {C,,..., Cp}-free graphs\n\nFirst attempt at a proof\n\n000-0\n\nWe do not introduce any of the forbidden cycles.\n# But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {G,,..., Cp}-free graphs\n\nFirst attempt at a proof\n\n\u00ab\n\n00-00\n\nWe do not introduce any of the forbidden cycles.\n# But we cannot guarantee that all tokens will be on the cliques\n\nat the same time",
    "Hardness on {Gy,..., Cp}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {Cj,...,Cp}-free graphs\n\nSecond attempt at a proof\n\n6006:\n\n\u2018\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introdu forbidden cycles.",
    "Hardness on {Cy,...,Cp}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a2 But now we might have introdu rbidden cycles",
    "Hardness on {C,,...,Cp}-free graphs\n\nSecond attempt at a proof\n\n6000:\n\n\u2018\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {C,,...,Cp}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u2018\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "The reconfiguration graph\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "Hardness on {G,,..., C)}-free graphs\n\nSecond attempt at a proof\n\n0000:\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a2 But now we might have introduced some forbidden cycles.",
    "Hardness on {G,,..., C)}-free graphs\n\nSecond attempt at a proof\n\n0000:\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a2 But now we might have introduced some forbidden cycles.",
    "Hardness on {C,,...,Cp}-free graphs\n\nSecond attempt at a proof\n\n0000:\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {C,,..., Cp}-free graphs\n\nSecond attempt at a proof\n\n000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {C,,..., Cp}-free graphs\n\nSecond attempt at a proof\n\n(000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {C,,...,C)}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u2018\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {C,,..., C)}-free graphs\n\nSecond attempt at a proof\n\n0000\n\n\u00a9 We guarantee that all tokens will be on the cliques at the\nsame time\n\n\u00a9 But now we might have introduced some forbidden cycles.",
    "Hardness on {C;,...,Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {Cy,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a2 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {Cy,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a2 We also guarantee that no forbidden cycles are introduced.",
    "The reconfiguration graph\n\nee\n\nmeee\nES EB\n\nES)\nia\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "Hardness on {C,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {C,,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {C,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {C,,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {Cy,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a9 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C,,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {G,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u2018\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {Cy,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {G,,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a9 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {G,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "The reconfiguration graph\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "Hardness on {C,,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {G,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {G,,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {G,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a9 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {Gy,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a9 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {Cy,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {G,,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n* We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {G,,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n* We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {G,,..., C)}-free graphs\n\nThird and final attempt # a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a9 We also guarantee that no forbidden cycles are introduced",
    "Hardness on {G,,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a9 We also guarantee that no forbidden cycles are introduced.",
    "The reconfiguration graph\n\n\u00a2\n\ni ia\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "Hardness on {G,,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a2 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C,,...,Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a2 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C,,...,Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a2 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {C,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {C,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {C,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {Cy,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {C,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a2 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {Cy,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "The reconfiguration graph\n\na af a\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "Hardness on {Cy,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a9 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {G,,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a2 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {G,,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a2 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {G,,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a2 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {Cy,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {Cy,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a9 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C,,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {Cy,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C,,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced.",
    "The reconfiguration graph\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "Hardness on {Cy,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a9 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C,,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {Cy,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {G,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\nWe also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a9 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {Gy,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {Cy,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {Cy,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {G,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "The reconfiguration graph\n\nThe reconfiguration graph/state space is the graph having one\n\nertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "Hardness on {G,,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {G,,...,C)}-free graphs\n\nThird and final attempt at a proof\n\n\u2018\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {G,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n* We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {G,,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a9 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a9 We also guarantee that no forbidden cycles are introduced.",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (a3368@aub.edu.lb)\nAmerican Univ f Beirut",
    "Hardness on {Cy,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {G,,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {G,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a2 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C,,...,C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "The reconfiguration graph\n\nial\n\nThe reconfiguration graph/state space is the graph having one\n\nertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "Hardness on {C,,...,C)}-free graphs\n\nThird and final attempt at a proof\n\n\u2018\u00a9 We guarantee all tokens will be on the cliques simultaneously\n\n\u00a9 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C,,...,C)}-free graphs\n\nThird and final attempt at a proof\n\n\u2018\u00a9 We guarantee all tokens will be on the cliques simultaneously\n\n\u00a2 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C,,...,Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {C,,...,Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {C;,...,C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {C,,...,C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C,,...,C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {C,,...,Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {C,,...,C)}-free graphs\n\nThird and final attempt at a proof\n\n\u2018\u00a9 We guarantee all tokens will be on the cliques simultaneously\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {C,,...,C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously\n\n# We also guarantee that no forbidden cycles are introduced",
    "The reconfiguration graph\n\n=\n\nEee\nESE\n\n\u2014\n:\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "Hardness on {Cy,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {C,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {Cy,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {Cy,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {C,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {Cy,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {Cy,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {Cy,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {Cy,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {C,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u2018\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "The reconfiguration graph\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "Hardness on {C;,...,Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {Cy,..., Cp}-free graphs\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {C,,...,Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n* We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {Cj,...,C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {Cj,...,C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a9 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {G,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {Cy,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a9 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {Cy,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced.",
    "The reconfiguration graph\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart,",
    "Hardness on {C,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a9 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {Cy,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {G,,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {Cy,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {Cy,..., C)}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {Cy,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a9 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {G,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u2018\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {G,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u2018\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {C;,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {C;,...,Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a9 We also guarantee that no forbidden cycles are introduced.",
    "The reconfiguration graph\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "Hardness on {C,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "Hardness on {C,,..., Cp}-free graphs\n\nThird and final attempt at a proof\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a9 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C;,..., Cp}-free graphs\n\nThird and final Sttempt at a proof:\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a9 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C,,...,Cp}-free graphs\n\nThird and final Sttempt at a proof:\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a9 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C,,...,Cp}-free graphs\n\nThird and final Sttempt at a proof:\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a9 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {C;,...,Cp}-free graphs\n\nThird and final Sttempt at a proof:\n\n\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n\u00a9 We also guarantee that no forbidden cycles are introduced.",
    "Hardness on {(j,...,C)}-free graphs\n\nThird and final attempt at a proof\n\n\u2018\u00a9 We guarantee all tokens will be on the cliques simultaneously.\n\n# We also guarantee that no forbidden cycles are introduced",
    "FPT on {(;, C;}-free graphs\n\nClass\n\nGi}-free graphs\n\nBipartite graph: J\n\u201cBipantte A-degree graphs _FPT (\"|\n\nFPT (k\u2122 ken\n\nTheorem\nLet I =(G.$. T,k) be an instance of TOKEN J}\n\n4 No[SU T], and let J denote the graph i\nIF H is e-sparse (number of edges in G is at most\n\n{Ca Ca}-free then Z admits a kernel with O(k",
    "FPT on {C3, C;}-free graphs\n\nSome intuition into the buffer technique fo TOKEN JUMPINC\n\n[<a ar = 227\n\nNun)\n\n\u00a9 If we can find an independent set of size k in H then we are\n\n\u00a9 The tokens can jump from S to said independent set and then\n\njump to T (one by one).",
    "ae va OF Sms\nOe eo a2ee 20%\n\nG}-free graphs s\n\nSome intuition into the buffer technique for TOKEN JUMPIN 2\n\n\u2018* If we can find an independent set of size k in H then we are 4\ndone.\n\n\u2018* The tokens can jump from 5 to said independent set and then\n\nEEE",
    "The reconfiguration graph\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "Oe eo a2ee\n\nG}-free graphs\n\nSome intuition into the buffer technique for TOKEN JUMPING\n\n\u2018= If we can find an independent set of size k in H then we are\ndone.\n\n\u2018* The tokens can jump from 5 to said independent set and then\n\nEEE\n\nROOAaS@\n\nrs",
    "aie wer Oe tee\n\n\u2018= If we can find an independent set of size k in H then we are\ndone.\n\n'* The tokens can jump from 5 to said independent set and then\n\n| EE",
    "aie \u201ca Oe tee\n\n\u2018+ If we can find an independent set of size k in H then we are\ndone.\n'* The tokens can jump from S to said independent set and then\n\njump to T (one by one)",
    "a a oa OF Sm\n\n\u2018+ If we can find an independent set of size k in H then we are\ndone.\nThe tokens can jump from S to said independent set and then\n\njump to T (one by one)",
    "\u2018* If we can find an independent set of size k in H then we are\n\ndone.\n# The tokens can jump from S to said independent set and then\njump to T (one by one)",
    "\u2018* If we can find an independent set of size k in H then we are\n\ndone.\n# The tokens can jump from S to said independent set and then\njump to T (one by one)",
    "\u2018* If we can find an independent set of size k in H then we are\ndone.\n\n\u00abThe tokens can jump from S to said independent set and then\njump to T (one by one).\n\na @\n\nROOR",
    "\u2018* If we can find an independent set of size k in H then we are\ndone.\n\n# The tokens can jump from S to said independent set and then\njump to T (one by one).\n\na @\n\nROOR",
    "ae er OF smn\n\n\u2018* If we can find an independent set of size k in H then we are\ndone.\n\u00a9 The tokens can jump from 5 to said independent set and then\n\njump to T (one by one).",
    "ed on 08 Ger\n\n2B %\n\na\n\nROOR\n\n'* If we can find an independent set of size k in H then we are 4\ndone.\n\n\u00a9 The tokens can jump from $ to said independent set and then\n\nEOE",
    "The reconfiguration graph\n\nEd\n\nia\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart,",
    "es on Oden\n\n2a %\n\n@\n\nROOR\n\n\u2018* If we can find an independent set of size k in H then we are 4\ndone.\n\n\u00a9 The tokens can jump from $ to said independent set and then\n\nEEE",
    "\u2018= If we can find an independent set of size k in H then we are\n\ndone.\n\u00a9 The tokens can jump from S to said independent set and then\n\nea",
    "\u2018= If we can find an independent set of size k in H then we are\n\ndone.\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one)",
    "\u2018+ If we can find an independent set of size k in H then we are\n\ndone.\n\u00a9 The tokens can jump from $ to said independent set and then\njump to T (one by one)",
    "ome Toe ar Oe smn\n\nOe x a2ao 20%\n\na 2\n\nROOR\n\n'* If we can find an independent set of size k in H then we are 4\ndone.\n\n+ The tokens can jump from S to said independent set and then\njump to T (one by one)",
    "ome Toe ar Oe smn\n\nOe x a2ao 28%\n\na 2\n\nROOR\n\n'* If we can find an independent set of size k in H then we are 4\ndone.\n\nThe tokens can jump from S to said independent set and then\njump to T (one by one)",
    "\u00abIf we can find an independent set of size k in H then we are\ndone.\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one)\n\na\n\nROOK",
    "oa os\n\n\u2018* If we can find an independent set of size k in H then we are\ndone.\n\n'* The tokens can jump from 5 to said independent set and then\njump to T (one by one).\n\nOe eo B26 2a%\n\na\n\nROOR",
    "oa os\n\n\u2018* If we can find an independent set of size k in H then we are\ndone.\n\n\u2018\u00a9 The tokens can jump from 5 to said independent set and then\njump to T (one by one).\n\nOe eo B26 2a%\n\na\n\nROOR",
    "oa os\n\n\u2018* If we can find an independent set of size k in H then we are\ndone.\n\n'* The tokens can jump from S to said independent set and then\njump to T (one by one)\n\nOe x aLe\u00e9 2a%\n\na\n\nROOR",
    "The reconfiguration graph\n\nEd\n\nia\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart,",
    "oa os\n\n\u2018* If we can find an independent set of size k in H then we are\ndone.\n\n'* The tokens can jump from 5 to said independent set and then\njump to T (one by one)\n\nOe x aLe\u00e9 2a%\n\na\n\nROOR",
    "one Took St a O'% tmn\n\n\u00ab# If we can find an independent set of size k in H then we are\ndone.\n\n\u2018\u00a9 The tokens can jump from S to said independent set and then\n\njump to T (one by one)",
    "Soon \u201ca O'* tmn\n\n\u2018* If we can find an independent set of size k in H then we are\ndone.\n\u2018\u00a9 The tokens can jump from 5 to said independent set and then\n\njump to T (one by one)",
    "ome Teak Stn \u201ca 08 dew\n\n'* If we can find an independent set of size k in H then we are\ndone.\n'* The tokens can jump from S to said independent set and then\n\njump to T (one by one)",
    "\u00abIf we can find an independent set of size k in H then we are\n\ndone.\n# The tokens can jump from $ to said independent set and then\njump to T (one by one)",
    "ame Toe or Oe tan\n\nOe Cx a2ao 2a%\n\nROS\n\n\u00abIf we can find an independent set of size k in H then we are\ndone.\n\nrs\n\n\u00a9 The tokens can jump from $ to said independent set and then\n\njump to T (one by one)",
    "ane Tose Sa wr ou\n\naa@\n\nROS\n\n\u2018If we can find an independent set of size k in H then we are\ndone.\n\nra\n\n\u00abThe tokens can jump from $ to said independent set and then\n\njump to T (one by one)",
    "Oo 8 \u00a9 O ram BLED\n\n\u2018If we can find an independent set of size k in H then we are\ndone.\n\n+ The tokens can jump from $ to said independent set and then\njump to T (one by one)",
    "Oo 8 \u00a9 O ram BLED\n\n\u2018If we can find an independent set of size k in H then we are\ndone.\n\n+ The tokens can jump from $ to said independent set and then\njump to T (one by one)",
    "ee a ou\n\nOe Cx) B24 2a%\n\n\u00abIf we can find an independent set of size k in H then we are 4\ndone.\n\n\u00abThe tokens can jump from $ to said independent set and then\njump to T (one by one)",
    "The reconfiguration graph\n\nEBB .\n\nsee\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "ee a ou\n\nOe Cx) B24 2a%\n\n\u00abIf we can find an independent set of size k in H then we are 4\ndone.\n\n\u00ab\u00a9 The tokens can jump from $ to said independent set and then\njump to T (one by one)",
    "Oe Cx) B24 2a%\n\n\u00abIf we can find an independent set of size k in H then we are 4\ndone.\n\n*# The tokens can jump from $ to said independent set and then\njump to T (one by one)",
    "ome Teak Stn oa Oe smn\n\n@\n\nROOR\n\n\u2018If we can find an independent set of size k in H then we are 4\ndone.\n\n+ The tokens can jump from $ to said independent set and then\n\njump to T (one by one)",
    "ome Teak Stn oa os\n\n@\n\nROOR\n\n\u00ablf we can find an independent set of size k in H then we are 4\ndone.\n\nThe tokens can jump from $ to said independent set and then\njump to T (one by one)",
    "ome Teak Stn ar O8 smn\n\n@\n\nROORN\n\n\u00ab# If we can find an independent set of size k in H then we are 4\ndone.\n\n+ The tokens can jump from S to said independent set and then\n\njump to T (one by one)",
    "ome Teak Stn oa os\n\n@\n\nROOR\n\n\u00ablf we can find an independent set of size k in H then we are 4\ndone.\n\nThe tokens can jump from $ to said independent set and then\njump to T (one by one)",
    "ome Teak Stn oa Oe smn\n\nroe x BL240 20%\n\n@\n\nROOR\n\n\u2018If we can find an independent set of size k in H then we are 4\ndone.\n\n+ The tokens can jump from $ to said independent set and then\n\njump to T (one by one)",
    "ome Teak Stn oa os\n\n@\n\nROOR\n\n\u00ablf we can find an independent set of size k in H then we are 4\ndone.\n\nThe tokens can jump from $ to said independent set and then\njump to T (one by one)",
    "ome Teak Stn oa os\n\n@\n\nROOR\n\n\u00ablf we can find an independent set of size k in H then we are 4\ndone.\n\nThe tokens can jump from $ to said independent set and then\njump to T (one by one)",
    "ome Teak Stn ar O8 smn\n\n@\n\nROORN\n\n\u00ab# If we can find an independent set of size k in H then we are 4\ndone.\n\n+ The tokens can jump from S to said independent set and then\n\njump to T (one by one)",
    "The reconfiguration graph\n\n[ia\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "ome Teak Stn oa os\n\n@\n\nROOR\n\n\u00ablf we can find an independent set of size k in H then we are 4\ndone.\n\nThe tokens can jump from $ to said independent set and then\njump to T (one by one)",
    "ome Teak Stn oa Oe smn\n\n@\n\nROOR\n\n\u2018If we can find an independent set of size k in H then we are 4\ndone.\n\n+ The tokens can jump from $ to said independent set and then\n\njump to T (one by one)",
    "ome Teak Stn oa Oe smn\n\n@\n\nROOR\n\n\u2018If we can find an independent set of size k in H then we are 4\ndone.\n\nThe tokens can jump from $ to said independent set and then\n\njump to T (one by one)",
    "ome Teak Stn oa Oe smn\n\n@\n\nROOR\n\n\u2018If we can find an independent set of size k in H then we are 4\ndone.\n\n\u00abThe tokens can jump from S to said independent set and then\n\njump to T (one by one)",
    "ome Teak Stn ar O8 smn\n\n@\n\nROORN\n\n\u00ab# If we can find an independent set of size k in H then we are 4\ndone.\n\n+ The tokens can jump from S to said independent set and then\n\njump to T (one by one)",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (a3368@aub.edu.lb)\nAmerican Univ f Beirut",
    "ome Teak Stn oa Oe smn\n\n@\n\nROOR\n\n\u2018If we can find an independent set of size k in H then we are 4\ndone.\n\n+ The tokens can jump from $ to said independent set and then\n\njump to T (one by one)",
    "ome Teak Stn oa Oe smn\n\n@\n\nROOR\n\n\u2018If we can find an independent set of size k in H then we are 4\ndone.\n\n+ The tokens can jump from $ to said independent set and then\n\njump to T (one by one)",
    "\u2018\u00bb If we can find an independent set of size k in H then we are\ndone.\n\n+ The tokens can jump from $ to said independent set and then\njump to T (one by one)\n\na @\n\nROOR",
    "'\u00bb If we can find an independent set of size k in H then we are\ndone.\n\n+ The tokens can jump from S to said independent set and then\njump to T (one by one)\n\na @\n\nROOR",
    "roe\n\neo B24A0\n\n'\u00bb If we can find an independent set of size k in H then we are\ndone.\n\n\u00a9 The tokens can jump from S to said independent set and then\njump to T (one by one)\n\na @\n\nROOR",
    "The reconfiguration graph\n\n[ia\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "ome Teak Stn oa Oe smn\n\n@\n\nROOR\n\n\u2018If we can find an independent set of size k in H then we are 4\ndone.\n\n+ The tokens can jump from $ to said independent set and then\n\njump to T (one by one)",
    "ome Teak Stn oa os\n\n@\n\nROOR\n\n\u00ablf we can find an independent set of size k in H then we are 4\ndone.\n\nThe tokens can jump from $ to said independent set and then\njump to T (one by one)",
    "ome Teak Stn ar O8 smn\n\n@\n\nROORN\n\n\u00ab# If we can find an independent set of size k in H then we are 4\ndone.\n\n+ The tokens can jump from S to said independent set and then\n\njump to T (one by one)",
    "ome Teak Stn oa os\n\n@\n\nROOR\n\n\u00ablf we can find an independent set of size k in H then we are 4\ndone.\n\nThe tokens can jump from $ to said independent set and then\njump to T (one by one)",
    "ome Teak Stn oa Oe smn\n\nroe x BL240 20%\n\n@\n\nROOR\n\n\u2018If we can find an independent set of size k in H then we are 4\ndone.\n\n+ The tokens can jump from $ to said independent set and then\n\njump to T (one by one)",
    "ome Teak Stn oa os\n\n@\n\nROOR\n\n\u00ablf we can find an independent set of size k in H then we are 4\ndone.\n\nThe tokens can jump from $ to said independent set and then\njump to T (one by one)",
    "ome Teak Stn oa os\n\n@\n\nROOR\n\n\u00ablf we can find an independent set of size k in H then we are 4\ndone.\n\nThe tokens can jump from $ to said independent set and then\njump to T (one by one)",
    "ome Took Stn on Oe smn\n\na @\n\nROOK\n\n\u00ab# If we can find an independent set of size k in H then we are 4\ndone.\n\n\u00abThe tokens can jump from S to said independent set and then\njump to T (one by one)",
    "\u00ab# If we can find an independent set of size k in H then we are\ndone.\n\n\u00a9 The tokens can jump from $ to said independent set and then\njump to T (one by one)\n\n@\n\nROOR",
    "ee or Oe smn\n\n\u00abIf we can find an independent set of size k in H then we are\ndone.\n\n+ The tokens can jump from S to said independent set and then\njump to T (one by one)",
    "The reconfiguration graph\n\nes\n\neS Sg\n\nia\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "\u00abIf we can find an independent set of size k in H then we are\n\ndone.\n\u00a9 The tokens can jump from $ to said independent set and then\njump to T (one by one).\n\nROOR\n\nrs",
    "ee * os\n\nroe Cx ase 20%\n\n@\n\nROOR\n\n\u00abIf we can find an independent set of size k in H then we are\ndone.\n\nrs\n\n# The tokens can jump from S to said independent set and then\n\njump to T (one by one).",
    "\u00abIf we can find an independent set of size k in H then we are\n\ndone.\n# The tokens can jump from $ to said independent set and then\njump to T (one by one)",
    "\u00abIf we can find an independent set of size k in H then we are\n\ndone.\n* The tokens can jump from S to said independent set and then\njump to T (one by one)",
    "\u00abIf we can find an independent set of size k in H then we are\n\ndone.\n*# The tokens can jump from $ to said independent set and then\njump to T (one by one)",
    "\u2018\u00bb If we can find an independent set of size k in H then we are\n\ndone.\n'* The tokens can jump from S to said independent set and then\njump to T (one by one)",
    "\u2018\u00bb If we can find an independent set of size k in H then we are\n\ndone.\n'* The tokens can jump from 5 to said independent set and then\njump to T (one by one).",
    "\u2018+ If we can find an independent set of size k in H then we are\n\ndone.\n'* The tokens can jump from S to said independent set and then\njump to T (one by one).",
    "ome Teak Stn oa ou\n\n@\n\nROOR\n\n\u2018* If we can find an independent set of size k in H then we are 4\ndone.\n\n\u00abThe tokens can jump from S to said independent set and then\njump to T (one by one)",
    "ome Teak Stn oa Oe smn\n\n\u2018* If we can find an independent set of size k in H then we are\ndone.\n\nThe tokens can jump from $ to said independent set and then\njump to T (one by one)",
    "The reconfiguration graph\n\nes\n\neS Sg\n\nia\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "\u00abIf we can find an independent set of size k in H then we are\ndone.\n\n+ The tokens can jump from S to said independent set and then\njump to T (one by one)\n\n@\n\nROOR",
    "ome Teak Stn oa Oe smn\n\n\u2018* If we can find an independent set of size k in H then we are\ndone.\n\nThe tokens can jump from $ to said independent set and then\njump to T (one by one)",
    "roe x BL240 20%\nik\n9\n\n\u2018* If we can find an independent set of size k in H then we are\ndone.\n\nThe tokens can jump from $ to said independent set and then\njump to T (one by one)",
    "\u2018one ok soa =a OR Som\n\n\u00abIf we can find an independent set of size k in H then we are\ndone.\n\n\u00ab\u00a9 The tokens can jump from $ to said independent set and then\njump to T (one by one)",
    "The reconfiguration graph\n\neen\n\nmi\n\nia\n\nThe reconfiguration graph/state space is the graph having one\n\nvertex for each possible configuration/state of the puzzle and an\n\nedge between two configurations if they are one reconfiguration\nstep apart",
    "Structural Questions\n\na\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\n\nvertices and how many edges?\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\na\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\n# Is the reconfiguration graph connected? If not, hi\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\n\u00abHow big is the reconfiguration graph/state space? Ho\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, hi\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?\n\nmany",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\n\u00abHow big is the reconfiguration graph/state space? Ho\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, hi\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?\n\nmany",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\u00ab Is the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u2018\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\n\n\u00a2 How big is the reconfiguration graph/state space? How many\n\nvertices and how many edges?\n\nconnected components does it have?\n\n\u2018\u00a9 What is the diameter of the reconfiguration graph?",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (a:\n\nAmerican Univer",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\n\nHow big is the reconfiguration graph/state space? How many\n\nvertices and how many edges?\n\nconnected components does it have?\n\n\u2018\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\n\u00abHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\n# Is the reconfiguration graph connected? If not, hi\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\n\u00abHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\n# Is the reconfiguration graph connected? If not, hi\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\n\u00a9 How big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, hi\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\n\u00a9 How big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\n\u00a9 How big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (a:\n\nAmerican Univer",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, how many\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\n+ How big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\n# Is the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\n+ How big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\n# Is the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\u00ab Is the reconfiguration graph connected? If not, h\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\u00ab# Is the reconfiguration graph connected? If not,\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\nreconfiguration graph/state space?\n\u00a9 How big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\u00ab Is the reconfiguration graph connected? If not, how many\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\u00ab Is the reconfiguration graph connected? If not, how many\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\n\u00a9 How big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\u00ab Is the reconfiguration graph connected? If not, how many\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\u00ab Is the reconfiguration graph connected? If not, how many\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (a:\n\nAmerican Univer",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\u00ab Is the reconfiguration graph connected? If not, how many\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\u00ab Is the reconfiguration graph connected? If not, how many\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\n\u00a9 How big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\n\u00a9 How big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, hi\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\n\u00a9 How big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\n\u00a9 How big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (a:\n\nAmerican Univer",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\n\u00a9 How big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\n# Is the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\n# Is the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u2018\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\n\u00a9 How big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\n# Is the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\n\u00a9 How big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\n# Is the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u2018\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\n\u00a9 How big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\n\u00a9 How big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\n# Is the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u2018\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, how many\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, how many\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (a:\n\nAmerican Univer",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\n\u00a9 How big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\u00ab Is the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\n\u00a9 How big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\u00ab Is the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\n\u00a9 How big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\n\u00a9 How big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\nIs the reconfiguration graph connected? If not, how many\n\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\n*\nWhat are some interesting structural questions related to the\n\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\u00ab Is the reconfiguration graph connected? If not, how many\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "Structural Questions\n\n\u00ab\nWhat are some interesting structural questions related to the\nreconfiguration graph/state space?\nHow big is the reconfiguration graph/state space? How many\nvertices and how many edges?\n\u00ab Is the reconfiguration graph connected? If not, how many\nconnected components does it have?\n\n\u00a9 What is the diameter of the reconfiguration graph?",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (a:\n\nAmerican Univer",
    "Computational Problems\n\n*\n\nWhat are some interesting computational problems rel\nthe reconfiguration graph?\n\n\u00a9 Given a starting state/configuration, is it possible to reach the\n\ntarget state/configuration? (decision problem)\n\n\u00a9 Given a starting configuration, what is the actual sequence\nsteps (reconfiguration steps) that leads to the targ\nconfiguration? (search problem)",
    "Computational Problems\n\nWhat are some interesting computational problems rel\nthe reconfiguration graph?\n\n\u00a9 Given a starting state/configuration, is it possible to reach the\n\ntarget state/configuration? (decision problem)\n\n\u00a9 Given a starting configuration, what is the actual sequence\nsteps (reconfiguration steps) that leads to the targ\nconfiguration? (search problem)",
    "Computational Problems\n\nWhat are some interesting computational problems rel\nthe reconfiguration graph?\n\n\u00a9 Given a starting state/configuration, is it possible to reach the\n\ntarget state/configuration? (decision problem)\n\n\u00a9 Given a starting configuration, what is the actual sequence\nsteps (reconfiguration steps) that leads to the targ\nconfiguration? (search problem)",
    "Computational Problems\n\nWhat are some interesting computational problems rel\nthe reconfiguration graph?\n\n\u00a9 Given a starting state/configuration, is it possible to reach the\n\ntarget state/configuration? (decision problem)\n\n\u00a9 Given a starting configuration, what is the actual sequence\nsteps (reconfiguration steps) that leads to the targ\nconfiguration? (search problem)",
    "Computational Problems\n\nWhat are some interesting computational problems rel\nthe reconfiguration graph?\n\n\u00a9 Given a starting state/configuration, is it possible to reach the\n\ntarget state/configuration? (decision problem)\n\n\u00a9 Given a starting configuration, what is the actual sequence\nsteps (reconfiguration steps) that leads to the targ\nconfiguration? (search problem)",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (2a368@aub.edu.Ib)\nAmerican Univ f Beira",
    "Computational Problems\n\nWhat are some interesting computational problems related to\n\nthe reconfiguration graph?\n\n\u00a9 Given a starting state/configuration, is it possible to reach the\n\ntarget state /configuration? (decision problem)\n\n\u00a9 Given a starting configuration, what is the actual sequence\nsteps (reconfiguration steps) that leads to the target\nconfiguration? (search problem)",
    "Computational Problems\n\nWhat are some interesting computational problems related to\n\nthe reconfiguration graph?\n\n\u00a9 Given a starting state/configuration, is it possible to reach the\n\ntarget state /configuration? (decision problem)\n\n\u00a9 Given a starting configuration, what is the actual sequence\nsteps (reconfiguration steps) that leads to the target\nconfiguration? (search problem)",
    "Computational Problems\n\nWhat are some interesting computational problems related to\nthe reconfiguration graph?\n\n\u00a9 Given a starting state/configuration, is it possible to reach the\n\ntarget state /configuration? (decision problem)\n\n\u00a9 Given a starting configuration, what is the actual sequence\nsteps (reconfiguration steps) that leads to the target\nconfiguration? (search problem)",
    "Computational Problems\n\nWhat are some interesting computational problems rel\nthe reconfiguration graph?\n\n\u00a9 Given a starting state/configuration, is it possible to reach the\n\ntarget state/configuration? (decision problem)\n\n\u00a9 Given a starting configuration, what is the actual sequence\nsteps (reconfiguration steps) that leads to the targ\nconfiguration? (search problem)",
    "Computational Problems\n\nWhat are some interesting computational problems rel\nthe reconfiguration graph?\n\n\u00a9 Given a starting state/configuration, is it possible to reach the\n\ntarget state/configuration? (decision problem)\n\n\u00a9 Given a starting configuration, what is the actual sequence\nsteps (reconfiguration steps) that leads to the targ\nconfiguration? (search problem)",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (a:\n\nAmerican Univer",
    "Computational Problems\n\nWhat are some interesting computational problems related to\nthe reconfiguration graph?\n\n\u00a9 Given a starting state/configuration, is it possible to reach the\n\ntarget state/configuration? (decision problem)\n\n\u00a9 Given a starting configuration, what is the actual sequence\nsteps (reconfiguration steps) that leads to the target\nconfiguration? (search problem)",
    "Computational Problems\n\nWhat are some interesting computational problems related to\nthe reconfiguration graph?\n\n\u00a9 Given a starting state/configuration, is it possible to reach the\n\ntarget state/configuration? (decision problem)\n\n\u00a9 Given a starting configuration, what is the actual sequence\nsteps (reconfiguration steps) that leads to the targ\nconfiguration? (search problem)",
    "Computational Problems\n\nWhat are some interesting computational problems related to\nthe reconfiguration graph?\n\n\u00a9 Given a starting state/configuration, is it possible to reach the\n\ntarget state/configuration? (decision problem)\n\n\u00a9 Given a starting configuration, what is the actual sequence\nsteps (reconfiguration steps) that leads to the targ\nconfiguration? (search problem)",
    "Computational Problems\n\nWhat are some interesting computational problems rel:\n\nthe reconfiguration graph?\n\n\u00a9 Given a starting state/configuration, is it possible to reach the\n\ntarget state/configuration? (decision problem)\n\n\u00a9 Given a starting configuration, what is the actual sequence of\nsteps (reconfiguration steps) that leads to the target\nconfiguration? (search problem)",
    "Computational Problems\n\nWhat are some interesting computational problems rel:\n\nthe reconfiguration graph?\n\n\u00a9 Given a starting state/configuration, is it possible to reach the\n\ntarget state/configuration? (decision problem)\n\n\u00a9 Given a starting configuration, what is the actual sequence of\nsteps (reconfiguration steps) that leads to the target\nconfiguration? (search problem)",
    "Computational Problems\n\nWhat are some interesting computational problems rel:\n\nthe reconfiguration graph?\n\n\u00a9 Given a starting state/configuration, is it possible to reach the\n\ntarget state/configuration? (decision problem)\n\n\u00a9 Given a starting configuration, what is the actual sequence of\nsteps (reconfiguration steps) that leads to the targ\nconfiguration? (search problem)",
    "Computational Problems\n\nWhat are some interesting computational problems related to\n\nthe reconfiguration graph?\n\n\u00a9 Given a starting state/configuration, is it possible to reach the\n\ntarget state/configuration? (decision problem)\n\n\u00a9 Given a starting configuration, what is the actual sequence of\nsteps (reconfiguration steps) that leads to the target\nconfiguration? (search problem)",
    "Computational Problems\n\nWhat are some interesting computational problems related to\n\nthe reconfiguration graph?\n\n\u00a9 Given a starting state/configuration, is it possible to reach the\n\ntarget state/configuration? (decision problem)\n\n\u00a9 Given a starting configuration, what is the actual sequence of\nsteps (reconfiguration steps) that leads to the target\nconfiguration? (search problem)",
    "Computational Problems\n\nWhat are some interesting computational problems rel:\nthe reconfiguration graph?\n\nGiven a starting state/configuration, is it possible to reach the\n\ntarget state/configuration? (decision problem)\n\nGiven a starting configuration, what is the actual sequence\nsteps (reconfiguration steps) that leads to the target\nconfiguration? (search problem)",
    "Computational Problems\n\nWhat are some interesting computational problems rel:\nthe reconfiguration graph?\n\n*\nGiven a starting state/configuration, 1s it possible to reach the\n\ntarget state/configuration? (decision problem)\n\nGiven a starting configuration, what is the actual sequence\nsteps (reconfiguration steps) that leads to the target\nconfiguration? (search problem)",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (a:\n\nAmerican Univer",
    "Computational Problems\n\nWhat are some interesting, computational problems rel\nthe reconfiguration graph?\n\nIs it always possible to go from one configuration to any\n\nother? (decision problem)\n\nWhat is the fastest way of going from one configuration\nanother? Can | do it in at most k steps? (search/decision\n\nproblem)",
    "Computational Problems\n\nWhat are some interesting computational problems rel\nthe reconfiguration graph?\n\nIs it always possible to go from one configuration to any\n\nother? (decision problem)\n\nWhat is the fastest way of going from one configuration to\n\nanother? Can | do it in at most k steps? (search/decision\n\nproblem)",
    "Computational Problems\n\nWhat are some interesting computational problems rel\nthe reconfiguration graph?\n\nIs it always possible to go from one configuration to any\n\nother? (decision problem)\n\nWhat is the fastest way of going from one configuration to\n\nanother? Can | do it in at most k steps? (search/decision\n\nproblem)",
    "Computational Problems\n\nWhat are some interesting computational problems rel:\n\nthe reconfiguration graph?\n\n\u00ab Is it always possible to go from one configuration to any\nother? (decision problem)\n\u00a9 What is the fastest way of going from one configuration to\n\nanother? Can | do it in at most k steps? (search/decisi\n\nproblem)",
    "Computational Problems\n\nWhat are some interesting computational problems rel:\n\nthe reconfiguration graph?\n\n\u00ab Is it always possible to go from one configuration to any\nother? (decision problem)\n\u00a9 What is the fastest way of going from one configuration to\n\nanother? Can | do it in at most k steps? (search/decisi\n\nproblem)",
    "Computational Problems\n\nWhat are some interesting computational problems rel:\n\nthe reconfiguration graph?\n\n\u00ab Is it always possible to go from one configuration to any\nother? (decision problem)\n\u00a9 What is the fastest way of going from one configuration to\n\nanother? Can | do it in at most k steps? (search/decisi\n\nproblem)",
    "Computational Problems\n\nWhat are some interesting computational problems related to\n\nthe reconfiguration graph?\n\u00ab Is it always possible to go from one configuration to any\nother? (decision problem)\n\n# What is the fastest way of going from one configuratio\nanother? Can | do it in at most k steps? (search/decisi\n\nproblem)",
    "Computational Problems\n\nWhat are some interesting computational problems related to\n\nthe reconfiguration graph?\n\u00ab Is it always possible to go from one configuration to any\nother? (decision problem)\n\n# What is the fastest way of going from one configuratio\nanother? Can | do it in at most k steps? (search/decisi\n\nproblem)",
    "Computational Problems\n\nWhat are some interesting computational problems rel:\n\nthe reconfiguration graph?\n\n\u00ab Is it always possible to go from one configuration to any\n\nother? (decision problem)\n\n\u2018\u00a9 What is the fastest way of going from one configuration to\n\nanother? Can | do it in at most k steps? (search/decision\n\nproblem)",
    "Computational Problems\n\nWhat are some interesting computational problems rel:\n\nthe reconfiguration graph?\n\n\u00ab Is it always possible to go from one configuration to any\n\nother? (decision problem)\n\n\u00a9 What is the fastest way of going from one configuration to\n\nanother? Can | do it in at most k steps? (search/decisi\n\nproblem)",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (a:\n\nAmerican Univer",
    "Computational Problems\n\nWhat are some interesting computational problems rel:\n\nthe reconfiguration graph?\n\n\u00ab Is it always possible to go from one configuration to any\n\nother? (decision problem)\n\n\u00a9 What is the fastest way of going from one configuration to\n\nanother? Can | do it in at most k steps? (search/decisi\n\nproblem)",
    "Computational Problems\n\nWhat are some interesting computational problems related to\n\nthe reconfiguration graph?\nIs it always possible to go from one configuration to any\nother? (decision problem)\n\nWhat is the fastest way of going from one configuration to\nanother? Can | do it in at most k steps? (search/decision\n\nproblem)",
    "Computational Problems\n\nWhat are some interesting computational problems related to\n\nthe reconfiguration graph?\nIs it always possible to go from one configuration to any\nother? (decision problem)\n\nWhat is the fastest way of going from one configuration to\nanother? Can | do it in at most k steps? (search/decision\n\nproblem)",
    "Computational Problems\n\nWhat are some interesting computational problems rel\n\nthe reconfiguration graph?\n\n\u00ab Is it always possible to go from one configuratior\nother? (decision problem)\n\u00a9 What is the fastest way of going from one configuratio\n\nanother? Can | do it in at most k steps? (search/decisi\n\nproblem)",
    "Computational Problems\n\nWhat are some interesting computational problems rel\n\nthe reconfiguration graph?\n\n\u00ab Is it always possible to go from one configuration\nother? (decision problem)\n\u00a9 What is the fastest way of going from one configuratio\n\nanother? Can | do it in at most k steps? (search/decisi\n\nproblem)",
    "Computational Problems\n\nWhat are some interesting computational problems rel\n\nthe reconfiguration graph?\n\n\u00ab Is it always possible to go from one configuration\n\nother? (decision problem)\n\u00a9 What is the fastest way of going from one configuratio\n\nanother? Can | do it in at most k steps? (search/decisi\n\nproblem)",
    "Computational Problems\n\nWhat are some interesting computational problems rel:\n\nthe reconfiguration graph?\n\n\u00ab Is it always possible to go from one configuration\n\nother? (decision problem)\n\u00a9 What is the fastest way of going from one configuration to\nanother? Can | do it in at most k steps? (search/decisi\n\nproblem)",
    "Computational Problems\n\nWhat are some interesting computational problems rel:\n\nthe reconfiguration graph?\n\n\u00ab Is it always possible to go from one configuration\n\nother? (decision problem)\n\u00a9 What is the fastest way of going from one configuration to\nanother? Can | do it in at most k steps? (search/decisi\n\nproblem)",
    "Computational Problems\n\nWhat are some interesting computational problems rel:\n\nhe reconfiguration graph?\nthe reconfiguration graph *\n\n\u00ab Is it always possible to go from one configuration to any\n\nother? (decision problem)\n\n\u00a9 What is the fastest way of going from one configuration to\n\nanother? Can | do it in at most k steps? (search /decisi\n\nproblem)",
    "Computational Problems\n\nWhat are some interesting computational problems related to\n\nthe reconfiguration graph? *\n\n\u00ab Is it always possible to go from one configuration\nother? (decision problem)\n\n\u00a9 What is the fastest way of going from one configurati\nanother? Can | do it in at most k steps? (search/decisi\n\nproblem)",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (a:\n\nAmerican Univer",
    "Computational Problems\n\nWhat are some interesting computational problems related to\n\nthe reconfiguration graph? *\n\n\u00ab Is it always possible to go from one configuration\nother? (decision problem)\n\n\u00a9 What is the fastest way of going from one configurati\nanother? Can | do it in at most k steps? (search/decisi\n\nproblem)",
    "Computational Problems\n\nWhat are some interesting computational problems related to\nthe reconfiguration graph?\n\u00ab Is it always possible to go from one configuration to any\nother? (decision problem)\n\u00a9 What is the fastest way of going from one configuration to\nanother? Can | do it in at most k steps? (search/decisi\n\nproblem)",
    "Computational Problems\n\nWhat are some interesting computational problems related to\nthe reconfiguration graph?\n\u00ab Is it always possible to go from one configuration to any\nother? (decision problem)\n\u00a9 What is the fastest way of going from one configuration to\nanother? Can | do it in at most k steps? (search/decisi\n\nproblem)",
    "Computational Problems\n\nWhat are some interesting computational problems related to\nthe reconfiguration graph?\n\u00ab Is it always possible to go from one configuration to any\nother? (decision problem)\n\u00a9 What is the fastest way of going from one configuration to\nanother? Can | do it in at most k steps? (search/decisi\n\nproblem)",
    "Computational Problems\n\nhat are some interesting computational problems related to\n\nthe reconfiguration graph?\n\n\u00ab Is it always possible to go from one configuration to any\n\nother? (decision problem)\n\n\u00a9 What is the fastest way of going from one configurati\nanother? Can | do it in at most k steps? (search /decisi\n\nproblem)",
    "Computational Problems\n\nhat are some interesting computational problems related to\n\nthe reconfiguration graph?\n\n\u00ab Is it always possible to go from one configuration to any\n\nother? (decision problem)\n\n\u00a9 What is the fastest way of going from one configurati\nanother? Can | do it in at most k steps? (search /decisi\n\nproblem)",
    "Computational Problems\n\nhat are some interesting computational problems related to\n\nthe reconfiguration graph?\n\n\u00ab Is it always possible to go from one configuration to any\n\nother? (decision problem)\n\n\u00a9 What is the fastest way of going from one configuration to\n\nanother? Can | do it in at most k steps? (search/decisi\n\nproblem)",
    "Computational Problems\n\nhat are some interesting computational problems related to\n\nthe reconfiguration graph?\n\n\u00ab Is it always possible to go from one configuration to any\n\nother? (decision problem)\n\n\u00a9 What is the fastest way of going from one configurati\nanother? Can | do it in at most k steps? (search/decisi\n\nproblem)",
    "Computational Problems\n\nhat are some interesting computational problems related to\n\nthe reconfiguration graph?\n\n\u00ab Is it always possible to go from one configuration to any\n\nother? (decision problem)\n\n\u00a9 What is the fastest way of going from one configurati\nanother? Can | do it in at most k steps? (search/decisi\n\nproblem)",
    "f=(a, Va, Vag) Ala, V dy V Aig) A ssovoeee AAPM Ay V Os)\n\nGiven a boolean formula f is it possible to satisfy f?\n(NP-complete problem for k > 3)",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (a:\n\nAmerican Univer",
    "4, V0, \u00a5 a.) Aa, VG, V ayy) Assos (OG GY dy)\n\nGiven a boolean formula f is it possible to satisfy f?\n(NP-complete problem for k > 3)",
    "f(a, va, Vv a,) Ala, Va, Vy) A evr (My V ag V as)\n\nGiven a boolean formula f is it possible to satisfy f?\n(NP-complete problem for k > 3)",
    "f(a, va, Va.) Ala, Va, Vy) A ovr (My V dg Vas)\n\nGiven a boolean formula f is it possible to satisfy f?\n(NP-complete problem for k > 3)",
    "4G, VV a.) Aa, VG, V dg) A serves (My VV\n\nGiven a boolean formula f is it possible to satisfy f?\n(NP-complete problem for k > 3)",
    ", VG, Vg) Aly Y Gy V yg) A srseses (My V Og V\n\nGiven a boolean formula f is it possible to satisfy f?\n\n(NP-complete problem for k > 3)",
    ", VG, Vg) A, Y Gy V yg) A srsesesA [My V Og V\n\nGiven a boolean formula f is it possible to satisfy f?\n\n(NP-complete problem for k > 3)",
    "f(a, va, Va.) Ala, VG, Vay) A eevee (My V Og V 0.\n\nGiven a boolean formula f is it possible to satisfy f?\n(NP-complete problem for k > 3)",
    "f(a, va, Va.) Ala, Va, Vy) Arve (dy V O5 V\n\nGiven a boolean formula f is it possible to satisfy f?\n(NP-complete problem for k > 3)",
    "f(a, va, Va.) Ala, Va, Vy) Arve (dy V O5 V\n\nGiven a boolean formula f is it possible to satisfy f?\n(NP-complete problem for k > 3)",
    "k-SAT Reconfigura\n\n1000007 a4\n\n100601 TH10H]\n\nTo10007), di \u00bb\n\n(oo1006 inpnioi-| {init} ing\n\nToto} \u2014finiofTi\n\nGiven a formula f and two satisfying assignments s and \u00a2 is it\npossible to transform s to t via bit flips?",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (a:\n\nAmerican Univer",
    "k-SAT Reconfigura\n\n1000007 /\n\nZ\ni001) Gr troo}_\u2014frvToT)\n\nTo10O0T), ff \u00ab\n\n(306 ryHio7-} nn}\n\nTio\u20180i} \u2014{rvioft7\n\nGiven a formula f and two satisfying assignments s and \u00a2 is it\n\npossible to transform s to t via bit flips?",
    "k-SAT Reconfiguration\n\n100000) /\n\nZ\nii0060i) yp iron]\n\nTaN\n4 ~ [i110007} 7110077]\n\nee ininioi-} {in} td\n\nGiven a formula f and two satisfying assignments s and \u00a2 is it\n\npossible to transform s to t via bit flips?",
    "k-SAT Reconfigura\n\n100000) /\n\n7100601 {iinvor\n\nTOIGOOT,\n\n(poro00y {aii} fig\n\nf and two satisfying assignments s and \u00a2 is it\n\nGiven a formula\npossible to transform s to t via bit flips?",
    "k-SAT Reconfigura\n\n100000) /\n\n7100601 {iinvor\n\nTOIGOOT,\n\n(poro00y {aii} fig\n\nf and two satisfying assignments s and \u00a2 is it\n\nGiven a formula\npossible to transform s to t via bit flips?",
    "k-SAT Reconfigura\n\n(Lior\n7\n\n100000) /\n\n100601 {iiivor\n\nTO1GOOT,\n\n(orooon {i}\n\nf and two satisfying ass\n\nGiven a formula\npossible to transform s to t via bit flips?\n\nind\n\nignments s and t is it",
    "k-SAT Reconfigura\n\n100000) /\n\n7100601 {iinvor\n\nTOIGOOT,\n\n(poro00y {aii} fig\n\nf and two satisfying assignments s and \u00a2 is it\n\nGiven a formula\npossible to transform s to t via bit flips?",
    "k-SAT Reconfigura\n\n100000) /\n\n1100601 {iiivor\n\nTOIGOOT,\n\n(poro00y {aii} fig\n\nf and two satisfying assignments s and \u00a2 is it\n\nGiven a formula\npossible to transform s to t via bit flips?",
    "k-SAT Reconfigura\n\n100000) /\n\n7100601 {iinvor\n\nTOIGOOT,\n\n(poro00y {aii} fig\n\nf and two satisfying assignments s and \u00a2 is it\n\nGiven a formula\npossible to transform s to t via bit flips?",
    "k-SAT Reconfigura\n\n100000) /\n\n7100601 {iinvor\n\nTOIGOOT,\n\n(poro00y {aii} fig\n\nf and two satisfying assignments s and \u00a2 is it\n\nGiven a formula\npossible to transform s to t via bit flips?",
    "k-SAT Reconfigura\n\n100000) /\n\n100601 {iiivor\n\nTDIOOOT\noreo | ror im}\n\nf and two satisfying ass\n\nGiven a formula ignments s and t is it\n\npossible to transform s to t via bit flips?",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (a:\n\nAmerican Univer",
    "k-SAT Reconfigura\n\n000i) Gy Ton]\n\nFi\n\n100000)\n\n[0010001\n\n{iii} rin\n\nGiven a formula f and two satisfying assignments s and \u00a2 is it\npossible to transform s to t via bit flips?",
    "k-SAT Reconfigura\n\n{iroro0\n1000007 /\nTiioi7}\n\nFi\n\n[0010001\n\n{nuit} rina\n\nGiven a formula f and two satisfying assignments s and \u00a2 is it\npossible to transform s to t via bit flips?",
    "k-SAT Reconfigura\n\n100000) /\n\nZ\n100601\nToV0OOT),\n\n(oor006\n\nterior} \u2014finniini} fring\n\niH T0t0i}\u2014fitv04 7\n\nGiven a formula f and two satisfying assignments s and \u00a2 is it\npossible to transform s to t via bit flips?",
    "k-SAT Reconfigura\n\n100000) /\n\nZ\n100601\nToV0OOT),\n\n(oor006\n\nterior} \u2014finniini} fring\n\niH T0t0i}\u2014fitv04 7\n\nGiven a formula f and two satisfying assignments s and \u00a2 is it\npossible to transform s to t via bit flips?",
    "k-SAT Reconfigura\n\n1000007 f\n(100601) Gr roo \u2014frTOT\n\nTo10o07),\n\n(3006 {uy} {rig\n\nignments s and t is it\n\nGiven a formula f and two satisfying ass\n\npossible to transform s to t via bit flips?",
    "k-SAT Reconfigura\n\n7\n100000) y\n\nTo10007),\n\n(31665 ~~) nner} ip\n\n770101} \u2014fivv04 7\n\nGiven a formula f and two satisfying assignments s and \u00a2 is it\n\npossible to transform s to t via bit flips?",
    "k-SAT Reconfigura\n\n7\n100000) y\n\nTo10007),\n\n(31665 ~~) nner} np\n\n770101} \u2014{iiv04 7\n\nGiven a formula f and two satisfying assignments s and \u00a2 is it\n\npossible to transform s to t via bit flips?",
    "k-SAT Reconfigura\n\n100000) ff\n\nAira i \u2014{ri7707)\ncoo\n\n(ps1) _ {uy} {ria\n\nf and two satisfying assignments s and \u00a2 is it\n\nGiven a formula\npossible to transform s to t via bit flips",
    "k-SAT Reconfigura\n\n100000) ff\n\nAira i \u2014{ri7707)\ncoo\n\n(ps1) _ {uy} {ria\n\nf and two satisfying assignments s and \u00a2 is it\n\nGiven a formula\npossible to transform s to t via bit flips",
    "k-SAT Reconfigura\n\n100000) ff\n\nAira i \u2014{ri7707)\ncoo\n\n(ps1) _ {uy} {ria\n\nf and two satisfying assignments s and \u00a2 is it\n\nGiven a formula\npossible to transform s to t via bit flips",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (aa368@aub.edu.lb)\n\nAmerican Univ f Beirut",
    "k-SAT Reconfigura\n\n100000) /\n\n7100601 {iinvor\n\nToLOOHT\nowe {aii} fig\n\nf and two satisfying ass\n\nGiven a formula ignments s and t is it\n\npossible to transform s to t via bit flips?",
    "k-SAT Reconfigura\n\n100000) /\n\n7100601 {iinvor\n\nToLOOHT\nowe {aii} fig\n\nf and two satisfying ass\n\nGiven a formula ignments s and t is it\n\npossible to transform s to t via bit flips?",
    "k-SAT Reconfigura\n\n(Lior\n7\n\n100000) /\n\n100601 {iiivor\n\nTO1GOOT,\n\n(orooon {i}\n\nf and two satisfying ass\n\nGiven a formula\npossible to transform s to t via bit flips?\n\nind\n\nignments s and \u00a2 is it",
    "k-SAT Reconfigura\n\n100000) /\n\n7100601 {iinvor\n\nToLOOHT\nowe {aii} fig\n\nf and two satisfying ass\n\nGiven a formula ignments s and t is it\n\npossible to transform s to t via bit flips?",
    "k-SAT Reconfigura\n\n100000) /\n\n1100601 {iiivor\n\nToLOOHT\nowe {aii} fig\n\nf and two satisfying ass\n\nGiven a formula ignments s and t is it\n\npossible to transform s to t via bit flips?",
    "k-SAT Reconfiguration\n\n100000)\n\nsaad\n\u201800601 {Ton\n\ncoro io rin\n\nTNTG\n\nGiven a formula f and two satisfying assignments s and \u00a2 is it\n\npossible to transform s to t via bit flips?",
    "k-SAT Reconfigura\n\n100000)\nsaw\n\nOIG,\njor}\n\ncoro Tiytior-} fan} {a\n\nGiven a formula f and two satisfying assignments s and \u00a2 is it\npossible to transform s to t via bit flips?",
    "k-SAT Reconfigura\n\n(ror\n/\n\n100000)\n/\n\nTo10007),\n\n{0010001\n\nTioioi} \u2014fTio4\n\nGiven a formula f and two satisfying assignments s and \u00a2 is it\npossible to transform s to t via bit flips?",
    "k-SAT Reconfigura\n\n/\n\nTo10007),\n\n(gorooon)_ intrioi-+\u2014faniini} \u2014ininii\n\nir 7010i}\u2014 {Tivo 7\n\nGiven a formula f and two satisfying assignments s and \u00a2 is it\n\npossible to transform s to t via bit flips?",
    "k-SAT Reconfigura\n\n/\n\nTo10007),\n\n(gorooon)_ inirioi-+ finn} ining\n\nri010i}\u2014fiiv04 rT\n\nGiven a formula f and two satisfying assignments s and \u00a2 is it\n\npossible to transform s to t via bit flips?",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (aa368@aub.edu.lb)\n\nAmerican Univ f Beirut",
    "k-SAT Reconfigura\n\n100000)\n\nTO10007)_ Pal\ni Tin 100} Hiri\noreo niytior-} nn}\n\nGiven a formula f and two satisfying assignments s and \u00a2 is it\n\npossible to transform s to t via bit flips?",
    "k-SAT Reconfigura\n\n\u201cooo toon \u2014rayToN]\n\n100000)\n\nTOL0OoT| Z,\ni Tin 100} Hiri\ncoro niytior-| nn} 0\n\nGiven a formula f and two satisfying assignments s and \u00a2 is it\n\npossible to transform s to t via bit flips?",
    "Graph coloring\n\nGiven a graph G and an integer k is it possible to k-color G?\n\n(This is an NP-complete problem for k > 3)",
    "Given a graph G and an integer k is it possible to k-color G?\n\n(This is an NP-complete problem for k > 3)",
    "Given a graph G and an integer k is it possible to k-color G?\n\n(This is an NP-complete problem for k > 3)",
    "Graph coloring\n\nGiven a graph G and an integer k is it possible to k-color G?\n\n(This is an NP-complete problem for k > 3)",
    "Graph coloring\n\nGiven a graph G and an integer k is it possible to k-color G?\n\n(This is an NP-complete problem for k > 3)",
    "Graph coloring\n\nGiven a graph G and an integer k is it possible to k-color G?\n\n(This is an NP-complete problem for k > 3)",
    "Graph coloring\n\nGiven a graph G and an integer k is it possible to k-color G?\n\n(This is an NP-complete problem for k > 3)",
    "Graph coloring\n\nGiven a graph G and an integer k is it possible to k-color G?\n\n(This is an NP-complete problem for k > 3)",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\ner Mouawad (2a368@aub.edu.lb)\n\nerican University of Beirut",
    "Graph coloring\n\nGiven a graph G and an integer k is it possible to k-color G?\n\n(This is an NP-complete problem for k > 3)",
    "Graph coloring\n\nGiven a graph G and an integer k is it possible to k-color G?\n\n(This is an NP-complete problem for k > 3)",
    "Graph recoloring\n\nox\n\nGiven a graph G and two k-colorings a and is it possible to\n\nrecolor G from a to J one vertex at a time?",
    "Graph recoloring\n\nChedh.\n\nGiven a graph G and two k-colorings a and is it possible to\n\nrecolor G from a to J one vertex at a time?",
    "Graph recoloring\n\nChet).\n\nGiven a graph G and two k-colorings a and 7 is it possible to\n\nrecolor G from a to J one vertex at a time?",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (a3368@aub.edu.lb)\n\nAmerican Univ f Beirut",
    "Graph recoloring\n\nCheedh.\n\nGiven a graph G and two k-colorings a and is it possible to\n\nrecolor G from a to J one vertex at a time?",
    "Graph recoloring\n\nGiven a graph G and two k-colorings a and is it possible to\n\nrecolor G from a to 4 one vertex at a time?",
    "Graph recoloring\n\nGiven a graph G and two k-colorings a and is it possible to\n\nrecolor G from a to 4 one vertex at a time?",
    "Graph recoloring\n\nChet).\n\nGiven a graph G and two k-colorings a and 3 is it possible to\n\nrecolor G from a to j one vertex at a time?",
    "Graph recoloring\n\nCheedh.\n\nGiven a graph G and two k-colorings a and 3 is it possible to\n\nrecolor G from a to one vertex at a time?",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\ner Mouawad (2a368@aub.edu.lb)\n\nerican University of Beirut",
    "Graph recoloring\n\nChet).\n\nGiven a graph G and two k-colorings a and 3 is it possible to\n\nrecolor G from a to J one vertex at a time?",
    "Graph recoloring\n\nCheedh.\n\nGiven a graph G and two k-colorings a and 3 is it possible to\n\nrecolor G from a to J one vertex at a time?",
    "Graph recoloring\n\nCheedh.\n\nGiven a graph G and two k-colorings a and 3 is it possible to\n\nrecolor G from a to J one vertex at a time?",
    "Graph recoloring\n\nChet).\n\nGiven a graph G and two k-colorings a and 3 is it possible to\n\nrecolor G from a to J one vertex at a time?",
    "Graph recoloring\n\nCheedh.\n\nGiven a graph G and two k-colorings a and 3 is it possible to\n\nrecolor G from a to J one vertex at a time?",
    "Graph recoloring\n\nCheedh.\n\nGiven a graph G and two k-colorings a and 3 is it possible to\n\nrecolor G from a to J one vertex at a time?",
    "Graph recoloring\n\nheed).\n\nGiven a graph G and two k-colorings a and J is it possible to\n\nrecolor G from a to one vertex at a time?",
    "Graph recoloring\n\nCheedh.\n\nGiven a graph G and two k-colorings a and J is it possible to\n\nrecolor G from a to one vertex at a time?",
    "Graph recoloring\n\nCheedh.\n\nGiven a graph G and two k-colorings a and 3 is it possible to\n\nrecolor G from a to J one vertex at a time?",
    "Graph recoloring\n\nCheedh.\n\nGiven a graph G and two k-colorings a and J is it possible to\n\nrecolor G from a to j one vertex at a time?",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\ner Mouawad (2a368@aub.edu.lb)\n\nerican University of Beirut",
    "Graph recoloring\n\nCheedh.\n\nGiven a graph G and two k-colorings a and 3 is it possible to\n\nrecolor G from a to one vertex at a time?",
    "Graph recoloring\n\nCheedh.\n\nGiven a graph G and two k-colorings a and is it possible to\n\nrecolor G from a to J one vertex at a time?",
    "Token placement\n\nGiven a graph G and an integer k is it possible to place k (black)\n\ntokens on G such that no two share an edge? (also NP-complete)",
    "Token placement\n\nGiven a graph G and an integer k is it possible to place k (black)\n\ntokens on G such that no two share an edge? (also NP-complete)",
    "Token placement\n\nGiven a graph G and an integer k is it possible to place k (black)\ntokens on G such that no two share an edge? (also NP-complete)",
    "Token placement\n\nGiven a graph G and an integer k is it possible to place k (black)\ntokens on G such that no two share an edge? (also NP-complete)",
    "Token placement\n\nGiven a graph G and an integer k is it possible to place k (black)\n\ntokens on G such that no two share an edge? (also NP-complete)",
    "Token placement\n\nGiven a graph G and an integer k is it possible to place k (black)\n\ntokens on G such that no two share an edge? (also NP-complete)",
    "Token placement\n\nGiven a graph G and an integer k is it possible to place k (black)\n\ntokens on G such that no two share an edge? (also NP-complete)",
    "Token placement\n\nGiven a graph G and an integer k is it possible to place k (black)\n\ntokens on G such that no two share an edge? (also NP-complete)",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (a:\n\nAmerican Univer",
    "Token placement\n\nGiven a graph G and an integer k is it possible to place k (black)\n\ntokens on G such that no two share an edge? (also NP-complete)",
    "Token placement\n\nGiven a graph G and an integer k is it possible to place k (black)\n\ntokens on G such that no two share an edge? (also NP-complete)",
    "Token placement\n\nGiven a graph G and an integer k is it possible to place k (black)\n\ntokens on G such that no two share an edge? (also NP-complete)",
    "Token placement\n\nGiven a graph G and an integer k is it possible to place k (black)\n\ntokens on G such that no two share an edge? (also NP-complete)",
    "Token placement\n\nGiven a graph G and an integer k is it possible to place k (black)\n\ntokens on G such that no two share an edge? (also NP-complete)",
    "Token placement\n\nGiven a graph G and an integer k is it possible to place k (black)\n\ntokens on G such that no two share an edge? (also NP-complete)",
    "Token placement\n\nGiven a graph G and an integer k is it possible to place k (black)\n\ntokens on G such that no two share an edge? (also NP-complete)",
    "Token placement\n\nGiven a graph G and an integer k is it possible to place k (black)\n\ntokens on G such that no two share an edge? (also NP-complete)",
    "Token placement\n\nGiven a graph G and an integer k is it possible to place k (black)\n\ntokens on G such that no two share an edge? (also NP-complete)",
    "Token placement\n\nGiven a graph G and an integer k is it possible to place k (black)\ntokens on G such that no two share an edge? (also NP-complete)",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (a:\n\nAmerican Univer",
    "<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Given a graph G, an integer k, and two valid k-token\n\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "<ac>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (a:\n\nAmerican Univer",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "<ac>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "<ac>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\nGiven a\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\nGiven a\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\nGiven a\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (a:\n\nAmerican Univer",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<ac>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<ac>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sli\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (22368@aub.edu.lb)\n\nAmerican Univ f Beiru",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nerican Univ",
    "<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Given a graph G, an integer k, and two valid k-token\n\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<ac>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nid (2a368@aub.e\nF Bei\n\nAmer Mou: ub)\n\nAmerican Univer",
    "Token sliding /jumping (TS/TJ)\n\n<ac>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Token sliding /jumping (TS/TJ)\n\n<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "<a>\n\nGiven a graph G, an integer k, and two valid k-token\nconfigurations is it possible to transform one to the other (via\n\ntoken sliding or token jumping)?",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\nA deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\nphysics, quantum computing, complexity theory,\ncombinatorics, robotics)\n\nand hopefully more to come",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (a2368@aub.edu.lb)\n\nAmerican University of Beirut",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\n\u2018A deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\nphysics, quantum computing, complexity theory,\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\n\u2018A deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\nphysics, quantum computing, complexity\n\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\n\u2018A deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\nphysics, quantum computing, complexity\n\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\n\u2018A deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\nphysics, quantum computing, complexity theory\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\nA deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\nphysics, quantum computing, complexity theory\ncombinatorics, robotics)\n\nand hopefully more to come",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nid (2a368@aub.e\nF Bei\n\nAmer Mou: ub)\n\nAmerican Univer",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\nA deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\nphysics, quantum computing, complexity theory\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\n\u2018A deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\nphysics, quantum computing, complexity theory,\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\nA deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\nphysics, quantum computing, complexity\n\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\n\nA deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\n\nphysics, quantum computing, complexity\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic que:\n\nA deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\n\nphysics, quantum computing, complexity theory,\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic que:\n\nA deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\n\nphysics, quantum computing, complexity theory,\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\nA deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\nphysics, quantum computing, complexity theory,\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\nA deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\nphysics, quantum computing, complexity theory,\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic quest\nA deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\nphysics, quantum computing, complexity theory,\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\nA deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\nphysics, quantum computing, complexity theory,\ncombinatorics, robotics)\n\nand hopefully more to come",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nid (2a368@aub.e\nF Bei\n\nAmer Mou: ub)\n\nAmerican Univer",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\n\u2018A deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\nphysics, quantum computing, complexity theory,\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic quest\n\u2018A deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\nphysics, quantum computing, complexity theory,\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\n\u2018A deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\nphysics, quantum computing, complexity theory,\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\n\u2018A deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\nphysics, quantum computing, complexity theory\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\n\u2018A deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\nphysics, quantum computing, complexity theory,\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\n\u2018A deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\nphysics, quantum computing, complexity\n\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\n\u2018A deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\nphysics, quantum computing, complexity\n\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\n\u2018A deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\nphysics, quantum computing, complexity\n\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\n\u2018A deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\nphysics, quantum computing, complexity theory,\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\n\u2018A deeper understanding of solution-spaces\nApplications in several areas (e.g. algorithm design,\nphysics, quantum computing, complexity\ncombinatorics, robotics)\n\nand hopefully more to come",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nid (2a368@aub.\u20ac\nF Bei\n\nAmer Mou: ub)\n\nAmerican Univer",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\nA deeper understanding of solution-spaces\nApplications in several areas (e.g. algorithm design,\nphysics, quantum computing, complexity\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\n\u2018A deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistica\nphysics, quantum computing, complexity\n\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\n\u2018A deeper understanding of solution-spaces\nApplications in several areas (e.g. algorithm design,\nphysics, quantum computing, complexity\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\nA deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\nphysics, quantum computing, complexity\n\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\n\u2018A deeper understanding of solution-spaces\nApplications in several areas (e.g. algorithm design,\nphysics, quantum computing, complexity\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\nA deeper understanding of solution-spaces\nApplications in several areas (e.g. algorithm design,\nphysics, quantum computing, complexity\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\n\u2018A deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistica\nphysics, quantum computing, complexity\n\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic que:\n\u2018A deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\nphysics, quantum computing, complexity theory,\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\nA deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\nphysics, quantum computing, complexity\n\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\n\u2018A deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\nphysics, quantum computing, complexity\n\ncombinatorics, robotics)\n\nand hopefully more to come",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nid (2a368@aub.\u20ac\nF Bei\n\nAmer Mou: ub)\n\nAmerican Univer",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\n\u2018A deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\nphysics, quantum computing, complexity\n\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic questions\n\u2018A deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\nphysics, quantum computing, complexity\n\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\nA better model for \u201creal-world\u201d algorithmic que:\n\n\u2018A deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\n\nphysics, quantum computing, complexity theory,\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\n\u00ab\nA better model for \u201creal-world\u201d algorithmic questions\n\nA deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\n\nphysics, quantum computing, complexity theory,\ncombinatorics, robotics)\n\nand hopefully more to come",
    "Why do we care?\n\n\u201c\nA better model for \u201creal-world\u201d algorithmic que:\n\nA deeper understanding of solution-spaces\n\nApplications in several areas (e.g. algorithm design, statistical\nphysics, quantum computing, complexity\n\ncombinatorics, robotics)\n\nand hopefully more to come",
    "\u00ab\n\nOne-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSupine (TS)",
    "\u00ab\n\nOne-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSupine (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSupine (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSupine (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSupine (TS)",
    "On girth and the parameterized complexity of\ntoken sliding and token jumping\n\nAmer Mouawad (aa368@aub.edu.lb)\n\nAmerican Univ f Beirut",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSupine (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSuipinc (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSuipinc (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSupine (TS)",
    "One-dimensional complexity of\nTOKEN JUMPING (TJ) and TOKEN\nSupine (TS)"
  ]
}